#
def sample '{
	global SAMPLE_DESC

	SAMPLE_DESC = "$*"
}'

def newhdf5 '{
	
	global HDF5_FILE

	prev = HDF5_FILE

	HDF5_FILE = "$1"
	
	newfile /dev/null		

	return(HDF5_FILE)
}'

def hdf5_on '{

	HDF5_ON = 1

	cdef("user_postscan_head", "writehdf5_head sprintf(HDF5_FILE, SCAN_N); ", "_hdf5.output_")

	cdef("user_scan_loop", "writehdf5_nexus sprintf(MCA_FMT, HDF5_FILE, SCAN_N); ", "_hdf5.output_")
	
	cdef("user_scan_tail", "closehdf5 sprintf(MCA_FMT, HDF5_FILE, SCAN_N); ", "_hdf5.output_")

}'

def hdf5_off '{

	closehdf5
	
	cdef("", "", "_hdf5.output_", "delete")

	HDF5_ON = 0

}'

def closehdf5 '{

	h5_file(HDF5_FILE, "close")

}'

def writehdf5_head '{
	global HDF5_COUNT
	local entry, title, UTCdate
	local current, energy, en_err, grating, coating
	local exs_pos, stripe_M
	array temparray[1]

	if(!h5_file(HDF5_FILE, "open")){
		print "There was an error opening the data file."
		print "Aborting scan.."
		_scanabort
	}

	#Setup (default) instrument values for scan header.
	current = epics_get("PCT1402-01:mA:fbk")
	en_err = 5000 

	#Determine line density from grating
	grating = epics_get("AM1611-4-I10:energy:grating:translation:fbk")
	if (grating == "Low Energy"){
		period = 600
		coating = "Ni"
	}
	else if (grating == "Medium Energy"){
		period = 1100
		coating = "Au"
	}
	else {
		period = 1700
		coating = "Au"
	}
	
	#Determine exit slit and stripe values
        stripe_M = epics_get("BL1611-ID-1:stripe:fbk")
	exs_pos = epics_get("PSL16114I1004:Y:mm:fbk")

	#Get an appropriately formatted date.
	UTCdate = sprintf("%s", date(+"%Y-%m-%dT%H:%M:%S%z"))
	#Required by NXxas format.
	title = sprintf("SGM XAS Scan %s of %s", SCAN_N, HDF5_FILE)

	#Determine SR570 gains and write to header
	gPD_n = epics_get("Amp1611-4-22:sens_num")
        gTEY_n = epics_get("Amp1611-4-23:sens_num")
        gIo_n = epics_get("Amp1611-4-24:sens_num")
        gPD_u = epics_get("Amp1611-4-22:sens_unit")
        gTEY_u = epics_get("Amp1611-4-23:sens_unit")
        gIo_u = epics_get("Amp1611-4-24:sens_unit")
	TEYstring = sprintf("%s %s", gTEY_n, gTEY_u)
	I0string = sprintf("%s %s", gIo_n, gIo_u)
	PDstring = sprintf("%s %s", gPD_n, gPD_u)
 
	#Determine SDD hardware ROI values and write to header
	roi1_up = mca_spar(0, "scaler1", "upper")
        roi1_down = mca_spar(0, "scaler1", "lower")
        roi2_up = mca_spar(0, "scaler2", "upper")
        roi2_down = mca_spar(0, "scaler2", "lower")
	roi1 = sprintf("%s to %s", roi1_up, roi1_down)
	roi2 = sprintf("%s to %s", roi2_up, roi2_down)
	
	#Begin writing header. 	
	#Each spec scan will be a new entry into the HDF5 file. Labelled "entry1, entry2, etc"
	entry = sprintf("entry%s", SCAN_N)
	scan_string = sprintf("/%s", entry)	
	 h5_attr(scan_string,"NX_Class", "NXentry", "string")
		h5_attr("./", "entry", entry, "string")
		h5_data(".", "title", title, "string")
		h5_data(".", "start_time", UTCdate, "string")
		#h5_link(".", "definition", "NXxas.nxdl.xml")
		h5_data(".", "definition", "NXxas", "string") 
		scan_string = sprintf("/%s/instrument", entry)
		h5_data(scan_string)
		 h5_attr(scan_string,"NX_Class", "NXinstrument", "string")
			#CLS Synchrotron information. NX_Class =  NXsource
			scan_string = sprintf("/%s/instrument/source", entry)
			h5_data(scan_string)
			  h5_attr(scan_string, "NX_Class", "NXsource", "string")
				h5_data(scan_string, "name", "Canadian Light Source - SGM","string")
			 	 h5_attr("./name", "short_name", "CLS-SGM", "string") 
				h5_data(scan_string, "type", "Synchrotron X-ray Source", "string")
				h5_data(scan_string, "probe", "x-ray", "string")
				h5_data(scan_string, "energy", 2.9)
			 	 h5_attr("./energy", "units", "GeV", "string")
				h5_data(scan_string, "current", current, "double")
			 	 h5_attr("./current", "units", "mA", "string")
				h5_data(scan_string, "top_up", 0, "byte")
			#Monochromator information, NX_Class = NXmonochromator
			scan_string = sprintf("/%s/instrument/monochromator",entry)
			h5_data(scan_string)
			 h5_attr(scan_string, "NX_Class", "NXmonochromator", "string")
				h5_data(scan_string, "energy_error", en_err, "long")
				 h5_attr("./energy_error", "units", "< E/dE", "string") 
				scan_string = sprintf("/%s/instrument/monochromator/grating", entry)
				h5_data(scan_string)
				 h5_data(".","period", period)
				 h5_data(".", "deflection_angle", "5")
				  h5_attr("./deflection_angle", "units", "degrees", "string")
				 h5_data("..", "interior_atmosphere", "vacuum", "string")
				 h5_data(".", "substrate_material", "Fused Silica", "string")
				 h5_data(".", "coating_material", coating, "string")
				 h5_data(".", "coating_roughness", "10")
				  h5_attr("./coating_roughness", "units", "angstrom","string")
				 h5_data("..", "coating_thickness", "2000")
				  h5_attr("./coating_thickness", "units", "angstrom", "string")
				 h5_data("..", "shape", "nxsphere", "string") 
				 #Could put in mono distance from source here.
			#Monitor incoming and absorbed beam counters, NX_Class = NXdetector
			scan_string = sprintf("/%s/instrument/incoming_beam", entry)
			h5_data(scan_string)
			 h5_attr(scan_string, "NX_Class", "NXdetector", "string")
				ladder_temp = sprintf("%s", ladder1)
				 h5_attr(".", "ladder1", ladder_temp, "string") 
				ladder_temp = sprintf("%s", ladder2)
				 h5_attr(".", "ladder2", ladder_temp, "string")
			scan_string = sprintf("/%s/instrument/absorbed_beam", entry)
			h5_data(scan_string)
			  h5_attr(scan_string, "NX_Class", "NXdetector", "string")
		#Set-up sample information and positioner storage.
		scan_string = sprintf("/%s/sample", entry) 
		h5_data(scan_string)
		 h5_attr(scan_string, "NX_Class", "NXsample", "string")
		 	h5_data(".", "name", SAMPLE_DESC, "string")	
			scan_string = sprintf("/%s/sample/positioner", entry)
			h5_data(scan_string)
		 	 h5_attr(scan_string, "NX_Class", "NXpositioner", "string")   		
			

	
	#Initialize storage for counters/detectors.
	for(i=0;i<COUNTERS;i++){
		if(cnt_name(i) == "TEY"){
			#Gain Record TEY
			scan_string = sprintf("/%s/instrument/absorbed_beam", entry)
			h5_data(scan_string, cnt_name(i),temparray,"dims=-1")
			 scan_string = sprintf("/%s/instrument/absorbed_beam/%s", entry, cnt_name(i))
	 		 h5_attr(scan_string, "gain_setting", TEYstring, "string")
		}
		else if(cnt_name(i) == "Diode"){
			#Gain Record PD
			scan_string = sprintf("/%s/instrument/absorbed_beam", entry)
			h5_data(scan_string, cnt_name(i),temparray,"dims=-1")
			 scan_string = sprintf("/%s/instrument/absorbed_beam/%s", entry, cnt_name(i))
 	 		 h5_attr(scan_string, "gain_setting", PDstring, "string")
 		}
		else if(cnt_name(i) == "I0"){
			#Gain Record I0
			scan_string = sprintf("/%s/instrument/incoming_beam", entry)
			h5_data(scan_string, cnt_name(i),temparray,"dims=-1")
			 scan_string = sprintf("/%s/instrument/absorbed_beam/%s", entry, cnt_name(i))
	 		h5_attr(scan_string, "gain_setting", I0string, "string")
		}
		else if(cnt_name(i) == "SDD1_ROI1"){
			scan_string = sprintf("/%s/instrument/absorbed_beam", entry)
			h5_data(scan_string, cnt_name(i),temparray,"dims=-1")
			 scan_string = sprintf("/%s/instrument/absorbed_beam/%s", entry, cnt_name(i))
		 	 h5_attr(scan_string, "ROI1", roi1, "string")
		}	
		else if(cnt_name(i) == "SDD1_ROI2"){
			scan_string = sprintf("/%s/instrument/absorbed_beam", entry)
			h5_data(scan_string, cnt_name(i),temparray,"dims=-1")
			 scan_string = sprintf("/%s/instrument/absorbed_beam/%s", entry, cnt_name(i))
		 	 h5_attr(scan_string, "ROI2", roi2, "string")
		}	
		else if(cnt_name(i) == "SDD2_ROI1"){
			scan_string = sprintf("/%s/instrument/absorbed_beam", entry)
			h5_data(scan_string, cnt_name(i),temparray,"dims=-1")
			 scan_string = sprintf("/%s/instrument/absorbed_beam/%s", entry, cnt_name(i))
		 	 h5_attr(scan_string, "ROI1", roi1, "string")
		}	
		else if(cnt_name(i) == "SDD2_ROI2"){
			scan_string = sprintf("/%s/instrument/absorbed_beam", entry)
			h5_data(scan_string, cnt_name(i),temparray,"dims=-1")
			 scan_string = sprintf("/%s/instrument/absorbed_beam/%s", entry, cnt_name(i))
		 	 h5_attr(scan_string, "ROI2", roi2, "string")
		}	
		else if(cnt_name(i) == "SDD3_ROI1"){
			scan_string = sprintf("/%s/instrument/absorbed_beam", entry)
			h5_data(scan_string, cnt_name(i),temparray,"dims=-1")
			 scan_string = sprintf("/%s/instrument/absorbed_beam/%s", entry, cnt_name(i))
		 	 h5_attr(scan_string, "ROI1", roi1, "string")
		}	
		else if(cnt_name(i) == "SDD3_ROI2"){
			scan_string = sprintf("/%s/instrument/absorbed_beam", entry)
			h5_data(scan_string, cnt_name(i),temparray,"dims=-1")
			 scan_string = sprintf("/%s/instrument/absorbed_beam/%s", entry, cnt_name(i))
		 	 h5_attr(scan_string, "ROI2", roi2, "string")
		}	
		else if(cnt_name(i) == "SDD4_ROI1"){
			scan_string = sprintf("/%s/instrument/absorbed_beam", entry)
			h5_data(scan_string, cnt_name(i),temparray,"dims=-1")
			 scan_string = sprintf("/%s/instrument/absorbed_beam/%s", entry, cnt_name(i))
		 	 h5_attr(scan_string, "ROI1", roi1, "string")
		}	
		else if(cnt_name(i) == "SDD4_ROI2"){
			scan_string = sprintf("/%s/instrument/absorbed_beam", entry)
			h5_data(scan_string, cnt_name(i),temparray,"dims=-1")
			 scan_string = sprintf("/%s/instrument/absorbed_beam/%s", entry, cnt_name(i))
		 	 h5_attr(scan_string, "ROI2", roi2, "string")
		}
		else {
			scan_string = sprintf("/%s/instrument/absorbed_beam/", entry)
			h5_data(scan_string, cnt_name(i),temparray,"dims=-1")

			 scan_string = sprintf("/%s/instrument/absorbed_beam/%s", entry, cnt_name(i))
		}
		

	}
	data_string = sprintf("/%s/data", entry)
	h5_data(data_string)
	#Initialize storage for motors/positioners.
	for (i = 0; i < MOTORS; i++){
		if(i == 0){
			pos_motor_string = motor_name(i)
		}
		else{
			pos_motor_string = sprintf("%s:%s",pos_motor_string, motor_name(i))
		}
		if(motor_name(i) == "en"){
			scan_string = sprintf("/%s/instrument/monochromator",entry)
			h5_data(scan_string, motor_name(i), temparray, "dims=-1")
			 scan_string = sprintf("%s/%s", scan_string, motor_name(i))
			 h5_data(data_string, motor_name(i), scan_string, "link")	
			 h5_attr(scan_string, "units", "electron-volt", "string")
		}		
		else {
			scan_string = sprintf("/%s/sample/positioner", entry)
			h5_data(scan_string, motor_name(i), temparray, "dims=-1")
			 scan_string = sprintf("/%s/sample/positioner/%s", entry, motor_name(i))
			 h5_data(data_string, motor_name(i), scan_string, "link")	
			 h5_attr(scan_string, "units", "millimetres", "string")
		}
	}
	#Initialize storage for the SDD mcas.
	for (i=1; i<5;i++){
		sddname = sprintf("SDD%s", i)
		scan_string = sprintf("/%s/instrument/fluorescence", entry )
		h5_data(scan_string, sddname, tempMCA2, "dims=-1:256")
	}

	#Link to the pertinent data for an XAS scan.
	scan_string = sprintf("/%s/data", entry)
	data_string = sprintf("/%s/instrument/absorbed_beam/%s", entry, cnt_name(det))
	if(h5_data(scan_string, "absorbed_beam", data_string, "link")){
		h5_attr(data_string, "signal", 1, "byte")
		h5_attr(data_string, "axes", pos_motor_string, "string")
	}

	HDF5_COUNT = 0
				
}'


def writehdf5_nexus '{
	local tempMCA2
	local en_loc, pos_loc
	local in_loc, ab_loc, mca_loc
	in_loc = sprintf("/entry%s/instrument/incoming_beam",SCAN_N)
	ab_loc = sprintf("/entry%s/instrument/absorbed_beam",SCAN_N)
	mca_loc = sprintf("/entry%s/instrument/fluorescence", SCAN_N)
	en_loc = sprintf("/entry%s/instrument/monochromator",SCAN_N)	
	pos_loc = sprintf("/entry%s/sample/positioner",SCAN_N)

	for(i = 0; i < MOTORS; i++){
		if(m_name == "en"){
			location = en_loc
		}
		else {
			location = pos_loc
		}
		h5_data(location, motor_name(i), A[i], frame=HDF5_COUNT)
	}

	for(i = 0; i < COUNTERS; i++){	
		if (ct_name == "I0") {
			location = in_loc	
		}
		else {
			location = ab_loc
		}
		h5_data(location, cnt_name(i), S[i], frame=HDF5_COUNT)
	}
	
	tempMCA22 = MCA1_DATA
	h5_data(mca_loc, "SDD1", tempMCA2, frame=HDF5_COUNT)
	tempMCA2 = MCA2_DATA
	h5_data(".", "SDD2", tempMCA2, frame=HDF5_COUNT) 
	tempMCA2 = MCA3_DATA
	h5_data(".", "SDD3", tempMCA2, frame=HDF5_COUNT) 
	tempMCA2 = MCA4_DATA
	h5_data(".", "SDD4", tempMCA2, frame=HDF5_COUNT) 

	HDF5_COUNT = HDF5_COUNT + 1
}'
