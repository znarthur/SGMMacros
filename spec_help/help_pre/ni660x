ni660x                              hardware                              ni660x

NAME
     ni660x - National Instruments 6601/6602 PCI counter/timer

DESCRIPTION

     The National Instruments models 6601 and 6602 PCI counter/timers provide
     four and eight 32-bit counter channels respectively.  The 6601 specifies a
     maximum unprescaled count rate of 20 MHz while the 6602 specifies 80 MHz.
     However, all inputs may be prescaled by a factor of eight, extending the
     usable maximum count rates to 60 MHz for the 6601 and 125 MHz for the 6602.
     (The prescaling also gives three more bits of effective counter size.)

     When counting to time, for shorter count times, ssppeecc uses the 20 MHz
     built-in clock.  If prescale is on for the time channel (which it is by
     default), the effective clock rate is 2.5 MHz.  With a 32-bit counter, that
     allows for a maximum count time of just under 28.6 minutes (1717.9
     seconds).  If prescale is off, the maximum count time is 214.7 seconds (3.6
     minutes).  For longer count times, ssppeecc uses the 100 KHz clock with
     prescaling off, allowing for a maximum count time of nearly 12 hours (as of
     ssppeecc release 5.06.05-3).

     ssppeecc will keep track of overflows to the channel counting time (when not
     counting to a time preset), but does not currently correct for counter
     overflows in the other channels.

     ssppeecc also provides commands for selecting the hardware's digital debouncing
     filter for external inputs and for accessing the eight digital I/O pins
     available on these cards.  See the FFUUNNCCTTIIOONNSS section below for details.

SOFTWARE CONFIGURATION

     Use ssppeecc's configuration editor (eeddccoonnff, normally invoked by the ccoonnffiigg
     macro) to select the timer and to configure the scaler channels.  On the
     DDevices screen, you need only enter the the number of counters to be used
     on the board.

        SSCCAALLEERRSS  DDEEVV  AADDDDRR  <<>>MMOODDEE  NNUUMM                             <<>>TTYYPPEE
            YYEESS        00::00            44  NNII PPCCII 66660011//66660022 aass CCoouunntteerr//TTiimmeerr
            YYEESS        00::00            88       NNII PPCCII 66660011//66660022 aass CCoouunntteerrss

     The ADDR field can be optionally used to configure the PCI bus:slot numbers
     if more than one of these cards is installed in the same computer.  Leaving
     the default value of 0:0 means the card can be in any slot.  Note, the
     values must be entered as decimal numbers in ssppeecc's configuration editor,
     even though the LLiinnuuxx //ssbbiinn//llssppccii utility will list the values in
     hexadecimal.  For cards with ADDR set to the default 0:0, ssppeecc will select
     the next unassigned card it detects.  (The ADDR feature is as of ssppeecc
     release 5.08.05-5.)

     On the SScaler screen, choose NNII666600xx as the device type.  The unit numbers
     are assigned consecutively to the NI PCI counter/timers according to the
     order they are listed on the DDevices screen, starting with unit zero:

        NNUUMMBBEERR      NNAAMMEE  MMNNEEMMOONNIICC  <<>>DDEEVVIICCEE  UUNNIITT  CCHHAANN   <<>>UUSSEE AASS  SSCCAALLEE
             00   SSeeccoonnddss       sseecc    NNII666600xx     00     00   ttiimmeebbaassee      11
             11   MMoonniittoorr       mmoonn    NNII666600xx     00     11    mmoonniittoorr      11
             22  DDeetteeccttoorr       ddeett    NNII666600xx     00     22    ccoouunntteerr      11
             33 CCoouunntteerr 22        cc22    NNII666600xx     00     33    ccoouunntteerr      11
             33 CCoouunntteerr 33        cc33    NNII666600xx     11     00    ccoouunntteerr      11
             33 CCoouunntteerr 44        cc44    NNII666600xx     11     11    ccoouunntteerr      11

     Any channel can be used as the time base.  Also, any channel can be used as
     the monitor-preset channel.  In addition, the monitor channel assignment
     can be changed while running with ccoouunntteerr__ppaarr(()) (see the FFUUNNCCTTIIOONNSS section
     below).

     The scale factor is ignored for the time-base channel, since the time base
     is set and accounted for internally in the C code.

THEORY OF OPERATION

     One of the key requirements for counter/timers in ssppeecc is the capability to
     have a master channel that will gate the slave counter channels by way of a
     hardware signal.  A second requirement is that at least two channels (one
     for time and one for monitor) can be used as the master channel.  Even
     better is hardware that allows any channel to be used as the master
     channel.  The NI 6601 and 6602 meet these requirements.

     The 660x card architecture allows any channel to be configured to use any
     other channel's associated gate input pin as its own gate.  ssppeecc requires
     each possible master counter's output connected to its associated gate via
     a jumper.  That counter's output will then serve as gate for all the
     counters.  See the HHaarrddwwaarree CCoonnffiigguurraattiioonn section below.

     Normally all outputs are disabled.  When a particular counter is the
     master, ssppeecc configures just that channel to have its output activated
     during counting to serve as gate for all channels.  When the master counter
     counts down from its preset and reaches zero, the last count changes the
     state of the output, which disables the slave counters.  This achieves a
     reliable hardware gating.

     If the card is set up as only counters, ssppeecc configures the card so that
     all channels will gate off the gate pin associated with the lowest numbered
     channel included in the ccoonnffiigg file.  The external gate from the master
     timer device can be connected to that pin.

     If the 660x is to be used as master to gate other cards, one must connect
     the various designated output pins of the possible master counter channels
     together and use that signal.  ssppeecc will only activate one output pin at a
     time.  All the other pins will be in the default power-on state of
     high-impedance inputs, so there is no danger of overloading the outputs as
     long as ssppeecc is used to control the card.

     By default, ssppeecc programs each channel for an active-high gate.  That is,
     during counting the output signal from the master channel will be nominally
     at +5V.  The ccoouunntteerr__ppaarr(()) command can be used to configure the gate signal
     as active low (see below), if that makes gating other devices more
     convenient.  Note, the gate mode is reset to the default after reading the
     hardware ccoonnffiigg file.  If using active-low gates, add the appropriate
     command for setting active-low gates to a ccoonnffiigg__mmaacc macro, which will be
     called automatically during hardware configuration.

     Although hardware gating is preferred for counters, ssppeecc does in any case
     send appropriate commands to arm and disarm the counters in the absence of
     hardware gating.  The arm command occurs before the master timer is
     started.  The disarm command occurs after the master timer has stopped.  If
     no hardware gate is used with NI PCI cards configured as just counters, the
     active-low gating mode needs to be set, otherwise the counters will stay
     inhibited.

HARDWARE CONFIGURATION

     For each counter channel that will be used as a master timing channel
     (either with the internal time base or with an external monitor-count
     preset), you need to connect the associated output pin to the associated
     gate pin.  It doesn't hurt to make all the connections, even if you don't
     anticipate the channel being used for a monitor preset channel.  All models
     can have the following connections:

         Out(0) pin  5 to Gate(0) pin  3
         Out(1) pin  9 to Gate(1) pin  8
         Out(2) pin 32 to Gate(2) pin 67
         Out(3) pin 29 to Gate(3) pin 64

     For the eight-channel 6602, these additional connections can be made:

         Out(4) pin 26 to Gate(4) pin 61
         Out(5) pin 23 to Gate(5) pin 58
         Out(6) pin 53 to Gate(6) pin 21
         Out(7) pin 16 to Gate(7) pin 51

     A channel will not work properly until its corresponding output-to-gate
     jumper is installed.  That includes the time-base channel.

     Input signals connect to the following pins.  Note, one channel will
     probably be used for the time base, as selected in the ccoonnffiigg file.
     There's no need to connect an input signal to that channel, since it will
     be programmed to use the internal clock.

         Source(0) pin  2
         Source(1) pin  7
         Source(2) pin 34
         Source(3) pin 31

     For the 6602 model, the additional inputs are:

         Source(4) pin 28
         Source(5) pin 25
         Source(6) pin 22
         Source(7) pin 52

     Choose any of the many ground pins as ground.

FUNCTIONS

     The following ccoouunntteerr__ppaarr(()) options are available.  The first three
     commands are associated with particular counter channels:

     ccoouunntteerr__ppaarr((mmnnee,, ""mmoonniittoorr"")) - Sets the channel assigned to mnemonic mmnnee to
          be the monitor preset channel.  The monitor channel gets reset when
          the ccoonnffiigg file is read on start up or on rreeccoonnffiigg.

     ccoouunntteerr__ppaarr((mmnnee,, ""pprreessccaallee"" [[,, hhooww]])) - Without the optional argument,
          returns nonzero if the channel for mmnnee has been configured with the
          divide-by-eight prescale.  If called with hhooww nonzero, turns on the
          divide-by-eight prescale.  Rereading the ccoonnffiigg file resets the mode
          to the default, which is prescale on for the time-base channel, and
          prescale off for the rest.

     ccoouunntteerr__ppaarr((mmnnee,, ""ffiilltteerr"" [[,, vvaall]])) - Without the optional argument, returns
          zero, 1e-6, 5e-6, 1e-7 or 5e-7 indicating which digital debouncing
          filter is associated with the input signal for the corresponding
          counter channel.  The units are seconds.  Otherwise, sets the filter
          according to vvaall.  A parameter of zero disables the filter.  The code
          also accepts 1, 5, 100 or 500 as valid arguments.  According to the NI
          documentation, input pulses with widths equal to or greater than the
          value indicated are guaranteed to be passed, and pulses with widths of
          half the value or less are guaranteed to be blocked.  This parameter
          can also be set in the ccoonnffiigg file as optional scaler parameter
          ""mmiisscc__ppaarr__11"". (Type ss from the main SScaler screen to access the
          optional parameters.) (Filter support added in ssppeecc release
          5.07.03-1.)

     The following options are associated with the operation of the card, not
     with a particular channel.  The mmnnee argument is necessary for the syntax of
     the command and should be the mnemonic or counter number of any of the
     configured channels associated with the card.

     ccoouunntteerr__ppaarr((mmnnee,, ""aaccttiivvee__llooww"" [[,, hhooww]])) - Without the optional argument,
          returns nonzero if the counting card associated with channel mmnnee has
          been configured for active-low gates.  If called with hhooww nonzero,
          turns on the active-low mode for gating.  Otherwise, sets the default
          active-high gate mode.  Rereading the ccoonnffiigg file resets the mode to
          active high.  The mode only needs to be set for one channel to affect
          all channels on the card.

     ccoouunntteerr__ppaarr((mmnnee,, ""iioo__ccoonnffiigg"" [[,, vvaall]])) - Bits set in vvaall will be configured
          as outputs on the digital I/O lines.  On power up, all lines are
          configured as inputs.  If the optional argument is missing, ssppeecc will
          return the current value as set by the user.  (The value can't be read
          from the card itself.)

     ccoouunntteerr__ppaarr((mmnnee,, ""sseett__bbiitt"",, vvaall)) - Set output lines corresponding to bit
          number vvaall to high, where bits and lines are numbered from 0 to 7.

     ccoouunntteerr__ppaarr((mmnnee,, ""ccllrr__bbiitt"",, vvaall)) - Set output line corresponding to bit
          number vvaall to low, where bits and lines are numbered from 0 to 7.

     ccoouunntteerr__ppaarr((mmnnee,, ""ppuutt__bbyyttee"",, vvaall)) - Sets output lines corresponding to the
          bits set in vvaall to high and bits not set in vvaall to low.

     ccoouunntteerr__ppaarr((mmnnee,, ""ggeett__bbiitt"",, vvaall)) - Returns 0 or 1 based on whether the
          input line corresponding to bit number vvaall is high or low, where lines
          and bits are numbered from 0 to 7.

     ccoouunntteerr__ppaarr((mmnnee,, ""ggeett__bbyyttee"")) - Returns an 8-bit value that reflects the
          setting of the input lines.

