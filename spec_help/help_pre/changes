changes                      spec 6.03 Release Notes                     changes

NAME
     changes - Highlights for ssppeecc release 6.03

July 30, 2015 - RELEASE 6.03.06

Can Return Sub-second File Times with ffiillee__iinnffoo(())
     The ""aattiimmee"", ""mmttiimmee"" and ""ccttiimmee"" options to ffiillee__iinnffoo(()) will now return
     file times to sub-second resolution on platforms and file systems that
     support the feature.  LLiinnuuxx platforms with gglliibb version 2.12 or greater
     support the feature.  All MMaacc OOSSXX versions supported by ssppeecc support the
     feature, although the HFS and HFS+ file systems do not.

Broken oorr__sswwaapp Macro Fixed
     Updates to the orientation matrix macros in ssppeecc release 6.02.08 to
     accommodate a new seven-circle geometry introduced a bug in the oorr__sswwaapp
     macro used to swap the two orientation vectors.  That bug is fixed in this
     release.

Fix For Server Crash
     A rare crash that could occur in a ssppeecc server when the socket connection
     to a client was unexpectedly lost while there were pending events for that
     client has been fixed.

Improved Handling Of Communication Errors With Tsuji PM16C Motor Controllers
     The ssppeecc support for the Tsuji PM16C motor controllers now includes code to
     better detect and deal with communication errors.  Previously, if the
     communication interface was error prone, it was possible for the messages
     between the controller and ssppeecc to get out of sync, with responses getting
     associated with the wrong command.  One symptom of the out-of-sync problem
     would be a spurious message that a motor hit a limit switch.  The code now
     does consistency checking on the responses to the read-position and
     get-status commands.  If the responses are in the wrong format for the
     particular command, ssppeecc will attempt to resynchronize communications.

Fix For Kontron PCIDCC5 Digital I/O
     A bug in the code that prevented the ccoouunntteerr__ppaarr(()) commands for setting and
     reading the digital I/O on the Kontron (ICS Advent) PCIDCC5/5-P model
     Am9513-based PCI counter/timer card has been fixed.  See the _a_m_9_5_1_3 help
     file for details on the commands.

Fix For Agilis Configuration Crash
     A recently introduced bug, where the code for the Newport Agilis motor
     controller could cause a crash if a controller was configured but not
     present, has been fixed.

July 7, 2015 - RELEASE 6.03.05

Unlimited Line Length for ggeettlliinnee(()) and aarrrraayy__rreeaadd(())
     The ggeettlliinnee(()) function to read a line of text from a file and the
     aarrrraayy__rreeaadd(()) function to fill a data array with values from a text file
     have been updated to allow reading from files with unlimited line lengths.
     Previously, ggeettlliinnee(()) would read up to a maximum of 4095 characters and
     aarrrraayy__rreeaadd(()) would allow input lines up to 2047 characters.

New GGEETTLLIINNEE__EEOOFF Built-in Symbol For ggeettlliinnee(())
     To distinguish between an end of file, an error or a literal -1, the
     ggeettlliinnee(()) function now assigns a value to a new built-in variable named
     GGEETTLLIINNEE__EEOOFF.  After each call of ggeettlliinnee(()), the value of GGEETTLLIINNEE__EEOOFF will
     be 1 if there was an end-of-file condition on the read of the file, -1 if
     there was an error reading the file or if the file couldn't be opened and
     zero if the read was successful.  For backward compatibility, the ggeettlliinnee(())
     return value will continue to be -1 on end of file or an error, or if the
     current line of the file is the string -1.

New aarrrraayy__rreeaadd(()) Option To Skip Initial Columns
     A new optional ""CC==##"" argument to array_read() can be used to specify from
     which column in the file to start assigning data.  See the _a_r_r_a_y_s help file
     for details.

Restored Capability For Fixed-Ranged Updated Plots
     Release 6.02 of ssppeecc included new plotting macros that auto-ranged the xx
     axis in the updated plot displayed during scans.  This ssppeecc release now
     includes an option to configure the behavior as either fixed or auto-ranged
     via the sseettpplloott macro.

Updates For New Focus 8742 Motor Controller
     The ssppeecc support for the New Focus 8742 controller now works with its USB
     and RS-485 (via RS-232C) interfaces.  In addition, daisy-chained units
     connected in series with a master (gateway) controller using the RS-485
     connections are now supported.  When using daisy-chained units, set the
     "crate" address in the motor configuration to the module address.  Finally,
     the socket connection code will now automatically attempt to reconnect when
     connections are dropped by the controller.

Fix For Mythen When Specifying a TrimMo Settings File
     An old typo in the ssppeecc Dectris Mythen MCA support that translated the
     deprecated (in firmware version 2) ""--ttrriimmffiillee TTrriimmMMoo"" command to the
     ""--sseettttiinnggss SSttddmmMMoo"" command has been corrected by removing the surplus lower
     case mm.  In addition, the deprecated (in firmware version 3) ""--sseettttiinnggss""
     arguments that begin with Hg, Std, and Fast have those prefixes
     automatically removed when using firmware version 4.

Fix For Reporting Trinamic TMCL Parameter Values
     All the Trinamic TMCL motor controller parameters can be accessed via the
     mmoottoorr__ppaarr(()) function using generic numbered names, such as ""ppaarr66"".  Some of
     these parameters have aliases such as ""PPeeaakkCCuurrrreenntt"" which corresponds to
     parameter 6.  Previously, if the parameter value was changed using the
     generic name (""ppaarr66""), the value reported by mmoottoorr__ppaarr(()) for the alias
     (""PPeeaakkCCuurrrreenntt"") would not reflect the new value.  That issue is corrected
     in this release.

Fix For Server Mode Interactive Command Echoing
     An issue where characters typed at the keyboard of a ssppeecc server session
     could be echoed twice to the screen if typed while the server was executing
     a client command has been fixed.

Updates For sspplloott Utility
     The sspplloott utility now supports xx-axis logarithmic plotting.  Also, an issue
     with yy-axis logarithmic plotting in shared-data mode, where data was not
     always plotted, has been fixed.  In addition, a new sspplloott__ccnnttll(()) command
     ""pplloottrraannggee"" provides the same functionality as the pplloott__rraannggee(()) function
     for the traditional plotting and is used in the standard plotting macros to
     implement the sseettpplloott options to force the yy-axis minimum to zero and to
     use fixed ranges for the xx axis during scans.

     A new sspplloott__ccnnttll(()) command ""sshhoowwssttaattss"" can be used to toggle the display of
     the peak, center-of-mass and full-width-at-half-max markers.

     A new sspplloott__ccnnttll(()) command ""sshhoowwmmoottoorr"" can be used to toggle the display of
     a marker showing the current position of the

Fixes and Updates For nneewwssccaannss..mmaacc
     The previous release included a file named nneewwssccaannss..mmaacc that contains a new
     implementation of the standard macros that will replace the standard macros
     in a forthcoming update.  There are a few updates to these new scan macros
     as follows:

     The HHEEAADDIINNGG string (used in the screen display, data file and plots) for
     the ddssccaann macros had showed incorrect start and end positions, but is now
     fixed.

     The new ffssccaann (file scan) macro has been updated to allow the count time to
     be optionally assigned at the end of each row of motor positions.  If
     invoked without a count-time option, and if the file contains a count time
     at the end of each row of motor positions, the file count times will be
     used at each point.  If the scan is invoked with a count-time argument, the
     file count times will be ignored.  Also, the motor mnemonics for the scan
     must now be proceeded by a ##MM and a space rather than a lone ## to allow for
     comments in the file and future ## directives.  A single ## followed by a
     space introduces a comment.

May 11, 2015 - RELEASE 6.03.04

New String-Handling Functions With Regular Expressions
     New built-in string-handling functions use an extended regular expression
     as an argument as follows:

         rrsspplliitt(()) - like sspplliitt(()) in that it splits a string and places the parts
              into an array, but the delimiter can be a regular expression.

         mmaattcchh(()) - finds the position in a string where a regular expression
              occurs, and optionally places matched subexpressions into an
              array.

         ssuubb(()) - replaces a single instance of text in a string that matches a
              regular expression.

         ggssuubb(()) - replaces all instances of text in a string that match a
              regular expression.

         ggeennssuubb(()) - replaces selected instances of text that match a regular
              expression.

     See the entries for each function in the _f_u_n_c_s help file for further
     details and features.

New Macro Special Symbol $$@@
     It is often useful when parsing macro arguments, particularly when the
     macro is called with a variable number of arguments, to use the sspplliitt(())
     function to place the arguments into an associative array.  The normal
     syntax is:

        {{
          llooccaall aacc,, aavv[[]]
          aacc == sspplliitt((""$$**"",, aavv))
        }}

     However, that usage does not respect quoted arguments, since $$** removes
     quotation marks when concatenating the macro arguments.  This ssppeecc release
     introduces a new sequence $$@@.  When an ordinary macro with arguments is
     expanded, $$@@ will be replaced with the concatenated arguments delimited by
     the special character \\aa (the audible bell, ^^GG, ASCII 7).  The string can
     then be split as follows:

        {{
          llooccaall aacc,, aavv[[]]
          aacc == sspplliitt((""$$@@"",, aavv,, ""\\aa""))
        }}

     The elements of aavv[[]] will respect the quoted arguments in the macro
     invocation.  There is no syntax to escape the \\aa.

New ""lliinneess"" Option For ffiillee__iinnffoo(())
     A new ""lliinneess"" option for the ffiillee__iinnffoo(()) function returns the number of
     newline characters in the specified file.  See the ffiillee__iinnffoo(()) entry in the
     _f_u_n_c_s help file for a description of all the available options.

New Flexibility For the Indirection Operator @@
     The ssppeecc parser now allows the indirection operator @@ to be applied to a
     parenthesized variable or associative array element.  The priority of @@ is
     higher than the square brackets of the array, so parenthesis must be used
     if the array element contains the string which points to the symbol.  For
     example:

        SSPPEECC>> aarrrr[[00]] == ""PPII"";; ss == ""aarrrr""
        SSPPEECC>> pprriinntt @@ss[[00]],, @@((aarrrr[[00]])),, @@((@@ss[[00]]))
        PPII 33..1144115599 33..1144115599

     The expanded syntax allows cascaded usage as shown above.

ssttrrddeeff(()) Can Now Return Chained Macro Segments
     The ssttrrddeeff(()) function, which returns the string definition of the macro
     name given as an argument, can now return segments of a chained macro as
     specified by the associated key given as a second argument.  See the
     ssttrrddeeff(()) entry in the _f_u_n_c_s help file for a detailed description.

ggeett__lliimm(()) Can Now Take Backlash Into Account
     The ggeett__lliimm(()) function to return software motor limits will return the
     limit corrected for backlash if the magnitude of the second argument is
     greater than 1.  For example, for a motor with sign of user*dial positive,
     backlash positive and steps per degree positive, the corresponding return
     values might be:

        SSPPEECC>> pp ggeett__lliimm((tttthh,, --11)),, ggeett__lliimm((tttthh,, --1100))
        --118800 --117799..9999

     That is, although the actual soft limit is -180, when taking account the
     configured backlash, the effective limit is -179.99.

Move Macros Now Allow Variables For Motor Mnemonics (Really)
     The feature announced with release 6.02 that allowed motor mnemonics to be
     given as variables for the motor-move macros (mmvv, uummvv, mmvvrr, uummvvrr, mmvvdd and
     uummvvdd) didn't actually work when the release came out.  The parser
     modification for the indirection operator (@@) that enabled the feature was
     problematic and immediately reverted.  This ssppeecc release fixes the problems
     and restores the behavior.  Thus, usage such as:

        ffoorr ((ii == 00;; ii << 55;; ii++++)) mmvv ii 1100

     and:

        {{ ppaarr==""pphhii"";; uummvv ppaarr 44;; ppaarr==tthh;; uummvv ppaarr 11 }}

     will work.

New Return Value For ssrraanndd(())
     The ssrraanndd(()) function, used to set the seed value for the pseudo-random
     number generator now has a return value, namely the value of the previous
     seed.

ddeelleettee Can Now Be Used On Entire Associative Array
     The ddeelleettee built-in command can now be used to delete all elements from an
     associative array.  Previously, ddeelleettee would only remove one element.
     Note, ddeelleettee doesn't remove the array or change its type, it just removes
     all the elements.  Use uunngglloobbaall to remove the array from the symbol table.

Preliminary Release of Updated Scan Macro Package
     A file named nneewwssccaannss..mmaacc is included in the distribution that contains a
     preliminary release of a new array-based scan engine and several new
     standard scans.  These scans will replace the standard scans in ssccaannss..mmaacc
     in a subsequent release.  The new scan engine uses a pre-filled array of
     motor positions for the scan points, which allows better pre-scan limit
     checks and enables new scan types.  Existing scans that are replaced
     include aassccaann through aa55ssccaann, ddssccaann through dd55ssccaann, lluupp, tthh22tthh, mmeesshh,
     hhssccaann, kkssccaann, llssccaann, hhkkllssccaann, hhkkllmmeesshh, hhkkcciirrccllee, hhllcciirrccllee, kkllcciirrccllee,
     hhkkrraaddiiaall, hhllrraaddiiaall and kkllrraaddiiaall.  The standard __aassccaann macro will no longer
     be used, but will continue to be included in the distribution for the
     benefit of local scans that use it.

     The macros in nneewwssccaannss..mmaacc are not installed with this release, but can be
     activated by reading the file with qqddooffiillee(()) or qqddoo.

     New scans in nneewwssccaannss..mmaacc include:

     A new ffssccaann does motor scans based on positions in a file.  The first line
     of the file contains a list of motor mnemonics as a comment.  Subsequent
     lines contain corresponding motor positions.  Each line is one point in the
     scan.

     A new ddmmeesshh scan, which is a delta mmeesshh scan, similar to a delta motor
     scan.  Endpoints are specified relative to the starting positions and
     motors are returned to the starting positions as the end of the scan.

     A series of expanded motor scans named xxaassccaann through xxaa44ssccaann and xxddssccaann
     through xxdd44ssccaann add a configurable number of points at the beginning and
     end of regular motor scans at a lower point density.

     A region scan named rrssccaann allows specifying a single motor scan with
     various point densities in consecutive segments.

     See the comments in the nneewwssccaannss..mmaacc file in the ssppeecc distribution for
     additional details.

Fix For sspplliitt(()) In Macro Functions
     An old bug, where an "Illegal reference to array" error would occur when
     using a local associative array as a return value in a macro function when
     the array had been used with the sspplliitt(()) function but where elements had
     not otherwise been assigned any values, has been fixed.

Fix For aarrrraayy__rreeaadd(())
     The return value of aarrrraayy__rreeaadd(()) is the number of points read from the
     file.  A bug, where the value did not include points assigned when the
     number of columns in the data file was less than the array dimension, has
     been fixed.  ssppeecc has always assigned as many elements to the array as are
     available in the file, but had not been including points in the return
     value when a line of data from the file did not have values to fill every
     column (or row for a column-wise array).

Fix For ccoouunntteerrss/pplloottsseelleecctt Macro
     An issue with the interactive ssppeecc__mmeennuu(()) versions of the
     ccoouunntteerrss/pplloottsseelleecctt macro introduced in ssppeecc release 6.02, where the wrong
     value would be assigned to DDEETT or MMOONN if there were any lower-numbered
     disabled counters, has been fixed.

Fixes And Updates For sspplloott Utility
     Arguments in the ssccaann__iinnffoo__uuppddaattee(()) macro function in the standard __ttaaiill
     and __ssccaannaabboorrtt macros along with the sspplloott Python code have been fixed to
     correct an issue where the last point of scans wasn't always drawn.
     Another issue with the sspplloott utility, where plots sometimes did not refresh
     correctly when switching between types of scans, has been fixed.  New
     options for the sspplloott__ccnnttll(()) @@mmaarrkkeerr@@ command are available.  A new sspplloott
     option to display the current motor position is available from the PLOT
     menu of the sspplloott window.

Fixes For Trinamic TMCL Support
     An issue with ssppeecc's support for the Trinamic TMCL motor controllers, where
     it was not possible to update certain global parameters, has been fixed.

New Timing Parameters For Agilis Communication
     New non-standard optional parameters named ""wwddeellaayy"" and ""rrddeellaayy"" are
     available for the Agilis motor controller.  These parameters can set a
     delay for writing commands to the Agilis and reading replies from the
     Agilis.  See the _a_g_i_l_i_s help file for details.

Fixes For sseevvcc Geometry
     The preliminary support for the sseevvcc seven-circle diffractometer geometry
     has been updated with several fixes in the sseevvcc..ssrrcc macros.

April 1, 2015 - RELEASE 6.03.03

Fix For ttaannggoo__ppuutt(()) With String Array
     A segmentation fault that occurred with ttaannggoo__ppuutt(()) when called with an
     empty associative array for a data type that required a string array has
     been fixed.

More Fixes For ssppeecc__mmeennuu(()) Issues
     A bug, where a call to ssppeecc__mmeennuu(()) with a menu that had no editable items
     would cause a segmentation fault, has been fixed.

Correction For Recent wwhhaattiiss(()) Fix
     A fix in release 6.03.01 for an old bug in the wwhhaattiiss(()) function that
     inadvertently broke another aspect of the function has been corrected.

Support For Newport Agilis AG-UC8
     This ssppeecc release includes support for the Newport Agilis AG-UC8 piezo
     controller.  The update to the existing code for the Agilis AG-UC2 model
     includes support for the absolute positioning command and setting the
     step-amplitude parameter.  See the new _a_g_i_l_i_s help file for details.  Note,
     the update code has only been tested with the serial interface on the
     AG-UC8.  Please contact CSS if any problems using the USB interface on
     either the AG-UC2 or AG-UC8.

March 22, 2015 - RELEASE 6.03.02

Macro Hardware Support For CCD-type (2D) Devices
     The macro hardware facility now includes support for CCD-type (2D)
     detectors.  See the updated _m_a_c___h_d_w help file for details.

Updated Support For Mythen Firmware 3 and Mythen2 Firmware 4 Models
     The ssppeecc support for the Dectris Mythen MCA has been revised and updated to
     work with firmware version 3 and the new Mythen2 models that use firmware
     version 4.  See the updated _m_y_t_h_e_n help file for details.

Fix For ssppeecc__mmeennuu(()) Issues
     The relatively new ssppeecc__mmeennuu(()) function has been updated to fix a couple of
     issues.  A crash that could occur when passing an uninitialized symbol as
     the first argument has been fixed.  A crash that could occur when scrolling
     with a menu that included ""ddeesscc"" keywords for items that had no editable
     elements has been fixed.  In addition, if there is a ""ddeesscc"" keyword with no
     editable elements, the ssppeecc__mmeennuu(()) function will now treat the entry as a
     ""ssuubbhheeaadd"" so that the cursor does not stop on the item.

ssyynncc Command Fixed To Halt Multiple Timers
     The ssyynncc command, normally used to make sure motor hardware and software
     are synchronized, also aborts the current move and active counting.
     Previous versions of ssppeecc only halted one active timer or acquisition
     device, even if multiple master timers or acquisition devices were
     configured.  The ssyynncc command will now force stop all active timers.

New Indenting Option For ccoonnffiigg File
     The configuration editor eeddccoonnff now takes optional arguments ++ww or --ww to
     add or remove a single character white-space indentation in the ccoonnffiigg file
     on lines beginning with the words SSTTAATTEE, CCOONNPPAARR, MMOOTTPPAARR and CCNNTTPPAARR.  Adding
     the space aids in readability of the file.  The ++ww adds the indenting when
     writing out the file.  The --ww removes the indenting.  If the option is
     unspecified, the existing indenting (or lack thereof) is maintained.

February 12, 2015 - RELEASE 6.03.01

Updates In the HDF5 Support
     The standard ssppeecc distribution now includes static lliibbhhddff55..aa and lliibbzz..aa
     files that can be linked with ssppeecc during installation to provide HDF5
     support.  The libraries have been built from the open-source HDF5 and ZLIB
     source packages.  The ssppeecc IInnssttaallll script now prompts for HDF5 linking
     specifications.

     New options are available to set the raw-data chunk-cache parameters used
     for writing data to the HDF5 file, either per dataset or for all datasets
     in an opened file.

     A new hh55__lliinnkk(()) function can be used to create soft links to HDF5 objects
     in an external file.

     A new ""fflluusshh"" option to hh55__ffiillee(()) can be used to tell the library to write
     existing data out to disk.

     The format used to save string-valued associative arrays has been changed
     from using variable-length strings to using fixed-length strings.

     One-dimensional arrays can now be set to unlimited size.  One scalar value
     at a time can be added using the frame syntax of hh55__ddaattaa(()).

     ssppeecc is now built against release 1.8.14 of the HDF5 libraries.

     See the ssppeecc _h_d_f_5 help file for details on the updates.

Support For ARM Platforms
     The ssppeecc package can now be built to run on ARM platforms such as the
     Raspberry PI or BeagleBone Black.  Contact CSS for details on OS support.

Fix To Enable Support For Baltic Scientific Instruments Si(Li) Detector
     The BSI detector support documented in the ssppeecc release 6.02.09 release
     notes was not actually available due to a coding error.  That issue has now
     been corrected.

Fix For wwhhaattiiss(())
     A old bug in the built-in wwhhaattiiss(()) function that could incorrectly identify
     a local variable as a macro has been fixed.  Although unlikely, if a user
     defined a macro named ff, the sshhooww__mmoottoorr__iinnffoo(()) macro function used by wwaa,
     llmm, etc.  would fail due to this wwhhaattiiss(()) bug.

changes                      spec 6.02 Release Notes                     changes

NAME
     changes - Highlights for ssppeecc release 6.02

     (Please see release 6.02 _i_n_t_r_o_d_u_c_t_i_o_n below.)

December 29, 2014 - RELEASE 6.02.11

Fix For Amptek MCA8000D
     An Amptek firmware update (version 6.07.00) broke ssppeecc's support for the
     MCA8000D by changing the command used to set the preset time from PPRREETT to
     PPRREELL.  This ssppeecc update recognizes the new firmware and uses the new
     command.

December 15, 2014 - RELEASE 6.02.10

Fix For ttaannggoo__iioo(()) Crash
     A bug that could cause a crash when using ttaannggoo__iioo(()) with a TANGO device
     that was not in the TANGO database has been fixed.

December 4, 2014 - RELEASE 6.02.09

Support For Baltic Scientific Instruments Si(Li) Detector
     This ssppeecc release supports the Baltic Scientific Instruments Si(Li)
     Detector type SER-25 based on the SP350 controller board.  The device is
     configured as an MCA-type instrument and uses a serial interface.  See the
     _b_s_i___s_p_3_5_0 help file for details.

Trinamic TMCL Updates
     The recently added Trinamic TMCL motor controller support has been updated
     so that parameters that can be stored in EEPROM will be saved to EEPROM
     when set using mmoottoorr__ppaarr(()) or when configured as nonstandard optional
     parameters in the ccoonnffiigg file.  In addition, ssppeecc can now restore the
     position registers when a power cycle has been detected.  To enable the
     latter feature, the controller parameter ""cchheecckk__iinntteerrvvaall"" needs to be added
     to the ccoonnffiigg file.  See the _t_m_c_l help file for details on both new
     features.

Fix For HDF5 Data Frames With 1D Arrays
     A bug with the new HDF5 support where the frames option wasn't working for
     one-dimensional arrays has been fixed.

Update For EEssccaann Macro
     The standard EEssccaann macro will now use the global UUPP variable to set the
     number of decimal digits displayed on the screen for the monochromator
     motor positions, just as is done with the standard motor scans.  The UUPP
     default value is 4.

November 7, 2014 - RELEASE 6.02.08

sspplloott Updates
     This ssppeecc release includes various improvements to the Python sspplloott
     utility, including a new sspplloott__ccnnttll(()) ""mmaarrkkeerr"" option to create vertical
     marker lines on the plot.  See the files in the sspplloott distribution ddooccss
     directory for detailed descriptions, particularly the development log and
     command server documentation.

Improvement In the sseerr__ppaarr(()) ""qquueeuuee"" Option
     Previously, the ""qquueeuuee"" option for the sseerr__ppaarr(()) command would return the
     number of characters available in ssppeecc's read-ahead buffer.  That buffer
     has bytes from a previous sseerr__ggeett(()) call that were returned by the system
     rreeaadd(()) call, but beyond the specified byte count or end-of-string match.
     The ""qquueeuuee"" option will now return that same value if it is nonzero.
     However, if ssppeecc's read-ahead buffer is empty, the code will check if any
     characters are available in the kernel buffer and return that value.

New Serial Debugging Option For Hex Output
     For serial device I/O, ssppeecc debug level 128 uses octal escape sequences to
     represent unprintable characters.  If debug level 0x400000 is also set, the
     debugging output will use a hexadecimal format for all bytes, as has been
     possible for socket debugging since ssppeecc release 5.05.05-5.

New Invocation Option For pplloottsseelleecctt
     When invoked with arguments, the pplloottsseelleecctt macro now accepts a
     comma-separated list of counter numbers or mnemonics to set which counters
     are to be plotted.  This is in addition to the still supported
     space-separated list of counter numbers or mnemonics invocation.  When
     invoked without arguments, pplloottsseelleecctt still runs in interactive menu mode.

More Robust Server-Mode Debugging
     An issue in server mode with debug levels 0x1000 and 0x100000 (for
     debugging server-client communications and thread locks) that could cause
     crashes has been addressed.

Updates For Trinamic TMCL Motor Controller Support
     The preliminary support for the Trinamic TMCL motor controllers now
     includes new commands to access the I/O ports.  See the _t_m_c_l help file for
     more details.

Support For NI GPIB Version 3.2 Libraries
     It is now possible to link with version 3.2 of the National Instruments
     GPIB libraries for Linux.  However, CSS still recommends using ssppeecc's
     built-in support.  See the _n_i_g_p_i_b file for more information.

Fix For NI GPIB-ENET/1000 ggppiibb__ppuutt(())
     An old bug where a ggppiibb__ppuutt(()) of more than 500 bytes would fail when using
     ssppeecc's built-in support for the National Instruments GPIB-ENET/1000 has
     been fixed.

Fix For Mythen 1.3 Firmware
     Support for the older Dectris Mythen MCA version 1.3 firmware that was
     inadvertently broken in ssppeecc release 6.00.11 is now fixed.

Fix For Measurement Computing USB-CTR04 Detection
     An issue, where ssppeecc had the wrong USB device ID coded for the Measurement
     Computer USB-CTR04 with the result that ssppeecc did not detect that device,
     has been fixed.  The device ID for the USB-CTR08 was correct.

Fix For Crash With Incomplete tteerrmmiinnffoo Description
     A bug, where ssppeecc could crash with the ssppeecc__mmeennuu(()) function if certain
     function-key sequence descriptions were missing from a tteerrmmiinnffoo entry, has
     been fixed.

Preliminary Support For Seven-Circle Geometry sseevvcc
     Preliminary support for a new seven-circle diffractometer geometry is
     included in the source file ggeeoo__sseevvcc..cc.  Choose sseevvcc as the geometry type
     during ssppeecc installation.  To accommodate the seven geometry motors,
     orientation-matrix macros that were based on a maximum of six geometry
     motors have been updated to work with seven.

September 10, 2014 - RELEASE 6.02.07

Fix For rreemmoottee__ppoollll(())
     Updates in ssppeecc release 6.02 to allow more flexibility in specifying the
     name of the ssppeecc server inadvertently broke the rreemmoottee__ppoollll(()) function.
     That issue is now fixed.

Fix For GE Fanuc SBS (Bit-3) Driverless Support
     Optimizer improvements in ggcccc release 4.8 broke the ssppeecc driverless support
     for the GE Fanuc (formerly SBS, formerly Bit-3) PCI-to-VME model 61x/62x
     controller boards (in at least some configurations).  This ssppeecc release
     fixes that issue.

Preliminary Support For Saving To HDF5 FILES
     This ssppeecc release features new functions to save data using the HDF5
     standard.  See the new _h_d_f_5 help file for details.  In order to enable the
     functions, ssppeecc must be linked with the HDF5 library, which can currently
     be configured by setting the ssiittee__lliibb ("extra library flags") installation
     parameter to include the library, as in ssiittee__lliibb==--llhhddff55.  This preliminary
     support expects version 1.8.13 of the library, although will still function
     if linked with an earlier 1.8 release.  Future releases will include a
     compatible library version.  The function syntax and usage in this
     preliminary release is subject to change.  Please contact CSS directly for
     additional information.

August 16, 2014 - RELEASE 6.02.06

Fix For Struck SIS1100
     Optimizer improvements in ggcccc release 4.8 broke the ssppeecc driverless support
     for the Struck SIS1100 PCI and PCIe VME controller boards (in at least some
     configurations).  This ssppeecc release fixes that issue.

August 6, 2014 - RELEASE 6.02.05

Updates and Fixes For Phytron phyMOTION
     The recently introduced Phytron phyMOTION support has been updated to fix
     issues associated with identifying the crate configuration and with
     addressing I/O modules.  In addition, the USB interface (which appears as a
     serial device to ssppeecc) is now supported.  Also, ssppeecc's uuddeevv rules file for
     LLiinnuuxx platforms now includes a rule to create a //ddeevv//pphhyymmoottiioonn special
     device when the controller is connected.

Support For Micos Venus-1
     This ssppeecc release includes support for the old Micos Venus-1 programming
     syntax, such as used on the Corvus Eco model motor controller.  The
     configuration is the same as for the Venus-2 and Venus-3 controllers.  The
     ssppeecc code automatically selects the appropriate syntax version to use.

Added ""iinniitt__sseeqquueennccee"" Parameter For MDrive Motors
     The MDrive motor controller support now recognizes a parameter named
     ""iinniitt__sseeqquueennccee"".  The parameter must be set in the ccoonnffiigg file (type pp from
     the motor screen in the configuration editor to access nonstandard optional
     parameters).  The string value of the parameter can contain a sequence of SS
     and/or DD commands separated by semicolons to configure the I/O points, such
     as:

        SS11==22,,00,,11;;SS22==33,,00,,11

     That string would set input 1 as the plus limit, input 2 as the minus limit
     and both inputs as active low and current sources.

     The ""iinniitt__sseeqquueennccee"" commands will be sent when reading the ccoonnffiigg file on
     start up or after rreeccoonnffiigg.  The default initialization sequence is the
     following:

        SS11==22,,00;;SS22==33,,00;;SS33==11,,11

     That command will be sent prior to any ""iinniitt__sseeqquueennccee"" commands, but the
     assignments made using ""iinniitt__sseeqquueennccee"" will override the default sequence.
     Only SS and DD assignments are allowed in the sequence.  See the MDrive
     programming manual for proper syntax for using the SS and DD commands.  Also,
     the semicolons are not part of the MDrive syntax. ssppeecc will format the
     commands correctly when sent to the controller.

July 3, 2014 - RELEASE 6.02.04

Fix For --ll llooggffiillee Crash
     A bug introduced in release 6.02 that resulted in a crash when the --ll
     llooggffiillee start-up option was used has been fixed.

Fixes For Background Subtraction With the Plotting Macros
     Support for the background-subtraction feature in the plotting macros has
     been updated to restore functionality which disappeared with the ssppeecc 6.02
     release.  The ability to enable the feature is back in the sseettpplloott macro.
     After updating the ssppeecc installation, use the nneewwmmaacc command to load the
     revised macros.

     The background-subtraction feature calculates a linear background using the
     endpoints of the scan for the counters selected for plotting with the
     pplloottsseelleecctt or ccoouunntteerrss commands, subtracts that background from the data in
     SSCCAANN__DD and places the results in an array called SSCCAANN__BB.  One can use the
     sseettpplloott macro to enable or disable background-subtraction or simply assign
     a value to the global variable BBGG.  A nonzero value enables background
     subtraction.  The commands sspplloott, ppttss, llpp__pplloott and pplloott use SSCCAANN__BB if BBGG is
     nonzero.  The values CCEENN, ppll__MMIINN, ppll__MMAAXX, ppll__FFWWHHMM, etc. are calculated from
     the SSCCAANN__BB data after calling sspplloott, ppttss, llpp__pplloott or pplloott when
     background-subtraction is enabled.  One of those macros needs to be called
     after setting BBGG to zero to have CCEENN, etc., calculated from SSCCAANN__DD.

Fix For Display Of Macros containing Non-ASCII Text
     The pprrddeeff command and the sshhooww__ssttaattee utility will now use octal escape
     sequences for non-ASCII bytes in the macro definition.  Previously,
     characters with bit 8 set would display as a backslash followed by the
     ASCII representation of the remaining seven bits.

Fix For Output File Reference After Directory Change
     Release 5.07.03-4 (fall 2007) broke a feature associated with output files
     and described in the ssppeecc Reference Manual as "ssppeecc remembers the directory
     the files are in when they are first opened.  If the user changes ssppeecc's
     current directory, open files may be referenced either by the name with
     which the files were opened or by the correct path name relative to the
     current directory."  That bug is now fixed.

Update To Macro-Hardware Motor ""sseeaarrcchh"" Keyword
     The macro-hardware motor __ccmmdd(()) function call for with keyword ""sseeaarrcchh"" has
     been modified so that the pp22 parameter will only be set if the underlying
     cchhgg__ddiiaall(()) function is called with an optional third argument or if the
     optional ""hhoommee__ppoossiittiioonn"" parameter is set.  See the _m_a_c___h_d_w help file for
     details.

June 25, 2014 - RELEASE 6.02.03

Support For Measurement Computing USB-CTR4 and USB-CTR8
     ssppeecc supports the new USB-CTR4 and USB-CTR8 counter/timer modules from
     Measurement Computing.  See the _u_s_b_c_t_r help file for details.

Backlash Compensation Support For Phytron PhyMotion Controllers
     ssppeecc now programs the backlash compensation parameter (P25) on the Phytron
     PhyMotion controllers.  When this parameter is set the controller will
     perform backlash compensation as part of a single move command.  Normally,
     ssppeecc programs two moves when backlash is required.

Updates For sspplloott Utility
     The sspplloott utility will now create a pop-up error window if there are
     problems opening a data file instead of silently fail.  The code for
     identifying scan types from the scan name is now more robust.

June 15, 2014 - RELEASE 6.02.02

Fix For CCEENN and Related Values
     The quantities CCEENN, ppll__MMIINN, ppll__FFWWHHMM and related values use the symbol PPLL__YY11
     in their calculations.  PPLL__YY11 contains the detector column number in the
     data array (usually SSCCAANN__DD).  With the updated plotting macros in ssppeecc
     release 6.02, the column number depends on the number of motors in the
     scan, but the macros did not update PPLL__YY11 when the number of motors
     changed.  That issue is fixed in this release.

Fix For ttaannggoo__ppuutt(()) Of Associative Arrays
     A bug in the ssppeecc release 6.02 TANGO updates, where a ttaannggoo__ppuutt(()) of an
     associative array did not include the last element of the array, has been
     fixed.

Fix For ccoouunntteerr__ppaarr(()) Crash with PCI Counter/Timers
     A crash that could occur when using ccoouunntteerr__ppaarr(()) to access hardware
     features when PCI counter/timers were configured but not installed in the
     computer has been fixed.  Affected cards were any of the am9513 based PCI
     cards, the National Instruments 6601 and 6602 PCI cards and the National
     Instruments X series PCIe cards.

Fixes For sspplloott Utility
     An issue where the sspplloott utility could not read data files that contained
     motor scans of three or more motors (aa33ssccaann, aa44ssccaann, etc.)  has been fixed.
     Another issue, where the FWHM was displayed with a negative number for
     scans that went from high to low values, has also been fixed.

June 2, 2014 - RELEASE 6.02.01

Support For HP/Agilent E2050/E5810 LAN/GPIB Gateway
     This ssppeecc release includes initial support for the HP E2050 and Agilent
     E5810 LAN/GPIB gateway controllers.

May 20, 2014 - RELEASE 6.02

Introduction
     Welcome to ssppeecc release 6.02.  In addition to the usual assortment of new
     hardware support and bug fixes, this release has some noteworthy new
     features.  The notes below are divided into four sections: _n_e_w _f_e_a_t_u_r_e_s,
     _m_a_c_r_o _u_p_d_a_t_e_s, _b_u_g _f_i_x_e_s and _h_a_r_d_w_a_r_e _s_u_p_p_o_r_t.  (The following notes are
     consolidated and reorganized from the 6.01 beta release notes, which are in
     the _c_h_g_6___0_1 help file.)

     First of the new features is the new interactive plotting utility called
     sspplloott.  sspplloott not only does real-time plots of scan data, but also can read
     and display scans from ssppeecc data files.  In addition, sspplloott has controls to
     send commands to ssppeecc to position motors and start scans.  Note, though,
     ssppeecc must be run in server mode (use the --SS flag when starting) for sspplloott
     to send commands to position motors or start scans.

     Another added feature is the new built-in ssppeecc__mmeennuu(()) function that
     provides interactive menu configuration capabilities.  The standard
     sseettpplloott, pplloottsseelleecctt and sseettsshhooww macros have been replaced with versions
     that use ssppeecc__mmeennuu(()).  A new mmssttaarrttuupp macro replaces much of the
     configuration provided by the old ssttaarrttuupp macro.  Additional menu-ized
     configuration macros will be forthcoming.

     A new set of continuous scan macros, ccssccaann, cc22ssccaann, ccmmeesshh, etc., performs
     rapid scans where the counters are read continuously as the motors move
     steadily from the start to end specified positions.

     Be sure to either start fresh, as in ssppeecc --ff, or run the nneewwmmaacc macro to
     read in the updated macros.  Run sseettpplloott to choose to run the new sspplloott
     utility.

     Please read through the update notes below for a full list of updates.  We
     at CSS look forward to your feedback.  Thanks!

NEW FEATURES

New sspplloott Utility
     A new stand-alone plotting utility called sspplloott is introduced with this
     ssppeecc release.  The sspplloott program is intended to replace the standard
     xx1111ffiilltt window and provide additional functions.  The sspplloott program uses
     shared-memory data arrays and ssppeecc server/client protocols to communicate
     with the ssppeecc process.

     The sspplloott program is written in Python and requires the PyQt4 and PyQwt5
     packages.  A script called iinnssttaallll__sspplloott__nneeeeddss is included in the ssppeecc
     distribution that will try to install the required packages and their
     dependencies.  One can also install the needed packages using whatever
     tools the particular LLiinnuuxx distribution includes.

     To use the supplied script, go to the ssppeecc distribution directory and type:

        ssuuddoo ..//iinnssttaallll__sspplloott__nneeeeddss [[--yy]]

     The --yy flag means the package installation programs will assume a yes in
     response to queries to confirm additional package installation.  The
     package installations programs (yyuumm or aapptt--ggeett, depending on LLiinnuuxx
     distribution) will likely download a dozen or more additional packages.

     Note, the xx1111ffiilltt plotting is still available and can be used
     simultaneously with or instead of sspplloott.  Use the sseettpplloott macro to
     configure plotting.

New sspplloott__ccnnttll(()) Built-In Function
     To support the tight integration of the new sspplloott utility with ssppeecc, a new
     sspplloott__ccnnttll(()) function is provided to send and receive sspplloott messages.

New ssppeecc__mmeennuu(()) Function
     A new function named ssppeecc__mmeennuu(()) is available for creating interactive
     menus.  See the _s_p_e_c___m_e_n_u help file.

aarrrraayy__pplloott(()) Will Now Plot One-Dimensional Arrays
     The aarrrraayy__pplloott(()) function has been updated to plot one-dimensional data
     arrays, such as may be read from an MCA device.  For such plots, the xx-axis
     is set to the point number.

Unlimited Number Of Output Files
     Previous releases of ssppeecc limited the number of open files (using the
     ooppeenn(()), oonn(()) or ffpprriinnttff(()) functions) to 25.  With this ssppeecc release, the
     built-in limit is removed.  The number of files that can be opened is only
     constrained by the system limits.

     Note, it is not a good idea to run up against the system limit.  Some ssppeecc
     commands will cease to work if no more file descriptors are available from
     the system.  Make sure that macros that open files have provision to close
     the files when no longer needed.  Note also, the ssppeecc__ppaarr(())
     ""aauuttoo__ffiillee__cclloossee"" option can be set to have ssppeecc automatically close files
     that haven't been accessed in the specified time.  See the _s_p_e_c___p_a_r help
     file for details.

New Built-In OOUUTTFFIILLEESS Associative Array
     ssppeecc will now maintain an associative array named OOUUTTFFIILLEESS that will hold
     information about all open output files.  OOUUTTFFIILLEESS is a two-dimensional
     array.  The first index is the name by which the file was opened using
     ooppeenn(()), oonn(()), ffpprriinnttff(()) or the --ll oouuttppuuttffiillee start-up option.  The element
     value for a second index of ""nnaammee"" is the first index.  The element value
     for a second index of ""ppaatthh"" is the full path name of the file.  Additional
     elements may be added in the future.  For example:

        11004488..FFOOUURRCC>> ffoorr ((ii iinn OOUUTTFFIILLEESS[[]][[""nnaammee""]]))
        11004499..mmoorree>>    pprriinnttff((""%%1100ss %%ss\\nn"",, OOUUTTFFIILLEESS[[ii]][[""nnaammee""]],, OOUUTTFFIILLEESS[[ii]][[""ppaatthh""]]))
              ddlloogg //pprriivvaattee//ttmmpp//ddlloogg
             ddaattaa11 //pprriivvaattee//ttmmpp//ddaattaa11
               ttttyy //ddeevv//ttttyy
         //ddeevv//nnuullll //ddeevv//nnuullll

     or

        11005533..FFOOUURRCC>> pp OOUUTTFFIILLEESS[[DDAATTAAFFIILLEE]][[""ppaatthh""]]
        //pprriivvaattee//ttmmpp//ddaattaa11

     Note, the special built-in name ""ppiippee"" is not included in OOUUTTFFIILLEESS.  The
     special built-in name ""//ddeevv//nnuullll"" includes the full path in both ""nnaammee"" and
     ""ppaatthh"" to work with the standard macros that always refer to that special
     file by the full path name.

New Filename Completion For ddoo and qqddoo Macro Commands
     Although ddoo and qqddoo are defined as standard user-level macros, filename
     completion code has been added to automatically include directory paths
     contained in the global variable DDOO__DDIIRR.  Macro support for path lists in
     DDOO__DDIIRR was added to the standard macros in ssppeecc release 6.00.05.  Filename
     completion is available when ssppeecc is linked with the lliibbeeddiitt or rreeaaddlliinnee
     libraries.

Support For 64-Bit Integer Data Arrays
     New keywords lloonngg6644 and uulloonngg6644 are available to create 64-bit signed and
     unsigned integer data arrays, respectively.  The 64-bit arrays can be used
     in all contexts that accept array data types.  Note, though, ssppeecc will only
     work with 52 bits of precision in some contexts, since the internal code
     uses double-precision floating point format for many operations associated
     with ssppeecc user-level symbols.  (Double floats use 52 bits for the
     significand and the remaining 12 bits for sign and exponent).  The
     ssppeecc__sshhmm..hh and ssppeecc__sseerrvveerr..hh files included in the ssppeecc distribution have
     been updated to include definitions for 64-bit data-array data types.

The ffmmtt__rreeaadd(()) and ffmmtt__wwrriittee(()) Functions Now Work With Subarrays
     The ffmmtt__rreeaadd(()) and ffmmtt__wwrriittee(()) commands, used to read and write binary data
     in standard and user-created formats, will now work using subarray syntax.
     Previously, the commands only worked with full data arrays.

New iinnppuutt(()) Option To Read Arrow Keys and Forward Delete
     The ccbbrreeaakk mode for iinnppuutt(()) now has an option to return special codes when
     arrow keys or the forward-delete key are pressed.  Type hh iinnppuutt at the ssppeecc
     prompt or see the _f_u_n_c_s help file for details.

New IISS__SSEERRVVEERR Built-In Variable
     A new built-in variable named IISS__SSEERRVVEERR will be nonzero if ssppeecc is running
     in server mode (invoked with the --SS option).  When in server mode,
     IISS__SSEERRVVEERR will be set to the port number on which the ssppeecc server is
     listening.

New HHOOSSTTNNAAMMEE Built-In Variable
     A new built-in variable named HHOOSSTTNNAAMMEE will be set to the hostname of the
     computer running ssppeecc.

New Flexibility For Identifying ssppeecc Server
     The configuration of ssppeecc server motors and counters and the built-in
     functions for communicating with a ssppeecc server all require an argument of
     the form hhoosstt::ppoorrtt or hhoosstt::ssppeecc to identify the host and the port on which
     the server is listening.  With this new release, if the hhoosstt part of the
     string is missing, ssppeecc will use ""llooccaallhhoosstt"".  In addition, it is now
     allowed to mix references to the same server by port number and by ssppeecc
     process name.  See the _s_e_r_v_e_r help file for details.

Improvements For rreemmoottee__ssttaatt(())
     ssppeecc will now include a check for pending connections to ssppeecc servers
     during a call of rreemmoottee__ssttaatt(()), making it possible for a loop that tests
     the return value of rreemmoottee__ssttaatt(()) to determine when a server connection
     comes up.

     Also, rreemmoottee__ssttaatt(()) will no longer return ""lloosstt"" for a previously open
     connection after a new call of rreemmoottee__ppaarr((......,, ""ccoonnnneecctt"")) for the same host
     is made.

Length Of Allowed Input Line Increased
     The maximum length of input records has been increased from 512 to 4096
     bytes.

"SignedInteger" Recognized As an ESRF Data Format Data Type
     Some programs that use the ESRF data format (EDF) use "SignedInteger"
     instead of "SignedLong" to characterize the 32-bit integer data type.  The
     ffmmtt__eessrrff..cc file included in the ssppeecc distribution that implements the EDF
     format for the ffmmtt__rreeaadd(()) and ffmmtt__wwrriittee(()) functions now recognizes
     "SignedInteger" as a data type.

MACRO UPDATES

New Continuous Scan Macros
     New ccssccaann, cc22ssccaann, cc33ssccaann, cc44ssccaann and ccmmeesshh standard macros for on-the-fly
     scans are included with this ssppeecc release.  With these scans, the counters
     and motor positions are read continuously as the motors move from the start
     to end positions.  The scan arguments include the start and finish
     positions for each motor and the total time for the scan.  The speed of
     each motor will be set to approximate that scan time.  An additional
     optional argument specifies a sleep interval before each counter reading.
     The ccmmeesshh scan does a series of single motor on-the-fly scans as an
     additional motor is stepped through a specified range.  The scan direction
     is reversed after each on-the-fly scan to minimize overhead time.  See the
     comments in the ccssccaann..mmaacc source file for details.

Move Macros Now Allow Variables For Motor Mnemonics
     The __mmmmoovv internal macro used by the standard motor-move macros (mmvv, uummvv,
     mmvvrr, uummvvrr, mmvvdd and uummvvdd) will now work if the motor number or mnemonic
     argument is a variable.  For example:

        ffoorr ((ii == 00;; ii << 55;; ii++++)) mmvv ii 1100

     will move motors 0 through 4.  Similarly:

        {{ ppaarr==""pphhii"";; uummvv ppaarr 44;; ppaarr==tthh;; uummvv ppaarr 11 }}

     will work.  In the first instance, the symbol ppaarr is assigned a string
     version of the motor mnemonic.  In the second, ppaarr is assigned the number
     value of the mnemonic.

Name-Space Issues with Moving and Counting Macros Addressed
     The local variable names used within the __mmmmoovv macro (used by mmvv, uummvv, mmvvrr,
     uummvvrr, mmvvdd and uummvvdd) now all start with an underscore to lessen the chance
     of a name conflict with local definitions in uusseerr__ggeettaanngglleess, uusseerr__pprreemmoovvee,
     uusseerr__ppoossttmmoovvee, etc.

     In addition, ggeett__aanngglleess in the wwmm and __uuppddaattee(()) macros has been replaced
     with a new macro function called ggeett__aanngglleess__ffuunncc(()).  The new macro function
     serves as a wrapper to ggeett__aanngglleess, insulating local variables that appear
     in uusseerr__ggeettaanngglleess from symbols used in the calling macros.  A
     ggeett__ccoouunnttss__ffuunncc(()) provides a similar wrapper to ggeett__ccoouunnttss and is used in
     the updating counting macro uucctt.

Fix For Display of Disabled Counters In uucctt
     The uucctt macro has been fixed to properly format the display when disabled
     counters are included.

Update For ccoouunntteerrss Macro
     Counter names, in addition to counter numbers and mnemonics, are now
     included in the list of counters displayed with the ccoouunntteerrss and
     sshhooww__ccoouunntteerrss(()) macros.

Updated and Improved Plotting Macros
     The standard plotting macros have been updated and revised to fix some old
     problems and to accommodate the new sspplloott utility, which is an alternative
     to the standard ssppeecc xx1111ffiilltt plots.

     The SSCCAANN__DD data array now defaults to a shared-memory object to accommodate
     the sspplloott program.  In addition, SSCCAANN__DD now includes data for all the
     configured counters at each data point along with HHKKLL values for motor
     scans that include geometry motors.

     New ssccaann__iinnffoo__uuppddaattee(()) and ssccaann__mmeettaa__uuppddaattee(()) macros have been worked into
     the standard macros to fill the shared memory iinnffoo and mmeettaa region with
     details of the spec configuration and scan status for the benefit of sspplloott.

     Many of the internal macros have been reworked.  If a site's local macros
     use internal macros from the mmaaccrrooss//pplloottaarrrraayy..mmaacc file, those local macros
     should be checked and possibly revised to maintain compatibility.

Epoch Now Saved To Data File With Added Precision
     The default __lloooopp macro, called at each point of the standard scans, will
     now save the epoch value for each scan point to millisecond resolution.
     Previously, the value was saved as an integer.  The value is the difference
     between the current time and value of the EEPPOOCCHH variable.  The value for
     EEPPOOCCHH is set to the current time when a new data file is created and is
     saved in the data file header.

Revised sseettpplloott, pplloottsseelleecctt and sseettsshhooww Macros Use New ssppeecc__mmeennuu(())
     The sseettpplloott macro to configure the scan plots, the pplloottsseelleecctt macro to
     select which counters to plot and the sseettsshhooww macro to configure motor and
     counter screen displays now use the new ssppeecc__mmeennuu(()) function.

New mmssttaarrttuupp Macro
     A new mmssttaarrttuupp macro (for menu startup) uses the new ssppeecc__mmeennuu(()) function
     and replaces much of the functionality of the standard ssttaarrttuupp macro.

New CCPP__FFIILLTTEERR__CCMMDD Option For ccpplloott__pplloott Macro
     The standard ccpplloott__pplloott macro now recognizes a CCPP__FFIILLTTEERR__CCMMDD global
     variable.  If it exists, the ccpplloott__pplloott macro will evaluate its string
     value to create a dynamic CCPP__FFIILLTTEERR command.  For example, the following
     will produce ppddff files using the CC--PPLLOOTT ppddff filter containing the current
     scan number as part of the ppddff filename:

        CCPP__FFIILLTTEERR__CCMMDD == ''sspprriinnttff((""ppddff ssccaann__%%0044dd..ppddff"",, SSCCAANN__NN))''

     See the macro source file mmaaccrrooss//ccpplloott..mmaacc in the ssppeecc distribution for
     implementation details.

New CCOOUUNNTT__FFMMTT__MMAAXXCCHH Option For Updated Counting
     The number of counters displayed while doing an updated count with the uucctt
     macro can be limited to the number of counters in the new global variable
     CCOOUUNNTT__FFMMTT__MMAAXXCCHH.  If the value is zero, all the counters will be displayed.
     The sseettsshhooww macro will prompt for a value.

nneewwffiillee Macro Updated and Reorganized
     The standard nneewwffiillee macro has been reorganized and now does the bulk of
     its work in macro functions.  The arguments are checked and the file
     created in nneewwffiillee__ff(()).  That macro calls nneewwffiillee__hheeaadd(()) to create the file
     header.  The nneewwffiillee__ff(()) macro is also called from the new mmssttaarrttuupp macro.

     A new uusseerr__nneewwffiillee macro hook is called at the end of nneewwffiillee__ff(()).  By
     default, the macro is empty.  Also, uusseerr__nneewwffiillee and uusseerr__ffiilleehheeaadd are now
     wrapped in macro functions to avoid name-space conflicts with the local
     variables in the nneewwffiillee macros.

     Finally, the cchhkk__ffiillee utility that used to be used to test if an existing
     file begins with the standard header has been replaced with calls of
     built-in ssppeecc functions.

     See the macro source file mmaaccrrooss//ffiillee..mmaacc in the ssppeecc distribution for
     implementation details.

BUG FIXES

Fix For Drifting Pseudomotors
     An old problem associated with the internal rounding of motor positions
     calculated for pseudomotors from real motors or for real motors from
     pseudomotors, such as with a kappa head on a ffoouurrcc, ffiivveecc or ppssiicc
     diffractometer, has been addressed.  The rounding may have led to position
     drift during repetitive movements in certain configurations.

Fix For xx1111ffiilltt Retained-Pixmap Mode Text Garbling
     The xx1111ffiilltt plotting utility can use either backing store or a
     retained-pixmap to maintain content that is drawn when the plot window
     itself is not visible.  Backing store is a server feature.  The retained
     pixmap is implemented within the xx1111ffiilltt code.  The default mode for
     xx1111ffiilltt is to use backing store, but on some platforms the default X server
     configuration has backing store disabled.  In that mode, xx1111ffiilltt uses the
     retained pixmap.  An old (twenty-one year) bug associated with writing
     labels to the xx1111ffiilltt retained-pixmap buffer that resulted in garbled
     labels when a window becomes visible that had been updated when hidden has
     been fixed.

Fix For aarrrraayy__ccooppyy(())
     A bug, where an "Out of temporary cells" message would appear after
     somewhat less than 20 calls of the new aarrrraayy__ccooppyy(()) function (but only when
     the first argument was a subarray), has been fixed.

Fixes For Server/Client Issues
     Several old issues with ssppeecc server/client mode have been addressed.  A bug
     where a client may not find a previously open server specified by host and
     port number when the client is already attached to multiple servers has
     been fixed.  A deadlock hang in server mode that could occur if a keyboard
     ^^CC came while socket connections were being opened from both the main
     thread and the server read thread has been eliminated.

Fix For Rare Crash In Server Mode
     When running in server mode, a mutual-exclusion lock around the code that
     ssppeecc uses to maintain the list of socket connections now exists.
     Previously, data corruption and a crash could sometimes occur if clients
     were making and breaking connections to a ssppeecc server that was also making
     socket connections from the main command loop.  This flaw has been present
     since the introduction of ssppeecc's server mode.

Fix For Detection of Invalid Octal Values In Strings
     An old issue where strings starting with the characters ""0088"" or ""0099"" would
     evaluate to zero in certain contexts, in particular in conditional
     statements, has been fixed.  The problem was that the C code improperly
     identified the strings as octal constants because of the leading zero, but
     a scan for an octal number would return a zero value since 8 and 9 are not
     valid octal digits.

Fix For ddaattee(()) Glitch
     A bug in the ddaattee(()) implementation where two successive values for the time
     of day displayed using the format ddaattee((""%%ss..%%..66"")) could result in anomalous
     values such as:

        11338822665500448822..9999999999990055 11338822665500448822..0000000011009977,,

     where the second invocation shows an earlier time than the first, has been
     fixed.  Note, a more straightforward way to obtain the same information is
     using the ttiimmee(()) function, which never had such an issue.

Fix For ddeeccooddee(()) Of Two-Dimensional Associative Arrays
     The built-in ddeeccooddee(()) function will now properly decode two-dimensional
     associative arrays.  See the _e_n_c_o_d_e help file for details on eennccooddee(()) and
     ddeeccooddee(()).

Fixes For aarrrraayy__dduummpp(()) To File
     A problem when calling aarrrraayy__dduummpp(()) where the specified file could not be
     opened and ssppeecc would show the same error message repeatedly has been
     fixed.  Also, a small memory leak when calling aarrrraayy__dduummpp(()) with the
     optional filename argument has fixed fixed.

Duplicate Port Numbers In ssoocckk__ppaarr((""sshhooww"")) Eliminated
     The strings printed with ssoocckk__ppaarr((""sshhooww"")) and returned by ssoocckk__ppaarr((""iinnffoo""))
     no longer list the same port number twice after the host.

Fix For Counter Mnemonic Check In Configuration Editor
     A old bug in the configuration editor, where a check for illegal use of
     spaces in the counter mnemonics was applied to strings in row 2 of the
     scaler screen and not the mnemonics in column 2, has been fixed.

Fix For ttaannggoo__ppuutt(())
     An old programming error in the implementation of the ttaannggoo__ppuutt(()) function
     that has only recently manifested on 64-bit LLiinnuuxx builds has been fixed.
     Before the fix, a ttaannggoo__ppuutt(()) call of a scalar attribute could pass an
     incorrect value.

HARDWARE SUPPORT

Support For National Instruments X Series Counter/Timers
     The National Instruments 6300 X series PCIe and PXIe 6300 boards are now
     supported as counter/timers.  The digital I/O capabilities of the boards
     can also be used.  The analog-to-digital and digital-to-analog capabilities
     are not yet supported.  See the _n_i_6_3_x_x help file for details.

Hardware Support For the New Focus 8742 Motor Controller
     This release includes initial support for the New Focus (Newport) model
     8742 Picmotor Controller/Driver.  The current support is limited to the
     Ethernet interface.  The USB interface and RS-458 network support will be
     added when needed.

Support For SmarAct SCU Motor Controllers
     ssppeecc now supports the SmarAct SCU model motor controller in addition to the
     MCS model already supported.  See the _s_m_a_r_a_c_t help file for details.

Support For C400 Counter/Timer
     This ssppeecc release contains support for the C400 counter/timer made by
     Pyramid Technical Consultants and sold by FMB-Oxford.  The ssppeecc support is
     over the serial interface only.  See the _c_4_0_0 help file.

Preliminary Support For Trinamic TMCL Motor Controllers
     This ssppeecc release contains preliminary support for the TMCL line of motor
     controllers from Trinamic.  Both serial and CAN interfaces are supported.

Preliminary Support For Phytron PhyMotion Motor Controllers
     This ssppeecc release contains preliminary support for the Phytron PhyMotion
     motor controllers over a socket interface.  The configuration editor
     controller type is PPHHYYMMOO.

New Serial Baud Rate and Other Fixes
     ssppeecc now recognizes a baud rate or 600000 for serial devices.  In addition,
     some issues with the code to set certain non-standard baud rates (7200,
     14400 and 28800) on LLiinnuuxx have been addressed.

Updated Behavior For Several Motor Controllers
     An update to the motor control error handling will now abort the move if an
     error occurs during the ""pprreessttaarrtt__oonnee"" and ""pprreessttaarrtt__aallll"" phase of sending
     the commands.  A handful of motor controllers are affected by this change,
     namely the Oriel 18092, Advanced Control System MCU, Missouri Research
     Reactor motors, MicroMo MVP-2001, New Focus Picomotor 875x, Newport XPS,
     SPring-8 Equipment Manager motors, along with the macro hardware motor
     support.  In practice, one is not likely to see any difference in behavior
     with the real motor controllers.  However, the updated behavior may be
     useful with the macro hardware motor support.

Updates For the Newport XPS Motor Controllers
     Previously, ssppeecc would automatically send the home-search command to a
     Newport XPS motor group if the XPS reported that motors in the group were
     in the not-referenced state.  When an XPS motor is in the not-referenced
     state, nothing can be done with the motor until the home-search command has
     been sent.  This ssppeecc release changes the default behavior so that the
     home-search command is not sent automatically.  Instead, a message is
     printed during hardware configuration or when a move is attempted telling
     the user that the hhoommee command must be run.

     The previous default behavior of automatic home-search can be restored on a
     controller-wide basis by adding the non-standard optional controller
     parameter ""aauuttoo__hhoommee"" to the hardware configuration file.  A value of 1 for
     the parameter will allow ssppeecc to send the home-search command during
     hardware configuration.  A value of 2 will allow ssppeecc to send the
     home-search command any time it is needed.

     The 19 additional states added to the XPS internal state machine since the
     original ssppeecc XPS support was written are now recognized.

     ssppeecc will now show warning messages if a move is halted by the controller
     putting a motor in the disabled state because of a following error (or
     several other conditions).

     If a motor reports it is in the not-initialized state due to the error
     "both ends of run activated", ssppeecc assumes that to mean the motor is
     disconnected and disables access to that motor to avoid continued error
     messages.  To re-enable access to the motor, it is necessary to fix the
     problem and restart ssppeecc or run the rreeccoonnffiigg command.

     Some problems with configuring XPS motor groups with more than one motor
     have been addressed.  (Apparently, nobody had been using that configuration
     with ssppeecc.)  Yet to be resolved are issues where ssppeecc sends commands to
     perform backlash.  This issue can be worked around by configuring backlash
     in the XPS system file and setting the ssppeecc backlash parameter to zero.

     Finally, the commands to set speed and acceleration are handled more
     efficiently.

Improved Abort Handling for ACS MCB-4B Motor Controller
     A problem with the ACS MCB-4B motor controller, where communication errors
     occurred after sending a motor-stop command associated with a ^^CC user
     abort, has been addressed.  ssppeecc now gives the controller motors time to
     decelerate before sending a command after sending the stop command, as the
     controller firmware appears to require such a delay.

Several TANGO Updates
     The ttaannggoo__ggeett(()) and ttaannggoo__ppuutt(()) functions have new usage options to read or
     set multiple attributes in a single call.  See the updated _t_a_n_g_o help file
     for details.

     The ttaannggoo__ggeett(()) return value can now be used to check if the data quality
     of the values read is "invalid".

     Calling any of the ttaannggoo__iioo(()), ttaannggoo__ggeett(()) and ttaannggoo__ppuutt(()) functions with
     an invalid attribute is no longer a fatal error.  Instead, ssppeecc will return
     -1 and place a message in TTAANNGGOO__EERRRR.

     The ttaannggoo__iioo(()), ttaannggoo__ggeett(()) and ttaannggoo__ppuutt(()) should now work well with
     associative array and all data array input and output types for any array
     (spectrum or image) TANGO data type.

     If a return argument is included for ttaannggoo__iioo(()) scalar-valued commands,
     ttaannggoo__iioo(()) will return zero on success and place the return value in the
     supplied argument.

     TTAANNGGOO__EERRRR can now be assigned a numeric -1 value rather than the string
     "-1" to suppress error messages on the next call of the TANGO functions.

     ssppeecc now supports the DEVVAR_LONG64ARRAY and DEVVAR_ULONG64ARRAY as input
     and output types for ttaannggoo__iioo(()), as input types for ttaannggoo__ggeett(()) and as
     output types for ttaannggoo__ppuutt(()).

changes                      spec 6.00 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 6.00

April 6, 2014 - RELEASE 6.00.11-5

Updates For Tsuji UPM2C Motor Controllers
     The ssppeecc support for the Tsuji UPM2C motor controllers has been updated to
     use the new-style firmware commands.  (The controller firmware understands
     both an old-style and a new-style command set.)  Previously, the code was
     using the old-style commands, which included a command to set backlash that
     isn't supported by the UPM2C.

March 24, 2014 - RELEASE 6.00.11-4

Updates For Tsuji PM16C Motor Controllers
     The ssppeecc support for the Tsuji PM16C motor controllers has been updated to
     include the PM16C-16 model.  In addition, on models that support the new
     commands, ssppeecc now uses the new commands for home search and for reading
     the busy and limit status.

Updates For Tsuji CT Counter/Timers
     The ssppeecc support the Tsuji counter/timers will now recognize additional
     models CT16D/E, CT32D/E, CT48D/E and CT64D/E.

February 14, 2014 - RELEASE 6.00.11-3

Timeout Tweak For OMS MAXv
     The read and write timeout intervals for the Oregon Micro Systems MAXv
     motor controller have been increased a bit as a possible solution to an
     infrequently observed communication problem between ssppeecc and the
     controller.

February 10, 2014 - RELEASE 6.00.11-2

Fixes For Ortec 994/996 In Blind-Timer Mode
     Counting to a monitor-count preset when using the Ortec 994/996 counters in
     blind-timer mode is now more robust.  See the _o_r_t_e_c help file for details.

Fix For SPring-8 Equipment Manager Motor Configuration
     An update in ssppeecc release 6.00.04 that inadvertently broke support for the
     SPring-8 Equipment Manager motor configuration has been fixed.

January 15, 2014 - RELEASE 6.00.11-1

Support For Tsuji PM4C-06 Socket Interface
     This ssppeecc release adds support for the Tsuji PM4C-06 model which adds a
     socket interface capability to the PM4C motor controller.

September 21, 2013 - RELEASE 6.00.11

Support For LAWICEL CANUSB
     This ssppeecc release includes support for the LAWICEL AB CANUSB module to
     interface to CANbus devices using USB.  Currently, the only CANbus devices
     with built-in support in ssppeecc are the Mclennan PM595 and the Trinamic
     QUADpack/SIXpack motor controllers (although generic access is available
     using the ffbbuuss__ggeett(()) and ffbbuuss__ppuutt(()) functions).  Note, the CANUSB device
     works best using a maximum CAN bit rate of 125 kbit.  Communication with
     the above motor controllers fails at higher rates.

Updated Support For Dectris Mythen
     Support for the Dectris Mythen MCA has been updated to include support for
     the multiple-module 6K and 24K models.  Also, firmware support has been
     extended through version 2.0.5.  See the _m_y_t_h_e_n help file for details.

September 5, 2013 - RELEASE 6.00.10

Additional Revision For New Version of Move Macros
     Unnecessary quotation marks around the $$** in the call of __mmmmoovv in the
     definitions for the recently revised move macros mmvv, uummvv, mmvvrr, uummvvrr, mmvvdd,
     uummvvdd, mmvvrr22 and uummvvrr22 have been removed.  This change restores the ability
     to use quotation marks when specifying target positions, as in:

        mmvv tttthh xx[[""aarrgg""]]

     This revision should be the last for this generation of the basic move
     macros.

Limit On Number Of Macro Arguments Removed
     The limit on the number of positional arguments allowed with ordinary
     macros has been removed.  Previously, no more than 25 arguments were
     allowed.

Fixes For Am9513 Counter/Timer Support
     This ssppeecc release fixes a problem introduced in release 5.09.02-1 that
     broke support for the ISA bus versions of the two counter-chip models of
     the Am9513 counter/timer cards, specifically the Measurement Computing
     model CIO-CTR10 and the Keithley/Metrabyte model CTM-10.

Aug 6, 2013 - RELEASE 6.00.09

New eevvaall22(()) That Can Access Local Variables
     A new version of the eevvaall(()) function called eevvaall22(()) can access local
     variables defined in the enclosing statement block.  Type hh eevvaall from ssppeecc
     for details.

Revisions For New Version Of Move Macros
     The revised move macros introduced in release 6.00.06 maintained the
     existing feature where positions could be specified as expressions and
     added the ability to specify multiple motors and target positions on the
     command line.  However, the implementation in that release inadvertently
     broke the ability to use local variables in the expressions for the
     position arguments.  An updated implementation in this ssppeecc release
     replaces the __mmmmoovv(()) macro function used with the move macros with an
     ordinary __mmmmoovv macro and uses the new eevvaall22(()) function.  These changes
     restore the ability to use local variables in the position argument.  In
     addition, the standard hhoommee macro also now uses eevvaall22(()) to allow local
     variables to be used for its optional position argument.

Additions To the Standard ssppeecc Data File Header
     The standard ssppeecc data file header, which has always included all the
     configured motor names prefaced by the ##OO control key, will now also
     include the motor mnemonics prefaced with ##oo, the counter names prefaced
     with ##JJ and the counter mnemonics with ##jj.  Eight items are included on
     each line, successive lines are numbered as ##OO11, ##OO22, etc. and motor and
     counter names are each separated by two spaces.

Fix For User Name Shown At Exit
     When ssppeecc exits, it prints a message that the user's state has been stored
     and converts the first letter of the user's name to upper case for purposes
     of the message.  A 25-year old bug, where the conversion would generate a
     control character if the first character of the user's name was a digit,
     has been fixed.

Fix For Help Viewer
     A bug introduced with the help viewer updates in the previous release that
     broke formatting for ..rrsstt files when a path was used to specify the file
     name has been fixed.

July 18, 2013 - RELEASE 6.00.08

New Features For Shared Data Arrays
     A new iinnffoo field has been added to the ssppeecc shared array header structure.
     The field can be filled with up to 512 bytes of arbitrary text.  The field
     can be read or written from ssppeecc using the new ""iinnffoo"" option to the
     aarrrraayy__oopp(()) function.  New functions SSPPSS__GGeettIInnffooSSttrriinngg(()) and
     SSPPSS__PPuuttIInnffooSSttrriinngg(()) are included in the ssppss..cc code distributed with ssppeecc
     and used with other applications, such as the SPS PPyytthhoonn modules.

     In addition, a new mmeettaa area has been defined for the shared array data
     segments.  The area is located after the array data.  New mmeettaa__ssttaarrtt and
     mmeettaa__lleennggtthh fields have been added to the shared array header structure.
     The mmeettaa__ssttaarrtt field contains the byte offset of the mmeettaa area from the
     start of the shared memory segment, while mmeettaa__lleennggtthh is the size of the
     mmeettaa area in bytes.  There is no limit to the length of the mmeettaa area, but
     ssppeecc will set the size to 8,192 bytes, although that might change in the
     future.  The area can be read or written from ssppeecc using the new ""mmeettaa""
     option to the aarrrraayy__oopp(()) function.  New functions SSPPSS__GGeettMMeettaaDDaattaa(()) and
     SSPPSS__PPuuttMMeettaaDDaattaa(()) are also included in the ssppss..cc code.

     The SSHHMM__VVEERRSSIIOONN number in the updated ssppeecc__sshhmm..hh file has been changed to 6
     to reflect the changes.  These changes will not break compatibility of the
     new objects with programs built using prior versions of the shared array
     header, as the new elements have been added to the existing region of
     padding in the header.

     The additions to the shared memory object definition will be used with
     ssppeecc's forthcoming stand-alone plotting utility.

A uusseerr__pprreecctt Added To cctt and uucctt Macros
     A new user-hook macro named uusseerr__pprreecctt is available for users who need to
     do a special action prior to counting from the command line, but not prior
     to counting during a scan.  The new macro will be called in the standard cctt
     and uucctt macros.  By default uusseerr__pprreecctt is defined as an empty macro.

     Note, uusseerr__pprreecctt should not be confused with the exiting uusseerr__pprreeccoouunntt hook
     which is included in the lowest level counting macro ccoouunntt__eemm, used by both
     cctt/uucctt and the scans.

     In addition, the uucctt macro has been rearranged to ensure that the uusseerr__cctt
     hook, called after counting has finished, will always be called, thus
     ensuring calls of uusseerr__pprreecctt and uusseerr__cctt will be balanced.  Previously, if
     the timer indicated the count was finished before the first polling check
     with cchhkk__ccoouunntt, the uusseerr__cctt macro would not be called.

Fix For eennccooddee(())
     A bug where ssppeecc could crash when encoding an empty associative array with
     the eennccooddee(()) function has been fixed.

Fix For Command File Display On Some 64-Bit Platforms
     Internal code used to display and save the path for command files for the
     ddooffiillee(()) and qqddooffiillee(()) commands has been updated to work correctly on
     certain 64-bit platforms.  Previously, if the path contained a leading ""..//""
     or embedded ""//....//"", ""////"" or ""//..//"" sequences, the displayed and saved path
     name might have been corrupted.

Updates For Help Viewer
     ssppeecc's built-in help viewer and the stand-alone cchheellpp utility have been
     updated to accommodate local help files that don't quite conform to the
     expected format.  In particular, the help viewer will now work with help
     files produced by the ESRF mmaacchheellpp utility when the source macro files are
     missing the %%TTIITTLLEE%% comment.

Fix For ESRF VCT Timer/Counter Support
     Recent fixes to restore compatibility with old versions of the ESRF VCT
     Timer/Counter TACO device server inadvertently broke use of more than one
     VCT device server in a session.  That issue has been fixed in this ssppeecc
     release.

Fix For ""ssttaarrtt__aallll"" Error With Macro Motors
     A problem where errors generated by the ""ssttaarrtt__aallll"" command in a macro
     hardware motor function might not be properly caught by the ssppeecc motor
     moving code has been fixed.  The problem was likely to occur if
     calculational macro-hardware motors had also been defined.

Updates For Macro Hardware Motors
     To make the code associated with calculational macro motors and regular
     macro-hardware motors work more robustly, ssppeecc now enforces a rule that if
     a pprreeffiixx__ccaallcc macro function exists for a particular pprreeffiixx, ssppeecc will not
     make any calls to a pprreeffiixx__ccmmdd macro function, even if such a macro
     function exists.  ssppeecc will print a warning message to that effect during
     hardware configuration if both macro functions are defined.

Fix For Catching Motor Start Errors
     If there is an error (usually a communication error) in sending the
     commands to start a move for certain motors controllers that support a
     multiple-motor start command, ssppeecc will now halt any current moves of all
     motors on all controllers, just as is done on ^^CC or when hitting a limit
     switch.  The motor controllers affected are ssppeecc macro-hardware motors,
     ssppeecc server motors, ACS SPI-8, Anorad, ESRF MAXE, FZD Sergen, Huber 9300
     touch screen, Micos MMC-100, Newport SMC100 Newport XPS, OMS, Piezosystem
     Jena, Sigmatech FC-501A, Velmex, and XIA HSC-1.

June 25, 2013 - RELEASE 6.00.07

New aarrrraayy__ccooppyy(()) Function
     A new aarrrraayy__ccooppyy(()) function is provided that enables the creation and
     decoding of byte streams of mixed data types.  See the _a_r_r_a_y_s help file for
     details.

Support For Newport CONEX-AGP Motor Controller
     This ssppeecc release supports the Newport Agilis-P model CONEX-AGP single-axis
     motor controller for a piezo actuator with encoder feedback.  Use the
     ""dduummpp"" option with the mmoottoorr__ppaarr(()) command to list all the parameters names
     associated with the controller along with their current values.  The
     parameters can be assigned as standard or non-standard optional parameters
     using ssppeecc's hardware configuration editor, as appropriate.

     The CONEX-AGP has a USB interface that is supported on LLiinnuuxx and Mac OSX
     using USB-to-serial kernel drivers.  On LLiinnuuxx, the standard ffttddii__ssiioo kernel
     module is required along with the special uuddeevv rules installed by ssppeecc in
     //eettcc//uuddeevv//rruulleess..dd//1100--ssppeecc__uussbb..rruulleess.  On OSX, the VCP driver available at
     the _f_t_d_i_c_h_i_p_._c_o_m must be installed, and the CONEX USB vendor and product
     IDs must be added to the kernel extension IInnffoo..pplliisstt file as explained in
     the _F_T_D_I _T_e_c_h_n_i_c_a_l _N_o_t_e _1_0_5 available at the FTDI website.  Contact CSS for
     assistance, if needed.

Support For Tsuji UPM2C-01 Motor Controller
     This ssppeecc release contains support for the Tsuji UPM2C-01 two-axis USB
     motor controller.  Although the controller uses a USB connection, the
     controller appears as a serial device to ssppeecc.

Fixes For SmarAct Motor Controller
     ssppeecc's support for the SmarAct Motor Controller has been updated to work
     with configurations that use actuators with no position sensor.  See the
     _s_m_a_r_a_c_t help file for details.

Fixes For Tsuji PM4C-05A Motor Controller
     The Tsuji PM4C-05A motor controller support now also has the fix for
     setting the acceleration parameter (included in spec release 6.00.04 for
     the other Tsuji motor controllers).

Fixes For Bruker Vantec-1 MCA
     A bug in the Bruker Vantec-1 MCA support where the internal start and stop
     routines would return errors when there were none has been fixed.  This bug
     prevented use of the MCA with ""aauuttoo__rruunn"" mode enabled.  In addition, a new
     ""eexxppoossuurree__ttiimmee"" mmccaa__ppaarr(()) option is available that will read and return the
     "actual exposure time" as reported by the Vantec-1.

Fix For GPIB Controller Configuration
     An old bug, where GPIB controller configurations would only work if
     controllers were assigned consecutive unit numbers starting from zero, has
     been fixed.  It is now possible to leave empty slots in the GPIB controller
     configuration.

Updates For Amptek DP5 Support
     A couple of minor issues with parameter display have been corrected for the
     new Amptek DP5 support.  Also, the automatic delay on re-opening the DP5
     socket to accommodate the 15-second delay built into the DP5 firmware is
     now interruptible by a ^^CC.

Fix For ssyymmss and sshhooww__ssttaattee Display Of New ccoonnssttaanntt Associative Arrays
     The display of ccoonnssttaanntt associative array symbol values with the ssyymmss --vv
     command and with the output of the utility sshhooww__ssttaattee has been fixed so
     that the output is acceptable as further input to ssppeecc.

Fixes For New Motor Move and Display Macros
     An internal macro name associated with the new move macros has been changed
     from __mmmmvv to __mmmmoovv to make it easier to detect whether conflicting local
     macros exist.  In addition, the old macro names have been redefined to
     include an error message to alert the user to the issue of obsolete local
     macros.

     A bug in the new motor display macros that would produce an error if the
     steps-per-degree parameter was negative has been fixed.

     The uuwwmm macro will display the specified motor positions at least once,
     even if the specified motors aren't active.

     Type nneewwmmaacc to reload the standard macros after updating.

Fix For __pplloottsseelleecctt(()) Macro
     An error in the calculation of a new value for PLOT_CNTRS_MAX in the
     updated __pplloottsseelleecctt(()) macro from the previous release has been fixed.

     Type nneewwmmaacc to reload the standard macros after updating.

May 16, 2013 - RELEASE 6.00.06

ccoonnssttaanntt Associative Arrays Implemented
     The ccoonnssttaanntt keyword can now be used to create and initialize constant
     associative arrays.  These arrays are global and elements can't be added or
     deleted.  The arrays can only be removed with uunngglloobbaall or reinitialized
     with ccoonnssttaanntt.  For example,

        ccoonnssttaanntt aarrrr [[ 00::PPII,, 11::""oonnee"",, ""ccaatt""::""iinntteerrnneett"" ]]

     creates a three-element constant associative array.

Syntax For ccoonnssttaanntt Declaration Expanded
     An optional equals sign can now be used in ccoonnssttaanntt declarations, as in:

        ccoonnssttaanntt mmoonnoo__ttyyppee == 33
        ccoonnssttaanntt tteesstt == [[ 11::""oonnee"",, 22::""ttwwoo"" ]]

     Usage without the equals sign is still valid, of course.

New Standard Macros For Moving Motors
     The standard mmvv, uummvv, mmvvrr, uummvvrr, mmvvdd, uummvvdd, mmvvrr22 and uummvvrr22 macros have been
     rewritten to use a new __mmmmvv(()) macro function which implements a syntax to
     allow multiple motors and targets to be specified on the command line.  As
     before, the target position can be an expression (although still with no
     spaces).  For example, valid syntax now includes:

        uummvv tttthh 6600 tthh 3300 pphhii 9900 cchhii 112200
        mmvv tttthh 22**CCEENN tthh CCEENN

pplloottsseelleecctt Macro Now Automatically Resizes SSCCAANN__DD
     The standard plotting macros make use of a global variable named
     PPLLOOTT__CCNNTTRRSS__MMAAXX that sets a limit on the counter number that can be used in
     plotting.  The purpose of the limit is to keep the global SSCCAANN__DD array
     reasonably sized.  The default value for PPLLOOTT__CCNNTTRRSS__MMAAXX is 10, which means
     that counter numbers greater than 10 will not show up in the standard plots
     unless PPLLOOTT__CCNNTTRRSS__MMAAXX is increased.  This ssppeecc release includes an updated
     __pplloottsseelleecctt(()) macro (which is called by the pplloottsseelleecctt and ccoouunntteerrss macros)
     that will automatically increase the PPLLOOTT__CCNNTTRRSS__MMAAXX value (and resize
     SSCCAANN__DD) to accommodate the highest number counter selected for plotting.

Updates For cchheellpp Utility and ggeetthheellpp(()) Function
     ssppeecc release 6 introduced a redesigned help facility that intended to
     retain compatibility with previous help file formatting conventions.  To
     improve that backwards compatibility, this ssppeecc release includes a minor
     update to the standalone cchheellpp utility.  When the filename argument to
     cchheellpp contains a pathname, cchheellpp will now default to using formatting
     macros appropriate for the old-style help file format.  New optional
     arguments, --oolldd and --nneeww, will force selection of the old-style or
     new-style formatting macros.  Type cchheellpp -- to see usage.  The ggeetthheellpp(())
     function within ssppeecc will continue to default to the new-style formatting
     macros, but can take as a second optional argument a value to force the
     style.  Bit 2 will select old style and bit 3 will select new style.  Note,
     for arguments which consist only of a help filename, both cchheellpp and
     ggeetthheellpp(()) will choose the formatting macros based on whether the help file
     is in the old or new subdirectory within the ssppeecc auxiliary file directory.

Additional Information Displayed With mmccaa__ppaarr((""iinnffoo""))
     The mmccaa__ppaarr((""iinnffoo"")) command now displays the status of auto-clear mode,
     auto-run mode and soft-preset mode in addition to native data type, number
     of channels and maximum number of channels for the selected MCA device.

sseett__ssiimm(()) Now Has Option To Simulate sslleeeepp(())
     Invoking the sseett__ssiimm(()) function with an argument having bit 4 (0x10) set,
     will prevent ssppeecc from sleep delays when using the user-level sslleeeepp(())
     function.

Support For Amptek DP5 and Related Digital MCA Devices
     ssppeecc now includes support for Amptek's version 6 firmware on their DP5,
     PX5, DP5G and MCA8000D digital MCA devices (and products derived from
     those) over USB, serial and ethernet interfaces.  See the new _d_p_5 help file
     for details.

Support For 10-Axis OMS Motor Controllers
     The 10-axis Oregon Micro Systems (Pro-Dex) MAXnet motor controllers should
     now work with ssppeecc.  Previously, only configurations with up to 8 axes were
     supported.

Fix For Tsuji Motor Controller Support
     A bug, where the 32-bit position support introduced in ssppeecc release 6.00.04
     for Tsuji motor controllers may have prevented setting the dial position
     (with the cchhgg__ddiiaall(()) function or the sseett__ddiiaall macro) to negative values,
     has been fixed.

Fix For cclleeaannuupp__oonnccee In Server Mode
     An issue related to use of cclleeaannuupp__oonnccee in ssppeecc's server mode has been
     fixed.  Expected behavior is that when cclleeaannuupp__oonnccee is defined, it will
     either run if there is an error or be removed before the next top-level
     prompt is displayed.  Previously, if the cclleeaannuupp__oonnccee macro was defined in
     a block of commands sent from a remote client to a ssppeecc server and the
     commands completed successfully, the cclleeaannuupp__oonnccee macro was not removed
     until a command or newline was entered using the keyboard associated with
     the server ssppeecc session.

Fix For Recently Broken ssoocckk__ggeett(()) For UDP Connections
     A problem introduced in release 6.00.02 that could cause problems with
     ssoocckk__ggeett(()) reads from UDP sockets has been corrected.  The problem occurred
     when using more than one ssoocckk__ggeett(()) call to read a single message from the
     socket source.

Fix For Debug Level 2 Crash
     A bug, where ssppeecc could crash if the debug level was set to 2 (show node
     execution while running), has been fixed.

April 3, 2013 - RELEASE 6.00.05

Directory List Now Allowed For DDOO__DDIIRR In ddoo/qqddoo Macros
     The __ddoo macro, used by the standard ddoo and qqddoo macros, has always supported
     a command file directory given by the global variable DDOO__DDIIRR.  If the
     command file given as argument to the ddoo or qqddoo macros isn't in the current
     directory, the DDOO__DDIIRR directory will be checked.  This ssppeecc release extends
     the syntax to allow DDOO__DDIIRR to contain a colon-separated directory list,
     following the usual UNIX convention.  As before, the current directory will
     be checked first.  If there is no file by the given name in that directory,
     each directory in the list will be checked in order.  If DDOO__DDIIRR contains
     just a single directory name, the macro will behave exactly as it did
     before.

Fix For Prompting While Building Macro Arguments
     An old bug, where an unmatched quote followed by a newline in the arguments
     to an ordinary macro invocation would generate the standard ssppeecc prompt
     rather than qquuoott>> prompt to indicate a matching quote was required, has
     been fixed.  Previously, it would appear that ssppeecc had become unresponsive,
     as the prompt displayed was the prompt one sees when typing commands,
     although ssppeecc was simply building a string and waiting for the matching,
     terminating quote.

Fix For Debug Level 512 Crash
     A recently introduced bug, where ssppeecc would immediately crash if the debug
     level was set to 512 (memory allocation and freeing), has been fixed.

Fix For Duplicated CCOONNPPAARR Lines In ccoonnffiigg File
     A bug, where each invocation of the rr or RR commands in the eeddccoonnff
     configuration file editor (invoked by the ccoonnffiigg macro) would cause the
     CCOONNPPAARR:: entries to be duplicated when the ccoonnffiigg file was written out, has
     been fixed.  The rr and RR commands are used to undo the current editing
     session and replace the session with the current ccoonnffiigg file or the backup
     ccoonnffiigg file, respectively.  With the bug, the size of the ccoonnffiigg file could
     grow quite large in time due to the doubling.  The fix also includes code
     to remove all duplicate CCOONNPPAARR entries when writing out the ccoonnffiigg file.

Fix For Dectris Mythen 1K Using Old (1.3.0) Firmware
     An issue, where changes in the internal socket code in ssppeecc release 6.00.02
     broke support for the Dectris Mythen 1K with the older version 1.3.0
     firmware, has been addressed.

March 5, 2013 - RELEASE 6.00.04

Updated Macros For Motor and Counter Column Display
     The standard macros for displaying motor information in columns and for
     displaying updated motor positions and counter values during moving and
     counting have been updated and improved.  The macros now use the full width
     of the window.  In addition, the number format for large values is adjusted
     automatically to maintain equally spaced columns.

     Several new parameters are available to configure how the values are
     displayed.  In particular, the number of digits displayed to the right of
     the decimal point for motor positions is now configurable.  The new macro
     sseettsshhooww prompts for all the configuration parameters.

     With this update, the motor-related macros wwmm, sshhooww__mmoottoorr__iinnffoo(()),
     __uuppddaatteeHHKKLL, __uuppdd__mmoovvee and  __uuppddaattee(()) have been replaced.  The
     sshhooww__mmoottoorr__iinnffoo(()) macro is used by wwmm (where motor), wwaa (where all), wwuu
     (where all in user units), llmm (show limits) and __mmoott (used indirectly in
     the geometry macros ccaall, ccaa, wwhh and ccii by way of the macro __vvaarr).  The
     __uuppddaatteeHHKKLL macro is used by uummkk and uubbrr.  The __uuppdd__mmoovvee macro is used
     during scans.

     The __uuppddaattee(()) macro, used to display updated moving and counting during
     scans, is now also used by all macros that display updated motor positions
     including uummvv, uummvvdd, uummvvrr, uuwwmm, uummkk, uubbrr, uuaann, uuppll.

     The updated counting macro uucctt has been replaced and uuccttnn has been
     redefined as uucctt.

     All these updated macros are defined in the new file mmaaccrrooss//sshhooww..mmaacc in the
     ssppeecc distribution directory.  Read the comments in that file for additional
     details.

Fractional Positional Values Allowed With pplloott__mmoovvee(())
     The pplloott__mmoovvee(()) function, used for placing text labels on the
     high-resolution plots, can now take floating point xx and yy position
     arguments.  Previously, positions were rounded to the nearest integer.
     Note, the range of values for the position arguments remains 0 <= xx < 80
     and 0 <= yy < 25 with the origin at the top left corner.

X11 Plots Use Higher Resolution Scaling
     The scaling factors used to calculate pixel positions for the X11 plot
     windows have been increased by a factor of 100 to reduce the position
     rounding seen with larger pixel-count plot windows.

Improved Text-Mode Plotting
     Although a little used feature, the text-mode plotting in ssppeecc is now a bit
     more robust.  A new ""aasscciiii"" option to pplloott__ccnnttll(()) can be used to force text
     mode plots.  To sample the text mode plotting, Type the command
     pplloott__ccnnttll((""aasscciiii"")) and run scans or make a plot with sspplloott.  Use
     pplloott__ccnnttll((""--aasscciiii"")) to disable.

Updated pplloott__ccnnttll(()) Syntax
     The query commands for the pplloott__ccnnttll(()) function now allow a trailing
     question mark.  Previously the syntax to query a current mode was, for
     example, pplloott__ccnnttll((""??xxlloogg"")).  Now pplloott__ccnnttll((""xxlloogg??"")) also works.

New Curly Bracket Delimiter Option For ddeeff and rrddeeff
     The ssppeecc parser now allows the macro definition string for ddeeff and rrddeeff to
     be delimited by curly brackets.  The normal string delimiters are '' or "".
     This extension allows syntax-aware editors to highlight the structure of
     the macro definition appropriately.  When quotes are used with such
     editors, the content of such strings is not highlighted to show syntax.
     The following are now all equivalent:

        ddeeff tteesstt ''pprriinntt ""hheelllloo""''
        ddeeff tteesstt ''{{ pprriinntt ""hheelllloo"" }}''
        ddeeff tteesstt {{ pprriinntt ""hheelllloo"" }}
        ddeeff tteesstt ""pprriinntt ''hheelllloo''""
        ddeeff tteesstt ""pprriinntt \\""hheelllloo\\""""

     Note that if curly brackets are used to delimit the macro definition,
     nonfunctional curly brackets need to be escaped if they are used in
     strings, for example:

        ddeeff tteesstt {{ pprriinntt ""ccuurrllyy \\{{ aanndd \\}}"" }}

Fix For Fault When Accessing Disabled Controllers
     An issue, where ssppeecc could crash when the mmoottoorr__ppaarr(()) or ccoouunntteerr__ppaarr(())
     functions were used with a few models of controllers that were disabled
     using the recently added ccoonnffiigg-file OOFFFF feature, has been fixed.

Fix For Channel Configuration Issue With Some Controllers
     An issue related to channel configuration that could cause a crash when
     using certain controllers that have channel numbers starting with one
     (rather than zero) has been fixed.  As the error was related to a memory
     corruption problem, the manifestation would vary.  Anomalies were reported
     with the ESRF TACO VCT6 counter/timer.  Controllers that could exhibit the
     same problem are the Attocube ANC300, EPICS motor record, ESRF TACO VCT6,
     JVL SMI20B, Munich BR-tronik IPS, Newport Agilis, PI E-712 and Sigmatech
     FC-501A.  Prior to this fix, the crash issue could be avoided by
     configuring one more channel than needed.

Fix For Spurious mmccaa__ppaarr(()) Error Message
     An issue with several MCA devices, including the Dectris Mythen, where
     using the ""ddiissaabbllee"" option with mmccaa__ppaarr(()) would display an ""uunnkknnoowwnn
     aarrgguummeenntt"" error message even though the command otherwise worked, has been
     fixed.

Fix For ttaannggoo__ggeett(()) Crash
     An issue, where a call of ttaannggoo__ggeett(()) with just one argument might lead to
     a segmentation fault, has been fixed.

Restore TACO VCT-6 Compatibility With Old Device Servers
     An update to the VCT-6 counter/timer support in ssppeecc release 5.09.02-1 that
     broke compatibility with old versions of the TACO device server has been
     addressed in this release by having the GGeettDDeevvLLiisstt command (only present in
     the new device server) emulated in the ssppeecc code.

Update For Sigmatech FC501-A Motor Controller
     The ssppeecc support for Sigmatech FC501-A motor controller has been modified
     to work with single-axis models.

Support For 32-bit Positions For Tsuji Motor Controllers
     ssppeecc now supports the 32-bit maximum position (in steps) for newer models
     of the Tsuji motor controllers.  Older controllers have 24-bit position
     registers, and the command syntax only supported 24-bit values.  For models
     that support it, ssppeecc uses the new command syntax to read and set the
     current position and to send move commands.  The new syntax is also used
     for sending speed and acceleration commands, where a wider ranges of values
     is also allowed.

Fix For Programming Acceleration On Tsuji Motor Controllers
     A long-standing bug in setting the acceleration time for Tsuji motor
     controllers is now fixed.  Previously, the acceleration time sent to the
     controller would be off from the time specified in configuration file by a
     factor of the steady-state rate divided by 1000.  If the rate was 10,000
     steps/sec, and the configured acceleration time was 100 msec, ssppeecc would
     have sent a command for an acceleration time of 10,000/1000 * 100 msec or 1
     second.  When updating to this ssppeecc release, current users of Tsuji motor
     controllers should pay particular attention and adjust the configuration
     file  values for the acceleration time accordingly.

Support For Tsuji CT08-01E Counter/Timer
     ssppeecc now recognizes the model CT08-01E counter/timer from Tsuji
     Electronics.

Support For Phytron MCC Controllers
     ssppeecc now supports The Phytron model MCC motor controller.

New Sample-Height Offset Parameter For Some ssuurrff Geometries
     A new parameter (gg__sshhooffff in the macros) has been added for the ssuurrff__ccmmcc,
     ssuurrff__xx2222bb and ssuurrff__bbll1188bb geometry code to hold a value for a sample-height
     offset.  The parameter might be used, for example, to track a changing
     correction to the sample height due to evaporation of a liquid sample.  The
     default value is zero.  Macros for the corresponding  ssuurrff geometries have
     been updated and include a new sseett__sshhooffff macro.

December 8, 2012 - RELEASE 6.00.03

Fix For Calculational Pseudo-Motor Drift
     A long-standing issue involving position drift of calculational pseudo
     motors during scans has been fixed.  The fix will work for pseudo motors
     associated with geometry code, such as the kappa versions of the ffoouurrcc,
     ffiivveecc and ppssiicc diffractometers, and for macro-hardware calculational pseudo
     motors.  The position drift resulted from the process where real-motor
     positions are calculated from the desired pseudo-motor positions at each
     point in a scan, then pseudo-motor positions are recalculated from the
     actual real-motor positions after the motors are moved.  Since the
     real-motor positions are rounded to the motor resolution, the pseudo-motors
     that aren't being explicitly scanned and assigned values at each point can
     drift due to the round off.  The solution involves saving the desired
     real-motor position to full resolution and (when appropriate) using that
     value (rather than the value rounded to motor resolution) when calculating
     the pseudo-motor position.

December 6, 2012 - RELEASE 6.00.02-1

Can Now Check For Hardware Limits With Tsuji PMC16C Motor Controllers
     The ""hhiigghh__lliimm__hhiitt"" and ""llooww__lliimm__hhiitt"" options to mmoottoorr__ppaarr(()) return the
     current state of the the designated limit switch for most motor
     controllers.  Previously, for the Tsuji PMC16C multiplexed controllers, the
     command would only read the active state of the limits for the two (or four
     on the -04 models) last-used motor channels.  For other channels, the
     function would always return zero.  This ssppeecc release updates the Tsuji
     support so that is now possible to read the active state of the limits for
     any channel specified in the mmoottoorr__ppaarr(()) command.

New ""hhoollddooffff"" Parameter For Tsuji Motor Controllers
     A non-standard optional parameter named ""hhoollddooffff"" is now recognized when
     using the Tsuji PMC16C motor controllers.  When set, ssppeecc will turn the
     motor hold current off when the motor is not moving.  The parameter value
     is the delay time (in seconds) that ssppeecc will delay between when the power
     is turned on and the move is started and between the end of the move and
     when the power is turned off.  A value of zero will skip the delay.  A
     negative value will disable the hold-off feature.  Non-standard optional
     parameters can be created by typing a lower case pp from the MMotor screen of
     the configuration editor.  The hold-off functionality is the same as
     provided previously using the ""mmiisscc__ppaarr__11"" standard optional parameter (use
     of which is still supported, but is discouraged).

December 1, 2012 - RELEASE 6.00.02

Support for VXI-11 RPC Protocol
     This ssppeecc release has support for the VXI-11 protocol, often used with
     instruments such as digital oscilloscopes.  See the _v_x_i_1_1 help file for
     details.

Added uusseerr__sseettddiiaall Hook To sseett__ddiiaall Macro
     A uusseerr__sseettddiiaall hook macro is now part of the standard sseett__ddiiaall macro, just
     as a uusseerr__sseettppooss hook macro has been part of the standard sseett macro for
     many years.  The sseett__ddiiaall macro is used to set a motor dial position.  The
     sseett macro is used to set a motor user position.  In both cases, the macros
     are called with the same arguments as the including macro.

New ssoocckk__ppaarr(()) ""ssiilleenntt"" Flag For Testing Socket Connection
     An additional ""ssiilleenntt"" argument can be used with the ""ccoonnnneecctt"" and
     ""ccoonnnneecctt__uuddpp"" options to ssoocckk__ppaarr(()) to suppress error messages if the
     connection attempt fails.  Success or failure can be determined by the
     return value of ssoocckk__ppaarr(()).  See the _s_o_c_k_e_t_s help file for details.

Check For "Start All" Errors On Certain Motor Controllers
     For certain motor controllers that include a simultaneous start capability,
     an error while sending the simultaneous start command(s) will now result in
     the same behavior that occurs when there is an error sending a single motor
     start command.  That is, the move will be aborted for all motors and the
     appropriate flags will be set or cleared in the internal code.  The
     affected controller types are ACS SPI-8, Anorad I-series, ESRF MAXE, FZD
     Sergen, Huber 9300 touch screen, Micos MMC-100, Newport SMC100, Newport
     XPS, OMS (all models), Sigmatech FC-501A, Velmex VXM-1/VXM-2, XIA HSC-1,
     ssppeecc macro motors and ssppeecc server motors.

Updated ttaannggoo__hhoommee and ttaaccoo__hhoommee Syntax
     The ttaannggoo__hhoommee and ttaaccoo__hhoommee parameters used in the ssppeecc IInnssttaallll script can
     now each contain the complete path name to the directory that holds the
     associated libraries.  The prior behavior, where the parameters each
     contained the path to the associated //lliibb// directory, continues to be
     supported.

Fix For Persistent Hardware Parameters Over a rreeccoonnffiigg
     ssppeecc stores certain parameters for specific hardware devices in the state
     file.  For example, the preset times or number of channels set using
     mmccaa__ppaarr(()) are saved for some models of MCA.  When restarting ssppeecc, the last
     set values are restored from the state file.  Previously, though, such
     parameters did not maintain their values during a hardware rreeccoonnffiigg from
     the command line, and were instead reset to their default values.  The
     problem has been solved by having ssppeecc update the state file (equivalent to
     a ssaavvssttaattee from the command line) before doing the hardware
     reinitialization associated with rreeccoonnffiigg.

Support For Piezosystem Jena Controller
     This ssppeecc release includes support for the Piezosystem Jena piezo actuator
     controller.  See the _p_i_e_z_o_j_e_n_a help file for details.

Update For Bruker D8 Motor Controller
     The built-in support for the Bruker D8 motor controller has been updated to
     work with the RVD8-02 firmware released in 2010.

Fix For Bruker/Roentec XFlash MCA Serial Modes
     The ssppeecc code for the Bruker (formerly Roentec) XFlash MCA no longer
     unconditionally sets hardware flow control.  Hardware flow control can be
     enabled in the MODE field of the configuration editor, if needed.

New ""rreeffrreesshh"" Option For eeppiiccss__ppaarr(())
     A new ""rreeffrreesshh"" option to eeppiiccss__ppaarr(()) is available that closes and reopens
     the channel access connection to the specified process variable.

Can Link With EPICS 3.15
     It is now possible to link ssppeecc with the EPICS 3.15 libraries.  There have
     been no changes to the built-in EPICS support to accommodate the 3.15
     release, but the installation script will recognize 3.15 libraries, and
     ssppeecc's built-in code will have been compiled with 3.15 header files.

Fix For Obscure rreemmoottee__ppaarr(()) Issue
     An old bug, where using many (somewhat less than 20) calls in the same
     statement block of rreemmoottee__ppaarr(()) with any of the ""cclloossee"", ""ccoonnnneecctt"" or
     ""aabboorrtt"" arguments would produce an "Out of temporary cells" error, has been
     fixed.

Fix For Double Newlines In Log Files
     An issue, where a carriage return-linefeed combination in a string would
     generate two newlines when written to a log file, has been fixed.

October 10, 2012 - RELEASE 6.00.01

Fix For Possible Crash With Misconfigured Motor Controllers
     A bug, where ssppeecc could crash if the number of channels on a DAC motor
     device in the ccoonnffiigg file was set below the number of channels in use, has
     been fixed.

Fix For TACO/TANGO General CCD Support
     A problem with the "ESRF General CCD Dev" device support, where the ""ttaallkk""
     and ""hhww__ppaarr"" iimmaaggee__ppaarr(()) commands didn't return values when used with
     TANGO-based image device servers, has been corrected.

September 26, 2012 - RELEASE 6.00

New Major Release Number and New Website Launch
     With the debut of the revitalized _c_e_r_t_i_f_._c_o_m website and a number of
     noteworthy updates to the ssppeecc code, we've bumped the ssppeecc major release
     number to 6.  The website is a complete redesign and includes interactive
     forums and a new supported-hardware database.  The ssppeecc updates are
     described below and include new support for 64-bit integers, an overhauled
     help facility and purging of some legacy macro references.

Integer Operations Support Greater Precision
     Many of the 32-bit integer operations in ssppeecc have been recoded to use
     (nearly) 64-bit integer arithmetic.  ssppeecc stores number values in a
     double-precision floating point format and that format has only 52 bits for
     the significand (the remaining 12 bits are for the sign and exponent).
     Thus, most of the recoded integer operations in ssppeecc are carried out only
     to 52 bits.

     The bit-wise operators (||, ||==, &&, &&==, ^^, ^^==) will mask the operands to 52
     bits.  The result of the operation will be no more than 52 bits.  The
     bit-not operator (~~) will mask the result to the low 52 bits.  The
     bit-shift operators (<<<<, <<<<==, >>>>, >>>>==) and the modulus operators (%% and %%==)
     will convert the operands to 64 bits, perform the operation using 64-bit
     integer arithmetic, then convert the result to a double for the return
     value.

     The input parser now recognizes 64-bit hexadecimal and octal values.
     Hexadecimal and octal 64-bit values can be input as constants and as input
     to the ggeettvvaall(()) function.

     The iinntt(()) function will return values up to 64 bits in magnitude, although,
     as with all of the functions and operations, only 52 bits of precision.
     The bbccdd(()) and ddccbb(()) functions will now operate on up to 52 bits.

     The built-in pprriinnttff(()), sspprriinnttff(()) and ffpprriinnttff(()) functions will now look for
     an ll modifier (as in ""%%lldd"", %%llxx"", etc.)  in the format string
     specifications for integers and if an ll is present, will convert the double
     valued ssppeecc variable to a 64-bit integer.

New pplloott__ccnnttll((""rraaiissee"")) Option
     A new ""rraaiissee"" option to the pplloott__ccnnttll(()) function will raise the X11 plot
     window to the top of the desktop stacking order.

Auto-raise Behavior Of X11 Plots Updated
     The auto-raise behavior of the X11 plot windows is now disabled by default.
     However, the standard macro sspplloott used from the keyboard will use the new
     ""rraaiissee"" option to pplloott__ccnnttll(()) to make the plot visible.  New options
     available in the sseettpplloott macros allow one to choose if the plot should be
     raised as each point is added to plotting during scans and whether the plot
     should be raised at the end of the scan.  The pplloott macro called at the end
     of scans has been revised to accommodate the optional raise feature.

     If the auto-raise behavior is enabled in one's ~~//..XXddeeffaauullttss file or has
     been turned on for a particular instance of xx1111ffiilltt using the ""ccmmdd==99110099""
     plot_cntl() option, the old default behavior will be restored and the plot
     window will be raised to the top of the stacking order each time a point is
     added and at the end of a scan, regardless of the sseettpplloott configuration.
     See the _x_1_1 help file for details on the auto-raise feature.

Improved Support For Very Long Strings
     This release fixes crashes with strings longer than 8,192 bytes in certain
     contexts, such as when used as the prompt string in the iinnppuutt(()), yyeessnnoo(()),
     ggeettvvaall(()) and ggeettssvvaall(()) functions and when part of error messages, such as
     with syntax errors.

New Help Infrastructure
     This ssppeecc release has a redesigned help facility.  The internal help file
     parser and formatter have been removed and formatting is now handled by the
     standard ggrrooffff and related utilities.  Both the built-in help display and
     the stand-alone cchheellpp program automatically stream formatted help files
     through the lleessss pager with output sized to the width of the window.

     The help files are now authored in reStructuredText (reST) format and
     converted to ggrrooffff input format for ssppeecc (or HTML for the _c_e_r_t_i_f_._c_o_m
     website) using PPyytthhoonn tools.  The new help files are located in a new
     SSPPEECCDD//ssppeecc__hheellpp directory.

     For sites with local help files conforming to the old format conventions,
     ssppeecc (and the cchheellpp utility) will check the old SSPPEECCDD//hheellpp directory for
     the topic if a corresponding file is not in the new directory.  Files from
     the old directory will be formatted and displayed using ggrrooffff macros
     compatible with the old ssppeecc help file formatting conventions.

     The text processing utilities ttbbll and ggrrooffff (or nnrrooffff) are required to
     reformat the help files to match the screen size.  If unavailable, help
     files preformatted for 80-column screen windows, which are included in the
     ssppeecc distribution, will be displayed.  In addition, even if the text
     utilities are available, if the current screen window is between 80 and 92
     columns, the preformatted files will be displayed.

     The initial processing of the standard reST help source documents to ggrrooffff
     format is done at CSS HQ and the derived ggrrooffff-format files are included in
     the ssppeecc distribution.  However, the reST source files and CSS's customized
     front end to the PPyytthhoonn Docutils package, rrsstt22mmaann, are included in the ssppeecc
     distribution. Files given as arguments to the built-in ggeetthheellpp(()) function
     or to the stand-alone cchheellpp utility that end with the ..rrsstt suffix will be
     processed through ssppeecc's rrsstt22mmaann script, if suitable versions of PPyytthhoonn and
     Docutils are available.

New ssppeecc..ccoonnff File
     The ssppeecc IInnssttaallll script now creates a file called ssppeecc..ccoonnff in the SSPPEECCDD
     auxiliary file directory.  Currently, the file contains paths and options
     associated with the new help infrastructure, but in the future additional
     configuration will reside in that file.  The IInnssttaallll script invokes a
     script called iinnssttaallll__ssppeecc__ccoonnff to create ssppeecc..ccoonnff.  If the ssppeecc..ccoonnff file
     is missing or contains inaccurate information and the default values built
     into ssppeecc don't match the current system configuration, the help facility
     may not function correctly.  The iinnssttaallll__ssppeecc__ccoonnff script can be invoked
     independently from within the ssppeecc distribution directory.

Legacy PPRRIINNTTEERR References Removed From Standard Macros
     The references to the PPRRIINNTTEERR and related variables (PPPPRRNNTT, PPFFMMTT) have been
     removed from the standard macros, as have the iiffpp and oonnpp statements along
     with references to llpp__pplloott macro.  CSS is confident that all the dedicated
     line printers once used to produce real-time hard-copy documentation of
     ssppeecc sessions and scan data  have long since been retired.  Eliminating the
     legacy references makes the standard ssppeecc macros a bit easier to follow.
     Any user who may have been assigning a filename to the PPRRIINNTTEERR variable to
     create logs of ssppeecc activity should consider using the special ttlloogg
     log-file facility that records all output that is sent to the screen to a
     file.

Fix For Obscure ffoorr ((vvaarr iinn aarrrr)) Bug
     An old issue where the usage

        ffoorr ((vvaarr iinn aarrrr)) {{
                ......
                ccoonnttiinnuuee
        }}

     would generate a "unexpected break/continue" error has been fixed.  A
     ccoonnttiinnuuee statement as the last statement in a ffoorr-loop body is an unlikely
     usage, thus explaining while the bug has gone unreported for sixteen years.

Repeated Commands Not Saved In History
     When linked with the lliibbeeddiitt or rreeaaddlliinnee command-line editing libraries,
     identical consecutive commands will now be saved only once in the command
     history queue.  Note, that also means the history number included in the
     ssppeecc prompt will not increment if the exact same command as the previous is
     entered from the keyboard.

Updated LLiinnuuxx uuddeevv Rules File
     ssppeecc installs the file //eettcc//uuddeevv//rruulleess..dd//1100--ssppeecc__uussbb..rruulleess for the benefit
     of the device manager feature present on modern LLiinnuuxx platforms.  The rules
     grant general read/write permission to the USB device nodes associated with
     hardware used with ssppeecc, unbind certain devices from the human interface
     device (HID) subsystem and create special device nodes for certain
     hardware.  Like many kernel and system features on LLiinnuuxx, the
     implementation is something of a moving target.  This update reflects the
     latest uuddeevv implementation, but continues to work with previous versions.
     This ssppeecc release contains new rules to handle the HID unbinding needed for
     Measurement Computing's USB devices with the newer uuddeevv implementations.

     The ssppeecc IInnssttaallll script now invokes a new iinnssttaallll__uuddeevv__rruulleess script that
     tailors the rules file to the current platform.  The iinnssttaallll__uuddeevv__rruulleess
     script can also be invoked independently from within the ssppeecc distribution
     directory.

Work Around For Underlying Problem With EPICS Motor Record
     This ssppeecc release includes a work around for an underlying problem with
     EPICS that can sometimes send events out of order.  The issue would
     manifest when ssppeecc might receive the final position event of a move before
     the end-of-move event, contrary to the expected behavior for the standard
     EPICS motor record.  In ssppeecc release 5.08.01-4 (June 2008), the EPICS motor
     record support was changed to use event-based position reporting in order
     to eliminate unnecessary network channel access calls.  However, after that
     update at least one user reported sometimes seeing ssppeecc position data in
     scans reflecting stale position information.

     The issue with EPICS events arriving out of order is a known issue and
     should be resolved in the forthcoming EPICS 3.15 release.  Additional
     information regarding the strict-ordered-event-queue can be found at the
     _E_P_I_C_S _b_a_s_e _l_a_u_n_c_h_-_p_a_d _s_i_t_e.

     In the meantime, ssppeecc support for the EPICS motor record has been modified
     to do an explicit channel access read of the motor position after a
     move-complete event.  Other than that case, motor position information will
     be event driven.

Change For ENUM EPICS Data Types With eeppiiccss__ppuutt(())
     Previously, the user-level eeppiiccss__ppuutt(()) function sent ENUM values as a
     DDBBFF__SSTTRRIINNGG type.  That could lead to ambiguities in a situation where an
     EPICS process variable had a enumeration table such as the following:

         String   Index
         Value    Value
         "1"      0
         "2"      1
         "3"      2

     ssppeecc will now use DDBBFF__SSTTRRIINNGG for string-valued arguments to eeppiiccss__ppuutt(()) and
     DDBBFF__EENNUUMM for number-valued arguments.  ssppeecc can distinguish input of the
     string ""11"" from the number 11.  This change also serves as a workaround to a
     known problem with EPICS base built using the Windows compiler where
     numbers sent as DDBBFF__SSTTRRIINNGG type for DDBBFF__EENNUUMM process variables would not be
     recognized.

Fix For Crash With Out-Of-Range Channel Number
     An old bug which could lead to a segmentation fault if a very out-of-range
     channel number was passed to the functions mmoottoorr__ppaarr(()), ccoouunntteerr__ppaarr(()) or
     cchhgg__ooffffsseett(()) has been fixed.

Support For Ketek DPP2 MCA
     This ssppeecc release includes initial support for the Ketek DPP2 digital pulse
     processor, as used in the GE Measurement & Control Meteor0D energy
     dispersive X-ray detector.  See the _k_e_t_e_k help file for details.

Support For OMS UMX Motor Controller
     ssppeecc now includes support for the new OMS UMX model motor controller on
     LLiinnuuxx and Mac OS X platforms.  The UMX has a USB interface but appears as a
     serial device if the appropriate kernel drivers are installed.  See the _o_m_s
     help file for details.

changes                      spec 5.10 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 5.10

August 7, 2012 - RELEASE 5.10.02-17

Blank Lines Allowed Again In ccoonnffiigg File
     Recent updates inadvertently led to blank lines in the ccoonnffiigg file
     generating error messages in ssppeecc.  That issue has been fixed.

Fix For Off-by-one Motor Number Display In Certain Messages
     An issue with the support for the EPICS motor record and the Newport Agilis
     controller, where several motor-related messages (including hard-limit
     reports) gave a channel number off by one, has been fixed.

Fix For Recently Introduced Crash When Using ISA Am9513 Card
     Changes in the Am9513 support in the previous ssppeecc release introduced a bug
     that could cause ssppeecc to crash when using other than PCI models.  That bug
     is fixed.

June 27, 2012 - RELEASE 5.10.02-16

Large File Support On 32-Bit Platforms
     The 32-bit architecture versions of ssppeecc are now compiled with large file
     support.  It should now be possible to use the ssppeecc built-in output
     functions to add data to files larger than 2.15 gigabytes.

Fix For Attocube ANC350 Support
     A bug that was part of the original ssppeecc ANC350 support, where actuators
     with particular values for the the step-width parameter would be marked
     unusable, has been fixed.

Additional Fixes For Am9513 Use With Multiple PCI Cards
     The support for multiple PCI Am9513 cards has been fixed.  It is unclear
     whether a configuration with multiple PCI Am9513 had ever been working.
     Such a configuration does work in the current release.  In addition, the
     ADDR field of the configuration editor can be used to set the PCI bus and
     slot IDs to distinguish among multiple cards.

June 18, 2012 - RELEASE 5.10.02-15

Fix For Am9513 With Multiple PCI Cards
     A recently introduced bug, where ssppeecc would hang if using more than one
     Am9513 PCI card, has been fixed.

Fix For Inserting Motors In Configuration Editor
     A bug associated with inserting a new motor channel on the MMotor screen of
     the configuration editor has been fixed.  Previously, any existing
     non-standard optional parameters would be copied from the neighboring motor
     channel to the inserted motor and changing the value of one of those
     parameters for either of the motors would change the value for both motors.

Fix For ssppeecc Standard Output With lliibbeeddiitt
     A "feature" added to the upstream lliibbeeddiitt source in early 2011 disabled
     command-line editing if the linking program's standard output was not a ttttyy
     device.  For users who piped ssppeecc's output through a program such as the
     tteeee utility to make a copy of ssppeecc's standard output to a file, the ssppeecc
     prompt would not be seen and command line editing would be disabled.  The
     libedit version now distributed with ssppeecc disables that feature of the
     standard lliibbeeddiitt distribution, restoring the previous behavior.  As usual,
     the version of libedit used with ssppeecc can be downloaded at
     _c_e_r_t_i_f_._c_o_m_/_d_o_w_n_l_o_a_d_s_/_e_x_t_r_a_s.  Note, to make a log of ssppeecc's tty output, CSS
     recommends using a ttlloogg file rather than the tteeee utility.

May 29, 2012 - RELEASE 5.10.02-14

Fix For wwaaiitt(()) With Some MCA Models
     An issue when using the wwaaiitt(()) function to determine when counting had
     finished with certain MCA devices active with ""aauuttoo__rruunn"" mode on and
     ""ssoofftt__pprreesseett"" mode off has been fixed.  The problem was due to ssppeecc
     considering the MCA done after sending the halt command, but prior to the
     device acknowledging it had stopped.  The EPICS MCA was particularly
     affected.  The code for the SEIKO EG&G MCA 7700, the Bruker Vantec-1 and
     the Ortec PCI MCS had the same defect, but the consequences were unlikely
     to be noticed.

Fix For Number of Channel Configuration For Some Controllers
     A recently introduced issue with channel configuration for certain
     controllers where channels are numbered starting from one in the
     configuration file has been fixed.  The last channel configured would
     generate a "not enough channels on unit" message unless the number of
     channels on the DDevices screen of the configuration editor was increased by
     one.  Affected controllers were the Attocube ANC300, EPICS motor record,
     JVL SMI20B, Munich BR-tronik IPS, Newport Agilis, PI E-712 and Sigmatech
     FC-501A.

May 19, 2012 - RELEASE 5.10.02-13

Fix For GPIB-ENET Reads
     A bug, introduced in the ssppeecc release 5.10.02-3 update to support the
     GPIB-ENET/1000 modules, where GPIB-ENET reads would fail if the read count
     had bit 7 or 15 set, has been fixed.

May 17, 2012 - RELEASE 5.10.02-12

Fix For Signal Handling When Using TANGO GPIB
     A bug, where ssppeecc could crash when the new TANGO GPIB device server was
     configured and software signals associated ^^CC or the software timer were
     raised, has been fixed.

Fix For Channel Count For TACO VCT6
     A recently introduced issue, where it became necessary to configure the
     number-of-channels parameter on the DDevices screen of the configuration
     editor with one more channel than needed when using the TACO VCT6 device
     server, has been addressed.

May 12, 2012 - RELEASE 5.10.02-11

New ""ttiimmeessttaammpp"" Option For eeppiiccss__ppaarr(())
     A new ""ttiimmeessttaammpp"" option is available with the eeppiiccss__ppaarr(()) function to
     return the EPICS timestamp associated with a process variable.  See the
     _e_p_i_c_s help file for details.

Fix For Using Named Pipes As Output Devices
     A problem with ssppeecc hanging when opening a named pipe when no process had
     the named pipe open for reading has been fixed.

New "bbll1188bb" ssuurrff Geometry
     A new liquid surface diffractometer geometry for beamline BL18B at the
     Photon Factory is included in this ssppeecc release.

May 8, 2012 - RELEASE 5.10.02-10

Fix For EPICS Crash
     On certain platforms, use of eeppiiccss__ppuutt(()) with the optional third argument
     to have the code wait for a callback to indicate the value has been sent
     resulted in a segmentation fault.  The crash might also appear when reading
     using the built-in EPICS serial device support.  The problem has been
     fixed.

Update To Recognize New Model Tsuji Counter
     This ssppeecc release will recognize the new Tsuji model CT08-01D
     counter/timer.

May 5, 2012 - RELEASE 5.10.02-9

Fix For Recently Introduced Bug With PCI Am9513
     The configuration updates included in ssppeecc release 5.10.02-1 introduced a
     bug that could cause a segmentation fault when a PCI Am9513 was configured.
     This release fixes that problem.

TACO Serial Driver Support Reversions
     The changes to the support for TACO serial driver introduced in ssppeecc
     release 5.10.02-3 to display additional error messages have been removed.
     However, an issue where HHDDWW__EERRRR could be incorrectly set when reading a
     serial device has been fixed.

April 6, 2012 - RELEASE 5.10.02-8

Fix For Slow Reads Using Built-In NI PCI-GPIB Support
     A timing issue with ssppeecc's built-in support for the National Instruments
     PCI-GPIB controller, where GPIB reads of large blocks of data (on the order
     of 10,000 bytes or more, depending on the transfer rate) could take much
     longer than necessary, has been fixed.

April 2, 2012 - RELEASE 5.10.02-7

More Controllers Allowed In Configuration
     The maximum number of motor controller and timer/counter entries on the
     DDevices screen of the configuration editor has been increased from 40 to
     64.  In addition, a bug where the configuration editor could crash if there
     were more than the allowed number of controllers in the ccoonnffiigg file has
     been fixed.

Fixed ddeeccooddee(()) Function
     A bug, where the newly added ddeeccooddee(()) function did not allow assignment of
     its return value when the return value was an associative array, has been
     fixed.

Updates For Micos MMC-100
     A problem where ssppeecc would consider a move complete too early with the
     newly added Micos MMC-100 support has been fixed.  In addition, a new
     ""iinniittiiaalliizzee"" mmoottoorr__ppaarr(()) option is available to locate the limit and home
     position of a stage.  See the _m_m_c_1_0_0 help file.

Update For New Struck SIS1100ecmc Model
     The hardware signature of Struck's new SIS1100ecmc 2G link PCIe-to-VME
     adapter is now recognized by ssppeecc's driverless built-in support.

Fixed ANC300 Support
     A bug in the newly added support for the Attocube ANC300, where ssppeecc could
     crash if a controller was configured but not connected, has been fixed.

OMS Motor Controller Updates
     ssppeecc will now allow up to ten channels per controller for the OMS MAXnet
     controller in order to work with the new models.  Also, a bug, where the
     ""iinniitt__sseeqquueennccee"" parsing did not recognize the BBDD command to configure
     digital I/O direction, has been fixed.

OMS Motor Multiplexing Fixed and Updated
     The configuration updates in ssppeecc release 5.10.02-1 broke the old motor
     multiplexing support in the OMS code.  The code been brought up to date and
     is working again.  In addition, the support now allows a multiplexed
     channel for each controller module.  Previously, only one multiplexed
     channel was allowed among all the controllers.  With multiplexing, one OMS
     channel can drive up to sixteen motors.  ssppeecc uses five digital output
     lines on the OMS controller to control external hardware that switches the
     motor driver power lines among the multiplexed motors.  See the new section
     on multiplexing in the _o_m_s help file for details.

March 14, 2012 - RELEASE 5.10.02-6

Fix For Serial Support On LLiinnuuxx
     Some kernel-level serial device drivers on LLiinnuuxx did not work with the
     updated code in ssppeecc to set baud rates introduced in ssppeecc release
     5.08.06-4.  In particular, problems have been seen with drivers for
     Prolific PL2303 USB-to-serial adapters and for the Rayon Multiport PCI
     cards.  This ssppeecc release should fix the issue.

March 11, 2012 - RELEASE 5.10.02-5

Support For Micos MMC-100 Motor Controller
     This ssppeecc release includes preliminary support for the Micos MMC-100
     Modular Motion Controller System.  See the _m_m_c_1_0_0 help file for
     implementation details.

Updates For OMS Support
     Values for the standard optional motor parameters ""ddcc__iinntteeggrraattiioonn__lliimmiitt"",
     ""ddcc__vveelloocc__ffeeeeddffoorrwwaarrdd"" and ""ddcc__aacccceell__ffeeeeddffoorrwwaarrdd"" will now set the KKUU, KKVV
     and KKAA OMS parameters, respectively.  The non-standard optional motor
     parameter ""ppiidd__ooffffsseett"" will program the KKOO OMS parameter.  A new
     ""cclloosseedd__lloooopp"" mmoottoorr__ppaarr(()) non-standard optional parameter can
     disable/enable closed-loop mode during a session or from the ccoonnffiigg file.
     When using servo motors, the code will now query the encoder status during
     moves to detect moves interrupted by a slip if slip detection is enabled.
     For firmware versions greater than 1.30, ssppeecc now will send the new
     commands for a number of deprecated commands.

Fix For USB-4300 ""ggeett__bbiitt"" Command
     An issue where the ""ggeett__bbiitt"" option to the ccoouunntteerr__ppaarr(()) function for the
     Measurement Computing USB-4300 series timer/counters didn't return the
     correct value has been fixed.

Fix For Allowed GPIB Addresses
     Previously, ssppeecc allowed GPIB device address 31 to be passed to the GPIB
     controller support code.  The maximum valid address is 30, and ssppeecc now
     respects that.

Support For TANGO GPIB Server
     ssppeecc supports release 1.0 of the TANGO GPIB device server.  All of the
     existing GPIB support, including the user-level commands such as ggppiibb__ggeett(())
     and ggppiibb__ppuutt(()), along with the built-in support for motor controllers,
     counter/timers and other devices that use GPIB should work if the ""TTAANNGGOO
     GGPPIIBB sseerrvveerr"" interface is selected in the hardware configuration editor.

New TANGO Options To Obtain Attribute Information
     Additional options are available to the ttaannggoo__ggeett(()) function to display or
     return all available descriptive attribute properties.  See the _t_a_n_g_o help
     file for details.

Fix For NI 6601/2 Unavailable Channel Access
     A bug, where ssppeecc could crash if an unavailable National Instruments 6601
     or 6602 counter channel was accessed with ccoouunntteerr__ppaarr(()), has been fixed.

January 5, 2012 - RELEASE 5.10.02-4

Fix For Linked Configurations
     A issue when using linked ccoonnffiigg files that was introduced in ssppeecc release
     5.10.01-9 where in some configurations ssppeecc would quit immediately after
     reading the hardware configuration with a message of the sort "user():  Not
     configured for motor ..."  has been fixed.

December 28, 2011 - RELEASE 5.10.02-3

Support For NI GPIB-ENET/1000
     ssppeecc will now work with the National Instruments GPIB-ENET/1000 using
     ssppeecc's built-in support.  The programming for the GPIB-ENET/1000 is a bit
     different than that for the GPIB-ENET/100 and the GPIB-ENET models, which
     continue to be supported.

Restored Compatibility With NI LLiinnuuxx Drivers
     ssppeecc can now be linked with release 2.9.0 of the National Instruments GPIB
     drivers on LLiinnuuxx, although use has not been well tested and isn't
     recommended.  Use of ssppeecc's built-in GPIB support is preferred.  See the
     _n_i_g_p_i_b help file for details.

Update For Newport SMC100 Controller
     A too short serial timeout for the Newport SMC100 controller has been
     fixed.

Update For Newport NSC200 Controller
     Checks on maximum values for the velocity and acceleration when using the
     Newport NSC200 motor controller have been removed, as the maximum values
     built into the software were too low for some actuator models.  ssppeecc will
     now program the values requested.  Users should make sure the configured
     values do not exceed the specifications for the particular actuator model.

Preliminary Support For the Attocube ANC300
     This ssppeecc release contains preliminary support for the Attocube ANC300
     controller.  The current release is only for controllers with one active
     channel.  Updated support will be provided when the ANC300 firmware is
     updated to accommodate easier programming of multi-channel configurations.

Update For Attocube ANC350 Support
     ssppeecc now recognizes the ""ttaarrggeettggrroouunndd"" parameter for the Attocube ANC350
     positioner.

Trinamic Check-For-Reset Feature Updated
     The check-for-reset feature for Trinamic motor controllers, implemented in
     ssppeecc release 5.09.01-1, will now also restore motor position when restoring
     parameters.

TACO Serial Driver Update
     Some error messages associated with the TACO serial device that had been
     suppressed are now shown.

Update For Miscellaneous State File Data
     Some internal improvements have been made for the handling of certain
     miscellaneous data that is saved in the user state file.  Such data
     includes ssppeecc__ppaarr(()) parameters and some persistent hardware parameters.  In
     most cases, the data will now be properly restored if saved by one computer
     and read by another of different endianess, such as an Intel PC (little
     endian) and a Sun SPARC station (big endian).

New Option For sshhooww__ssttaattee Command
     The sshhooww__ssttaattee command now includes a new ++//--xx option to show or not show
     miscellaneous values, which include the ssppeecc__ppaarr(()) parameters and some
     persistent hardware parameters.  Only the values are displayed, not the
     parameter descriptions.

November 8, 2011 - RELEASE 5.10.02-2

Support For SmarAct Controller
     ssppeecc now supports the SmarAct GmbH Modular Control System for micro- and
     nanopositioning.  The support is for the serial interface.  See the new
     _s_m_a_r_a_c_t help file for details.

October 25, 2011 - RELEASE 5.10.02-1

New Option to Disable Controllers In Configuration Editor
     A new option is available to disable the configuration of motor and counter
     controllers, interface controllers, serial devices, MCA-type devices and
     image-type devices from the eeddccoonnff configuration editor without removing
     the configuration from the ccoonnffiigg file.  The YES/NO column of the
     configuration for each of these items now has an additional OFF option,
     which can be selected by typing an OO or an oo.  When ""ooffff"", the
     configuration information will remain in the ccoonnffiigg file, but ssppeecc will
     treat the controller or device as disabled and not access it.

Macro Hardware MCA Update For Returned Count
     The macro-hardware MCA implementation for the commands ""rreeaadd"" and ""wwrriittee""
     now accepts a return value for the number of points actually read or
     written.  The value will determine how many data elements will be
     transferred to the spec data array when mmccaa__ggeett(()) is called with an array
     argument and will be the return value for the mmccaa__ggeett(()) and mmccaa__ppuutt(())
     functions when called with group/element arguments.  See the _m_a_c___h_d_w help
     file for additional details.

October 21, 2011 - RELEASE 5.10.01-14

Fix For Number Of Generic Serial Devices
     The eeddccoonnff hardware configuration editor allows 21 generic serial devices
     to be configured, but prior to this release, ssppeecc only allowed 20 to be
     opened.

October 18, 2011 - RELEASE 5.10.01-13

Fix For Tsuji Counter Update
     A problem with the previous update for the Tsuji counter/timers that
     prevented proper operation of the devices on some platforms has been fixed.

October 9, 2011 - RELEASE 5.10.01-12

Fix For cchhgg__ddiiaallss(()) Crash Bug
     An old bug, where ssppeecc could crash if cchhgg__ddiiaallss(()) was called to perform a
     limit search using an out-of-range motor number, has been fixed.

Updated Support For Tsuji Counters
     The built-in support for the various models of the Tsuji counter/timers has
     been updated.  A reset command is no longer sent on hardware
     initialization.  Settings for certain internal parameters, such as maximum
     allowed preset and preset resolution, are now correctly assigned based on
     the capabilities of the specific model detected during the presence test.

Attocube ANC350 Support Now Includes Limit Searches
     Limit searches using the ""lliimm++"" and ""lliimm--"" options to cchhgg__ddiiaall(()) are now
     available for the Attocube ANC350 controller.  See the _a_t_t_o_c_u_b_e help file.

Support For Radicon SCSD-3C
     This ssppeecc release includes support for the Radicon SCSD-3C X-ray
     scintillation detector with integrated timer/counter.  See the _r_a_d_i_c_o_n help
     file for details.

October 1, 2011 - RELEASE 5.10.01-11

Fix For USB Support On openSUSE 10.0 and 10.1
     The USB devices supported by ssppeecc should now work with the old openSUSE
     10.0 and 10.1 LLiinnuuxx releases.

Preliminary Support For Physik Instrumente E-516 Motor Controller
     This ssppeecc release includes initial support for the Physik Instrumente E-512
     controller over serial and GPIB interfaces.  Contact CSS for implementation
     details.

September 26, 2011 - RELEASE 5.10.01-10

Fix Of Bug In Previous Release That Leads To an Early Exit
     This minor update fixes a bug that was put into the previous release and
     that would cause ssppeecc to terminate during initial hardware configuration if
     there was a position discrepancy that was resolved in favor of the motor
     controller.

September 23, 2011 - RELEASE 5.10.01-9

Fix For eevvaall(()) Return Of Associative Array
     The stricter validation for assignment of associative arrays implemented in
     ssppeecc release 5.09.2-2 disabled the ability to return associative arrays
     from the eevvaall(()) function, which also broke the behavior when using the
     rreemmoottee__eevvaall(()) function with a ssppeecc server.  That problem has been fixed.

Improvements For "Commanded" Position, Reversion Of mmvvrr Macros
     Several instances where the value for the last-commanded position of a
     motor was incorrect have been fixed.  (The last-commanded position is
     available with the new mmoovvee__iinnffoo(()) function and a new option to
     rreeaadd__mmoottoorrss(()), both introduced in ssppeecc release 5.10.01-1.  The
     last-commanded position saves the requested target position to the fully
     specified resolution, while the usual motor position is rounded to the
     motor step size.  Using the last-commanded position to calculate target
     positions in relative moves allows one to perform successive relative moves
     in increments less than the motor resolution.)  The last-commanded position
     will now be set to the current motor position on a fresh start (with the --ff
     flag), when leaving simulate mode, and after correcting a position
     discrepancy where the software position or user offset was adjusted to
     match the hardware.  Although the updated mmvvrr and uummvvrr included in release
     5.10.01-1 should work fine for most users most of the time, the previous
     definitions have been restored for the time being while CSS works to make
     sure the last-commanded position feature is as robust as possible.  The
     definitions that use the last-commanded position are still available as
     mmvvrr22 and uummvvrr22.

September 15, 2011 - RELEASE 5.10.01-8

String Values Now Available For eeppiiccss__ggeett(()) Character Arrays
     When reading arrays of DDBBFF__CCHHAARR with eeppiiccss__ggeett(()), if the optional argument
     that specifies the desired type of the return value is specified as
     ""ssttrriinngg"", ssppeecc will now return an ordinary string.  Previously, the
     function would return a single-row string data array.  See the _e_p_i_c_s help
     file.

September 10, 2011 - RELEASE 5.10.01-7

Fix For Canberra Lynx MCA Issues After ^^CC
     A problem with the Canberra Lynx MCA, where socket communications could
     become disrupted if a transaction was interrupted by a a keyboard ^^CC, has
     been fixed.

Fix For State File Locking On Mac OS X
     Normally, ssppeecc prevents the same user from starting multiple instances of
     the same ssppeecc version.  A problem on Mac OS X, where the locking mechanism
     didn't always work correctly with more than ten terminal windows open, has
     been fixed.

Fix For GPIB Sharing With Built-in NI GPIB Support
     A problem where the sharing feature for GPIB controllers wasn't working
     with the built-in support for some of the National Instruments GPIB models
     has been fixed.

September 4, 2011 - RELEASE 5.10.01-6

Prompt Now Indicates Simulate Mode
     The ssppeecc prompt will now contain text to indicate when simulate mode is
     active, as in 112233..FFOOUURRCC__ssiimm>> .

MMuu Pseudomotor Available For Six-Circle Geometry
     The six-circle geometry, ssiixxcc, now recognizes a configuration where the mmuu
     rotation involves two real motors, mmuuTT and mmuuRR.  See the _s_i_x_c help file.

Fix For Recently Created Pseudomotor Issue
     An oversight in ssppeecc release 5.10.01-3 that removed the ability to use
     mmoottoorr__ppaarr(()) to retrieve arbitrarily configured unit and channel numbers for
     motors with the NNOONNEE controller type has been remedied.

Fix For EPICS Debugging Messages
     A bug, where the values printed at debug level 128 for the eeppiiccss__ppuutt(())
     command were incorrect for non DDBBFF__DDOOUUBBLLEE number-valued process variables,
     has been fixed.  The bug only affected the debugging output, not the values
     sent through the EPICS channel access calls.

Update For Attocube Controller
     The Attocube ANC350 controller support has been updated to work better with
     the firmware problem where the controller can take hundreds of milliseconds
     to report a motor is busy after ssppeecc sends a move command.

Fix For Number Of Channels For Huber SMC 9300 Controller
     A bug, introduced in ssppeecc release 5.09.01-3 and associated with the update
     to the Huber SMC 9300 support for simultaneous motor starts, where the
     highest numbered motor channel wouldn't move unless the number of motor
     channels configured was one more than needed, has been fixed.

August 12, 2011 - RELEASE 5.10.01-5

Fix For Motor Sync Issue With ssppeecc Client
     A bug, where a ^^CC on a ssppeecc client could be ignored during a move of a
     motor on a ssppeecc server, has been fixed.  The issue only occurred if the
     server had sent the client a ""ssyynncc__cchheecckk"" message that initiated a motor
     discrepancy dialog on the client.  (The bug was related to improper
     settings of the keyboard-input modes after the discrepancy dialog.)

Fix For Setting Certain MCA Parameters On Unresponsive Unit
     The mmccaa__ppaarr(()) commands ""aauuttoo__cclleeaarr"", ""aauuttoo__rruunn"" and ""ssoofftt__pprreesseett"" can now
     be used to set those modes on MCA devices that are configured, but not
     responsive.  In particular, for the EPICS MCA (which isn't flagged as
     responsive until all the registered connection events arrive), the
     mmccaa__ppaarr(()) commands can now be used immediately after reading the ccoonnffiigg
     file.  For example, the commands can be included in the definition of
     ccoonnffiigg__mmaacc, which will generally execute before the EPICS MCA is fully
     connected.

Fix For EPICS MCA Polling During wwaaiitt(())
     A bug, where EPICS events were not processed during a call of wwaaiitt(()) or
     wwaaiitt((00)) if the only EPICS device that was busy was the EPICS MCA, has been
     fixed.

Fix For TANGO Commands
     Implementation of data-array type conversions for ttaannggoo__ppuutt(()) input
     arguments has been completed.  Previously, if the type of the data array
     passed to ttaannggoo__ppuutt(()) didn't match TANGO's expected data type, incorrect
     data could be sent.  Also, a bug with the ttaannggoo__iioo(()) and ttaannggoo__ppuutt(())
     functions with 64-bit ssppeecc builds, where incorrect values were sent when
     converting elements of an input associative array to TANGO long (32-bit)
     data types, has been fixed.

sseerr__ppaarr(()) ""qquueeuuee"" Implemented For TACO Serial Devices
     The sseerr__ppaarr(()) ""qquueeuuee"" option is now implemented for the TACO serial device
     server.

July 1, 2011 - RELEASE 5.10.01-4

Fix For OMS Position Maintenance With Negative Encoder Ratio
     A problem, where the Oregon Micro Systems position-maintenance mode would
     not work if the encoder-step-size parameter had the opposite sign of the
     standard step-size parameter, has been fixed.

June 22, 2011 - RELEASE 5.10.01-3

Fix For Calculational Pseudomotors In Server Mode
     A problem, where ssppeecc would get stuck waiting for a move to finish in the
     seldom encountered configuration of running in server mode with a
     calculational pseudomotor (using the macro hardware feature) having an
     associated real motor configured as controller type NNOONNEE, has been fixed.

June 20, 2011 - RELEASE 5.10.01-2

Fix For GPIB-ENET Issues On ^^CC
     An issue with some built-in hardware controlled over GPIB using the
     National Instruments GPIB-ENET interface, where a ^^CC interrupt would lead
     to a breakdown in communications with the GPIB-ENET, has been fixed.

June 6, 2011 - RELEASE 5.10.01-1

New mmoovvee__iinnffoo(()) Function
     A new mmoovvee__iinnffoo(()) function returns information about what would happen on a
     subsequent mmoovvee__aallll command given the current motor positions and current
     values in the AA[[]] array.  The information returned can include a list of
     motors that would be moved.  See the new _m_o_v_e___i_n_f_o help page for details.

New "Commanded" Motor Position Value Available With rreeaadd__mmoottoorrss(())
     ssppeecc now retains the value of the commanded motor position passed to the
     move code via the motor position AA[[]] array.  The value is retained to the
     full precision specified, which can be higher precision than the normal
     motor positions, which are rounded to the step size of the motor.  A new
     option to the built-in rreeaadd__mmoottoorrss(()) function will return this commanded
     position.  If called as rreeaadd__mmoottoorrss((00xx1100)), the commanded positions for all
     motors will be placed in the AA[[]] array.  If called as rreeaadd__mmoottoorrss((00xx1100,,
     mmnnee)), the function will return the commanded position for motor mmnnee,
     leaving the AA[[]] array unchanged.  The commanded position is set to the
     current (rounded) position on start up, after hardware reconfiguration, at
     the end of a homing operation, after hitting a limit, with a cchhgg__ooffffsseett(())
     command (called by the sseett macro) and when a move is aborted by ^^CC or an
     emergency stop.

Revised __mmvvrr Macro Uses Commanded Position
     The standard __mmvvrr macro (used by mmvvrr and uummvvrr) has been updated to use the
     new commanded-position return value of rreeaadd__mmoottoorrss(()) to calculate the
     target position of the relative move.

New eennccooddee(()) and ddeeccooddee(()) Functions
     New built-in functions eennccooddee(()) and ddeeccooddee(()) are available to convert
     between ssppeecc data types and data-serialization formats to aid in exchanging
     data with other processes.  See the new _e_n_c_o_d_e help file for details.

New Macro Hardware MCA Functionality
     The macro hardware feature now includes support for MCA devices, in
     addition to the existing support for motors and counter/timers.  See the
     _m_a_c___h_d_w help file for details.

Restored Auto-Raise Functionality to X Window Plots
     The focus-stealing-prevention functionality that has appeared in window
     managers over the last years broke the auto-raise feature of ssppeecc's X
     Window plots.  With the auto-raise feature enabled, hidden or partially
     hidden plot windows rise to the top when ssppeecc updates the plot.  This
     release restores the auto-raise functionality.  See ssppeecc's _x_1_1 help file
     for details on setting plot window options.

Fix For Early Read Of Counters In Server Mode
     In server mode, while waiting for command input, ssppeecc will periodically
     issue calls to read the active scalers and cache the values in order to be
     able to respond to client requests for scaler values without needing to
     access the hardware.  Previously, as part of this procedure, the counters
     would be read immediately after starting the time count interval.  Now,
     that first read won't occur immediately.  The change will be noticed
     particularly in the sequence of calls to macro counter __ccmmdd(()) functions.

Enhanced Support For 2D Associative Arrays With vvaarr iinn Syntax
     The syntax related to querying 2D associative arrays with a known second
     element, as in

         ffoorr ((vvaarr iinn aarrrr[[]][[kkeeyy]])) pprriinntt aarrrr[[vvaarr]][[kkeeyy]]

     and

         iiff ((vvaarr iinn aarrrr[[]][[kkeeyy]])) ......

     is now supported.  Previously, such usage produced a syntax error.

Support For DDEEVV__EENNCCOODDEEDD ttaannggoo__iioo(()) Type
     This ssppeecc release supports the current implementation of the new
     DDEEVV__EENNCCOODDEEDD data type for the ttaannggoo__iioo(()) function as used at ESRF and
     elsewhere.

Fix For Crash When Using Empty Macro Functions
     A segmentation fault that sometimes occurred when using macro functions
     defined as an empty string (no curly brackets) in particular contexts has
     been fixed.

Fix For TACO MCA Access Of Disabled Units
     A bug, where ssppeecc would access the device state on a call of disabled (via
     the ""ddiissaabblleedd"" key for the mmccaa__ppaarr(()) function) TACO MCA device-server
     units, has been fixed.

Fix For Mistaken "Duplicate Channel" Error
     An issue with a handful of hardware controllers (EPICS motor record, ESRF
     VCT6, JVL SM120B, Munich BR-tronik IPS, Newport Agilis and Sigmatech
     FC-501A), where a ""dduupplliiccaattee cchhaannnneell"" error message would sometimes be
     erroneously displayed during hardware configuration when a channel number
     was the same as the configured number of channels, has been fixed.  The
     issue with the VCT6 was introduced with the code update in ssppeecc release
     5.09.02-1.  The issue with the other controllers dates generally from the
     introduction of the particular controller support to ssppeecc.

changes                      spec 5.09 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 5.09

May 19, 2011 - RELEASE 5.09.02-4

Fix For Macro Function Assignment To Unset and Untyped Variables
     An unintended side effect of the stricter associative array syntax checking
     introduced in ssppeecc release 5.09.02-2 prevented assignment of associative
     arrays to variables not yet used and not explicitly declared as associative
     arrays.  Such usage was allowed in the past and is restored with the fix in
     this release.

May 13, 2011 - RELEASE 5.09.02-3

Fix For Macro Function Return Of Associative Arrays
     A bug, where the ability to return an associative array from a macro
     function was broken in the previous release, has been fixed.

May 5, 2011 - RELEASE 5.09.02-2

New Command Line Option To Open Log Files
     A new start-up option to specify an output file on the command line is
     available, as in

        ssppeecc --ll ssoommeeffiillee..lloogg

     Output to the file will begin immediately, so will include the initial
     hardware configuration messages.  The files will be opened even when
     starting fresh.

Support For USB DAC As DAC Motor
     The Measurement Computing USB-3100 series digital-to-analog converter (DAC)
     modules are now supported as DAC motors in ssppeecc.  See the _d_a_c help file for
     details.

Support For Digital I/O On DAC Devices
     The PCI and USB DAC devices supported by ssppeecc as DAC motors usually include
     digital I/O lines as part of the hardware package.  ssppeecc now supports
     configuration and control of the digital I/O lines directly using
     mmoottoorr__ppaarr(()) commands.  See the _d_a_c help file for details.

Fix To Associative Array Assignment
     A syntax error, where assignment of an associative array (say AA) to a
     single associative array element, as in xx[[00]]==AA, has been quietly ignored
     from the earliest ssppeecc releases.  Since ssppeecc release 5.07.02-9, such a
     command would result in actual creation of invalid objects.  The unallowed
     assignment is now detected, an error message is displayed and control
     returns to the main prompt.

Fixes To Array Assignment In Server
     Use of the vvaarr property in the ssppeecc server for assignment to associative
     array elements has been cleaned up.  Previously, the following (where AA is
     an associative array with more than one element) was not detected as an
     error when received by a ssppeecc server:

        pprroopp__ppuutt((""llooccaallhhoosstt::ffoouurrcc"",, ""vvaarr//xx[[11]]"",, AA))

     In addition, an assignment of the sort

        pprroopp__ppuutt((""llooccaallhhoosstt::ffoouurrcc"",, ""vvaarr//xx[[11]]"",, AA[[33]]))

     would assign to xx[[33]] rather than xx[[11]].  Finally, it had been previously
     possible to use the vvaarr property to create new elements in the ssppeecc
     server's built-in associative arrays, such as AA or SS, which is not allowed.
     All these issues should now be fixed.

Fixes For XIA DXP Support
     A bug, introduced in ssppeecc release 5.08.06-1, which could break support for
     the XIA DXP modules if more than one MCA was configured, has been fixed.
     In addition, the CSS version of the XIA DXP support library, available at

        hhttttpp::////cceerrttiiff..ccoomm//ddoowwnnllooaaddss//eexxttrraass//xxiiaa__ddxxpp__ccssss..ttggzz

     has been updated to work correctly when used with 64-bit binaries.

Reversion For User-level GPIB-ENET Interruptible Transfers
     The feature allowing ^^CC interrupts during user-level GPIB calls, such as
     ggppiibb__ppuutt(()) and ggppiibb__ggeett(()), introduced in ssppeecc release 5.09.01-3, has been
     disabled for the National Instruments GPIB-ENET device.

Fix For Unintended Access To Unresponsive Controllers
     In a fix for controller unit number assignments in ssppeecc release 5.06.02-8,
     a bug was introduced into the code for a number of motor controllers and
     timer/counters where the flag to mark an unresponsive controller was
     inadvertently cleared, resulting in wasted time doing presence tests on
     individual channels or on attempts to access unavailable hardware,
     resulting in spurious error messages.  That problem has been fixed.
     Affected controllers were the Detel S21DC, Huber 9000/9300-LCD, JVL SMI20B,
     Kohzu SC-200/400/800, MURR counters, Micro-Controle ITL09, New Focus
     Picomotor 8732, Newport ESP300, Newport MM2000/2500/3000/4000/4005/4006,
     Newport PM500, Oriel Encoder Mike 18092, PI C-630/663/804/844/860/862/863,
     PI E710, PMC Corp DCX and Tsuji CT16/NCT08 models.

Small Fix For JVL Motors
     The generation of a spurious configuration-time error message associated
     with the JVL motor support that could appear with particular hardware
     configurations has been fixed.

Small Fix For ACS MCB-4B Motors
     An issue with the MCB-4B motor controller support, introduced in ssppeecc
     release 5.08.02-1, where if the configured value for the acceleration
     parameter was too big, ssppeecc programmed the controller with the minimum
     allowed value rather than the maximum allowed value, has been fixed.

Fix For Misspelled Parameter For Canberra MCAs
     The mmccaa__ppaarr(()) parameter ""eellaappsseedd__ccoouunnttss"" was misspelled in the Canberra
     Multiport II and Lynx MCA support with the position of the initial s and p
     characters reversed.  The misspelled version is no longer recognized.
     Users should adjust any macros that relied on the mispelling.

Updated ss11dd22 Geometry For Pseudo TTaauu Rotation
     The ss11dd22 three-motor geometry code (1 sample rotation, 2 detector
     rotations) now recognizes a configuration where the ttaauu detector rotation
     consists of a two-motor configuration consisting of a translation
     perpendicular to the line from the detector to the sample and a rotation of
     the detector.  Real motors corresponding to those motions should be
     configured as ttaauuTT and ttaauuRR.  The ttaauu motor will be a pseudomotor.  New
     geometry-specific macros sseettlleenn to set the distance from the detector to
     the sample and sseettttrraacckk to turn on and off the tracking of ttaauuRR and ttaauuTT
     with ttaauu are provided.  See the ggeeoo__ss11dd22..cc files and the ss11dd22..ssrrcc macros
     for details.

March 1, 2011 - RELEASE 5.09.02-1

Fixes For Multiple Master Timers
     An issue, where the first master timer in the ccoonnffiigg file was not
     necessarily the timer that gated software-controlled counters, has been
     fixed.  When multiple master timers are used (a feature added in ssppeecc
     release 5.09.01-1), the first such timer device in the ccoonnffiigg file is the
     ""ssuupprreemmee"" master and will control when commands are sent to start and stop
     non-hardware gated counters and MCA- and CCD-type devices.

Updates For TACO VCT6 Device Server Support
     The ssppeecc support for the TACO VCT6 device server has been updated to
     support multiple device server instances, with each instance allowed to
     contain a master timer.  In addition, reading of the counter results is now
     more efficient.

Preliminary Support For Physik Instrumente E-712 Piezo Controller
     This ssppeecc release supports the Physik Instrumente E-712 piezo controller
     over serial and Ethernet interfaces.  See the _E_7_1_2 help file for details.

Updates For Newport ESP300/301 Support
     The built-in code for the Newport ESP300 and ESP301 motor controllers now
     includes support for the following standard optional motor parameters:
     ""ddeecceelleerraattiioonn"", ""hhoommee__bbaassee__rraattee"", ""ddcc__ddeeaadd__bbaanndd"" and ""ddcc__sseettttllee__ttiimmee"".
     Previously, the deceleration was programmed to the same value as the
     acceleration, and will still be, if the optional ""ddeecceelleerraattiioonn"" parameter
     is unset.  The specific ESP300/301 parameter for ""hhoommee__bbaassee__rraattee"" was not
     previously programmed.  The dead-time and settle-time parameters are
     associated with ssppeecc internal operation.  If ""ddcc__ddeeaadd__bbaanndd"" and
     ""ddcc__sseettttllee__ttiimmee"" both have non-zero values, ssppeecc will wait for at least the
     duration specified by the settle time after the controller indicates the
     move is done and also until the position is within the dead-band of the
     target position.  If the motor doesn't settle into the dead-band within 5
     seconds, ssppeecc will print an error message that the motor isn't settling.

Fix For Amptek MCA 8000A Support
     A bug in ssppeecc's support for the new Amptek MCA 8000A firmware that
     sometimes resulted in a program crash when reading data from the MCA has
     been fixed.

Updates For USB uuddeevv Support On LLiinnuuxx
     The ssppeecc IInnssttaallll script will now automatically install a rules file for
     ssppeecc-supported USB devices in //eettcc//uuddeevv//rruulleess..dd if the LLiinnuuxx platforms
     supports the uuddeevv feature.  The rules file will ensure that all
     ssppeecc-supported USB devices will be accessible to ordinary users running
     ssppeecc.

Updates For Am9513-based Counter/Timers, Including USB Support
     This ssppeecc release includes several updates to the Am9513-based
     counter/timer support.  First, the Measurement Computing USB-4300 series
     models are supported (currently, only on LLiinnuuxx platforms).  Second, the
     Measurement Computing PCI-CTR05/10/20HD are now fully supported
     (previously, counting-to-monitor didn't work).  Finally, direct access to
     the digital I/O ports is available on all cards without requiring
     additional hardware configuration.  Access is via ccoouunntteerr__ppaarr(()) commands.
     See the updated _a_m_9_5_1_3 help file for details.

Updates in Attocube ANC350 Support To Match Hardware Firmware Updates
     Non-backward compatible updates in the firmware included in the ANC350
     piezo motor controllers have been addressed, along with support for new
     parameters.  The ""ppoosslloooopprraannggee"" is now only used with older firmware units.
     The new ""ppoossllooooppttiimmee"", ""hhuummppsseennssiittiivviittyy"", ""hhuummppsstteeppssmmiinn"" and ""hhuummppttiimmee""
     parameters are available for newer firmware units.

Fix For Standard ssccaann__hheeaadd Macro
     A problem with the standard __hheeaadd macro (the default definition for
     ssccaann__hheeaadd), where an error occurred if doing a scan when no motors were
     configured, has been fixed.

Fix For ccoonnffiigg File Update During Install
     Previously, when updating ssppeecc using the standard IInnssttaallll script, values
     for the optional hardware ""rreeaadd__mmooddee"" parameter would be reset to zero
     during the procedure where the installation checked for compatibility
     between the ccoonnffiigg file and the ssppeecc update.  That issue has been fixed.

Fixes For Two lliibbeeddiitt Issues
     A bug introduced into the lliibbeeddiitt package, where command history recall by
     number using the !!NN notation would return the command NN+1, has been fixed
     in the upstream source and in the version distributed with ssppeecc.  In
     addition, a patch to the upstream source to restore inclusion of the
     directory "//" indicator with filename completion, included in ssppeecc release
     5.08.04-4 but inadvertently removed in release 5.09.01-1, has been put
     back.

December 15, 2010 - RELEASE 5.09.01-4

Updated Support For ULS Counter/Timer
     The support for the Korean ULS 3020 counter/timers has been updated to work
     with versions 3 and 4 of the device firmware.

December 13, 2010 - RELEASE 5.09.01-3

New ggppiibb__ppaarr(()) Command With ""ttiimmeeoouutt"" Option
     A new ggppiibb__ppaarr(()) command is available.  The only option currently available
     is ""ttiimmeeoouutt"", which can be used to return or set the timeout value for
     user-level GPIB transfers.  See the _g_p_i_b help file for details.

User-level GPIB Transfers Now Interruptible With ^^CC
     The user-level GPIB commands, ggppiibb__ggeett(()) and ggppiibb__ppuutt(()), can now be
     interrupted with ^^CC, although only with GPIB controllers configured to use
     ssppeecc's built-in GPIB support (National Instruments PCI-GPIB, AT-GPIB, PCII,
     PCIIA, GPIB-ENET and Scientific Solutions IEEE-488).

Fix For mmccaa__sseell((""??""))
     A bug, where the mmccaa__sseell((""??""))  command could cause ssppeecc to crash when the
     hardware configuration included a Canberra Multiport MCA with more than one
     MCA submodule, has been fixed.

Fix For ssuurrff Calculation
     An old bug (since 1986) in the ssuurrff geometry code for calculating motor
     positions from reciprocal space coordinates for negative LL has been fixed.

Warning Message Suppressed For Restored Socket Connections
     When the user-level ssoocckk__ggeett(()) and ssoocckk__ppuutt(()) functions detect a dropped
     connection, ssppeecc automatically attempts to restore the connection and
     complete the transaction.  Previously, ssppeecc would print a warning message
     when this happened.  Now the message is only printed if the
     print-warning-message debug level is enabled.  However, an error message
     will be printed if the connection could not be restored.

Bug Fix and Updated Support For Mythen
     A bug where ssppeecc did not send updated values for the threshold parameter
     for the Dectris Mythen 1K MCA has been fixed.  In addition, preliminary
     support for the Mythen version 2.0 firmware has been added.  See the _m_y_t_h_e_n
     help file for details.

Updated Support For Huber SMC 9300
     ssppeecc now supports the simultaneous start feature available on the Huber SMC
     9300 stepper motor controller with firmware at level 1.1.97 or above.  In
     addition, when using the command pass-through options of ""rreeaadd"" and ""sseenndd""
     with mmoottoorr__ppaarr(()), ssppeecc will automatically insert the channel number to a
     properly formatted command string.  Also, the standard optional motor
     parameter ""ddeecceelleerraattiioonn"" is now supported for the 9300.

Fix For Newport Agilis Motor Controller
     A formatting error in a command sent to the Newport Agilis motor controller
     that generated spurious error messages on models with newer firmware has
     been fixed.  The error was ignored on earlier versions of the Agilis
     firmware.

Preliminary Support For Bruker Vantec-1 MCA
     This ssppeecc release has initial support for the Bruker Vantec-1 MCA over a
     Ethernet interface.

Preliminary Support For Physik Instrumente E-816
     This ssppeecc release has initial support for the Physik Instrumente E-816
     piezo motor controller over a serial interface.

October 17, 2010 - RELEASE 5.09.01-2

New mmccaa__ppaarr(()) Options For Amptek PX4
     New mmccaa__ppaarr(()) ""ssllooww__ccoouunnttss"" and ""ffaasstt__ccoouunnttss"" options are recognized for
     the Amptek PX4/DP5 support.  The ""ssllooww__ccoouunnttss"" option is synonymous with
     ""eellaappsseedd__ccoouunnttss"".  See the _p_x_4 help file for details.

Fix For ttaannggoo__ggeett(()) With "Extras"
     A bug with the ttaannggoo__ggeett(()) feature that returns attribute information (such
     as data type and time stamp) in an associative array passed as an optional
     third argument has been fixed.  Previously, use of that feature would
     likely corrupt ssppeecc's memory arena.

October 6, 2010 - RELEASE 5.09.01-1

Multiple Master Timers Now Supported
     Preliminary support for multiple master timers is now available.  However,
     currently, for most hardware only one master timer of a particular type is
     allowed.  (The EPICS scaler record and macro-hardware counters do now
     support multipler masters of the same type.)  Support for multiple master
     timers of the same kind will be added as needed and when feasible for
     additional controllers types.  When multiple master timers are configured,
     ssppeecc will program each for the count interval and start each of them after
     enabling all counters.  The functions that wait for the timer to finish
     will now wait for all the configured timers to finish.  For counters and
     for MCA- and CCD-type devices configured in ""aauuttoo__rruunn"" mode that are not
     hardware gated by a master timer, ssppeecc will halt those devices when the
     master timer that appears first in the ccoonnffiigg file reaches its preset.

Waiting For Acquisition-type Devices Improved
     For acquisition devices (MCAs, CCDs) with ""aauuttoo__rruunn"" mode enabled such that
     the devices are started automatically during counting, waiting for counting
     with the wwaaiitt(()) function will also include waiting for those devices.  See
     the _w_a_i_t help file.

ssppeecc Server Now Handles ddooffiillee(()) Sent From Client
     Previously, when the commands ddooffiillee(()) or qqddooffiillee(()) (or macros that invoke
     the commands) were sent by a client as commands to be executed by a ssppeecc
     server, the command files wouldn't be read until a newline was typed at the
     server keyboard.  That limitation has now been removed.

ssppeecc Server Now Handles rreeccoonnffiigg and ssaavvssttaattee Sent From Client
     Previously, the rreeccoonnffiigg and ssaavvssttaattee commands were not supported when sent
     from a client to a ssppeecc server.  Those commands are now available.

Increased Maximum Number of Motors
     When the maximum number of motors was last increased (November 2003), it
     was mentioned that when a user hit the new limit of 200 motors, the code
     would be revised to remove any limit.  Well, a user has hit the new limit,
     but the code rewrite will be deferred in order to more quickly release a
     version with a new maximum number of motors.  The new maximum is 256
     motors.

ssppeecc Will Continue When Too Many Motors Or Counters Are Configured
     Previously, if more than the maximum number of motors or counters was
     configured, ssppeecc would abort hardware configuration.  Now, ssppeecc will
     complete hardware configuration and simply ignore the configuration of
     motors or counters beyond the maximum allowed.

New sseerr__ppaarr(()) ddrraaiinn Option
     A new ""ddrraaiinn"" option to the sseerr__ppaarr(()) function will cause ssppeecc to delay
     until all output written to the associated serial device has been
     transmitted.  The call only works on built-in LLiinnuuxx or UNIX serial ports.
     See the _s_e_r_i_a_l help file for details.

Updated USB Support On LLiinnuuxx
     On LLiinnuuxx platforms, ssppeecc now supports the uuddeevv (dynamic device management)
     method for accessing USB devices.  The uussbbffss (also known as uussbbddeevvffss) file
     system method remains supported for older LLiinnuuxx distributions.  In
     addition, if linked with the lliibbuussbb library (currently only the 0.1 version
     is supported), ssppeecc will use that.  For using uuddeevv method on LLiinnuuxx
     platforms, a ssppeecc__uussbb..rruulleess file is now included in the ssppeecc distribution
     that can be copied to //eettcc//uuddeevv//rruulleess..dd.  That file contains permissive
     permission configurations for all ssppeecc-supported USB hardware.  When the
     system starts up, device permissions will be set so that all users can
     access the specified USB devices.

Fix For Reconnecting To eexxtteerrnn Shared Arrays
     A bug, where a second eexxtteerrnn sshhaarreedd aarrrraayy declaration for the same array
     could generate a segmentation fault, has been fixed.  The bug had been
     introduced with a shared-array fix for a different problem in ssppeecc release
     5.08.01-1.

Fix For Crash With Certain Motor Controller Configurations
     A bug, which resulted in a segmentation fault under certain conditions on
     certain platforms, has been fixed.  The crash could occur if a channel
     number was equal to the number of channels configured for an EPICS motor
     controller (or three other little-used controller types:  AGILIS, FC501A,
     IPS).  The crash occurred on rreeccoonnffiigg or on exiting ssppeecc and was only seen
     on Solaris platforms.

Recent Baud Rate Updates Now Working
     Some of the baud-rate related updates announced in ssppeecc release 5.08.06-4
     that weren't quite working are now fixed.  In particular, setting
     non-standard baud rates of 7200, 14400 and 28800 now works on LLiinnuuxx
     platforms, and the ""bbaauudd"" option to sseerr__ppaarr(()) now correctly returns the
     baud rate.  In addition, using sseerr__ppaarr(()) to change the baud rate will now
     print a fail message and return -1 if the change was ineffective, which can
     happen, for example, if the underlying driver does not support the
     requested rate.

ssccaann__ttaaiill Now Included In ttiimmeessccaann and llooooppssccaann Macros
     The __ttiimmeessccaann macro, which contains most of the code for the ttiimmeessccaann and
     llooooppssccaann macros, now includes a call of the standard ssccaann__ttaaiill macro,
     which, by default is defined as __ttaaiill.  That macro calls various user hook
     macros, does end-of-scan plotting, and clears the scan-active bit of the
     __ssttyyppee variable.

Fixes For ssttaarrttuupp and ssaavvee Macros For Geometry-less Configurations
     The nnoo__hhkkll macro, invoked automatically in the standard macros for the
     geometry-less ssppeecc configuration, now properly defines null macros for the
     ssttaarrttggeeoo and ssaavveeggeeoo which allows the standard ssttaarrttuupp and ssaavvee macros to
     work when no geometry is included in the configuration.

The ggeettssccaann Macro Fixed To Work With Plotting
     The ggeettssccaann macro now updates the global ""llaasstt--ddaattaa--ppooiinntt"" symbol LLDDTT to
     accommodate the plotting macros in the pplloottaarrrraayy..mmaacc file.

Fix For sshhoowwUUBB and eenntteerrUUBB Macros
     A 13-year old bug where the sshhoowwUUBB and eenntteerrUUBB macros had the rows
     displayed as columns has been fixed.

Bug In TACO Error Reporting Fixed
     A bug, where TACO errors associated with the built-in support for TACO
     devices would not be displayed after calls of the user-level ttaaccoo__iioo(())
     function when either of the global variable TTAACCOO__EERRRR or EESSRRFF__EERRRR was set to
     -1, has been fixed.

Faster EPICS Monitor Checks
     The overhead associated with the ""mmoonniittoorr__cchheecckk"" option to an eeppiiccss__ppaarr(())
     call has been decreased from 0.01 seconds per call to something much less.

Less Overhead For EPICS Scaler and PV Counters
     ssppeecc now uses callback events to keep track of values for EPICS scalers and
     PV counters.  Previously, ssppeecc used channel access gets to retrieve the
     values when the ggeettccoouunnttss command was executed.  The callback method should
     decrease per-point overhead during scans.

Fix For wwaaiitt((88)) For EPICS Motor Connections
     The documentation for the wwaaiitt(()) built-in function says that if bit 3 of
     the optional argument is set, the function will wait for connections from
     ssppeecc servers and EPICS remote motors.  The behavior was broken with respect
     to testing for EPICS motors, but has now been fixed.

Updates and Fixes For Dectris Mythen Support
     Several issues with the initial support for the Dectris Mythen 1K MCA have
     been addressed.  The current ssppeecc support is for Mythen firmware up to
     version 1.3.

New Check For Reset With Trinamic Motor Controllers
     When power is cycled on the Trinamic motor controllers, a number of
     parameters need reprogramming.  Otherwise, wild and unexpected movements
     may occur.  Although one should never cycle the power on hardware
     controllers while ssppeecc is running, the Trinamic controllers do have a
     status flag that allows software to detect when the power has been cycled.
     A new option will have ssppeecc check this flag at intervals and reprogram the
     controller parameters if a power cycle is detected.  See the _t_r_i_n_a_m_i_c help
     file for details.

Fix For Canberra Lynx (DSA-3000) MCA
     A bug which broke the support for the Canberra Lynx (DSA-3000) MCA on some
     platforms has been fixed.  In addition, the ssppeecc support has been updated
     to work with the current release of the Lynx firmware.

Updated PX4 Support For DP5
     The support for the Amptek PX4 MCA has been updated to work with the new
     model DP5 (using its PX4 compatibility mode).  Support for the additional
     DP5 features will be added to ssppeecc soon.

Fix For Multiport MCA Support Over GPIB
     A timeout problem when reading large data sets over GPIB from the
     Canberra/Oxford/Tennelec/Nucleus Multiport MCA has been fixed.

changes                      spec 5.08 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 5.08

June 3, 2010 - RELEASE 5.08.06-6

Fix For Repeated "Lost Connection" Messages
     A problem where a ssppeecc client would occasionally print a stream of ""LLoosstt
     CCoonnnneeccttiioonn"" error messages has been addressed.  Only one message per event
     should appear now.

Support For EPICS Motor Record Update
     The ssppeecc support for the EPICS motor record has been adapted to follow the
     elimination of the RES process variable in release R6-5.

May 20, 2010 - RELEASE 5.08.06-5

Fix For Crash On eeppiiccss__ppuutt(()) Syntax Error
     A bug dating from the original EPICS implementation in ssppeecc, where using
     only one argument with the eeppiiccss__ppuutt(()) function could cause a crash, has
     been fixed.  Such use is now properly flagged as a syntax error.

Fix For Crash On eeppiiccss__ggeett(()) When Forcing String Type
     A bug, where ssppeecc could crash when using eeppiiccss__ggeett(()) with the optional
     ""ssttrriinngg"" argument to read a process variable of array type that was longer
     than 40 bytes (the maximum length of an EPICS string) but was not
     DDBBFF__SSTTRRIINNGG type, has been fixed.

Fixes For Returning EPICS Arrays As Strings
     When forcing a ""ssttrriinngg"" type with eeppiiccss__ggeett(()), ssppeecc now properly formats
     the returned values as ASCII strings for all supported EPICS data types.
     For native types other than DDBBFF__CCHHAARR, arrays will be returned as a ssppeecc
     string data array consisting of 40-byte rows, with as many rows as elements
     in the EPICS array.  For DDBBFF__CCHHAARR data, the return value will be a
     single-row string data array with as many columns as elements in the EPICS
     array.  See the _e_p_i_c_s help file for more information.

Fix For Writing to EPICS Character Arrays
     When sending values to a process variable which is an array of DDBBFF__CCHHAARR
     type using eeppiiccss__ppuutt(()), non-array values will now be transferred as a
     string, filling as many elements of the array as the string is long.
     Previously, the number value of the argument would be assigned to only the
     first element of the process variable array.

May 19, 2010 - RELEASE 5.08.06-4

Baud-Related Updates For Serial Support
     A number of fixes and enhancements associated with setting the baud rate on
     serial devices are included in this ssppeecc release.  The non-standard baud
     rates 7200, 14400 and 28800 are now working on LLiinnuuxx platforms.  All the
     generally recognized baud rates are now available, when supported by the
     underlying system and hardware.  In particular, ssppeecc now recognizes baud
     rate values of 921600, 1000000, 1152000, 1500000, 2000000, 2500000,
     3000000, 3500000 and 4000000.  In addition, it is now possible to use the
     sseerr__ppaarr(()) function to set and read the current baud rate.  See the _s_e_r_i_a_l
     help file for details.

Baud Rate Setting Now Working on Mac OS X
     A bug in Mac OS X version of ssppeecc, where serial lines only worked at 9600
     baud, has been fixed.  Note, ssppeecc only changes baud rates on serial lines
     on a Mac when using USB-to-serial converters, as the Mac hardware that ssppeecc
     supports doesn't include built-in serial ports.  For serial ports accessed
     via Ethernet-to-serial devices, ssppeecc doesn't set the baud rate.

Fix For Limit Message On Micos Pollux Controllers
     A problem associated with recent updates to the Micos motor controller
     support, where hitting a limit switch with the Pollux models would stop the
     associated motor but not generate a limit message in ssppeecc, has been fixed.

Fix For Move-To-Limit Operation On Trinamic Controllers
     Previously, if a move-to-limit search was the first move performed with a
     Trinamic motor controller, the motor speed used for the move was undefined.
     ssppeecc now programs the move speed before doing a limit search.

April 15, 2010 - RELEASE 5.08.06-3

Can Now Check Active Status Of Calculational Pseudomotors
     The command mmoottoorr__ppaarr((mmnnee,, ""aaccttiivvee"")) will now return a zero or one to
     indicate whether any of the real motors associated with the calculational
     pseudomotor mmnnee are busy.  Previously, the command only worked with real
     motors.

New ""nnooddeellaayy"" Option For TCP Sockets
     Is now possible to disable or enable the TTCCPP__NNOODDEELLAAYY socket option via a
     ""nnooddeellaayy"" option to ssoocckk__ppaarr(()).  See the _s_o_c_k_e_t_s help file for details.

New ""ffaasstt__hhddww__cchheecckkss"" Option For Server Mode
     An experimental ""ffaasstt__hhddww__cchheecckkss"" option is now available via ssppeecc__ppaarr(()) to
     enable clients to get a faster notification of changes in hardware status.
     See the _s_p_e_c___p_a_r help file for details.  Is used, please report any issues
     to CSS to allow further tuning of the code.

Fixes For Sigmatech FC501-A Motor Controller
     This release includes a couple of fixes for the recently added support for
     the Sigmatech FC501-A motor controller.

Fixed Crash With Unresponsive OMS PC48
     A bug, introduced in ssppeecc release 5.07.04-1, where ssppeecc would crash when
     configured for an OMS ISA PC48 motor controller and no such controller was
     detected, has been fixed.

Fixed Parameter Issue With Attocube Controller
     A bug, introduced in ssppeecc release 5.08.03-8, which disabled the ability to
     set values for non-standard optional motor parameters from the ccoonnffiigg file
     for the Attocube ANC350 motor controllers, has been fixed.

March 25, 2010 - RELEASE 5.08.06-2

Support For Oregon Micro Systems MAXnet
     The OMS MAXnet motor controller is now supported over both RS-232C (serial)
     and Ethernet interfaces.  See the _o_m_s help file for configuration details.

March 22, 2010 - RELEASE 5.08.06-1

Support For Dectris Mythen 1K MCA
     This ssppeecc release includes a first version of support for the Dectris
     Mythen 1K MCA over the Ethernet interface.  See the _m_y_t_h_e_n help for
     complete details.

Support For Sigmatech FC501-A Motor Controller
     This ssppeecc release supports the Sigmatech FC501-A motor controller over GPIB
     and RS-232C interfaces.  See the _s_i_g_m_a_t_e_c_h help file for complete details.

Fix and Additions For ffmmtt__rreeaadd(()) Programming Functions
     The ffmmtt__rreeaadd(()) and ffmmtt__wwrriittee(()) functions allow specific binary data formats
     to be supported in ssppeecc.  The source code to the functions included in the
     standard ssppeecc distribution serves as documentation for the feature.  This
     ssppeecc release includes a new C function, ffff__aaddjjuusstt__bbyyttee__oorrddeerr(()), which can
     be called in the read function to adjust the byte order of the binary data
     if it differs from that of the current platform.  Also, the existing
     function ffff__ppuutt__hheeaadd__iitteemm(()), which can be called in the read routine to
     transfer header items to the ssppeecc user level, now works properly.  Finally,
     the specification of the format name in the ssppeecc user-level function calls
     is now case insensitive.

Enhancement For the ESRF Format For ffmmtt__rreeaadd(())
     The ffmmtt__rreeaadd(()) implementation for the ESRF data format will now correct
     data for byte order if the data in the file is different from that of the
     host.  In addition, a ffmmtt__rreeaadd(()) call will now properly fill the optional
     associative array argument with all values from the data file header.

Update to ssppeecc Shared Memory Header For Frames
     The ssppeecc__sshhmm..hh file contains an updated header for the ssppeecc shared memory
     structure with new elements called ffrraammee__ssiizzee and llaatteesstt__ffrraammee, and a new
     flag definition SSHHMM__IISS__FFRRAAMMEESS.  The intended usage is to communicate to
     auxiliary programs that 2D data consists of a series of frames, where the
     ffrraammee__ssiizzee element will contain the number of rows per frame, and the
     llaatteesstt__ffrraammee element will contain the most recently updated frame number.
     The version number of the structure has been incremented from 4 to 5.

New aarrrraayy__oopp(()) Options For Frames
     It is now possible to tag shared data arrays as a ""ffrraammeess"" type, which
     means the data in a 2D array can be described as a series of acquisitions.
     A ""ffrraammee__ssiizzee"" parameter is the number of rows per frame.  A value of one
     would be appropriate for a series of MCA acquisitions.  A ""llaatteesstt__ffrraammee""
     parameter can be assigned the frame number of the most recently added
     frame.  The values can be set and retrieved using the aarrrraayy__oopp(()) function.
     In addition, certain hardware support may set the frame parameters (see the
     _m_y_t_h_e_n help file).  See the _a_r_r_a_y_s help file for more information on
     frames.

Fix For Counters-Only Configuration Of Tsuji Counter/Timers
     A bug, where a Tsuji counter/timer configured as ""ccoouunntteerrss oonnllyy"" was not
     started correctly, has been fixed.

Fix For Crash With --pp Flag On Startup
     A situation where ssppeecc could crash when started with the deprecated --pp flag
     directly from the shell has been fixed.

February 5, 2010 - RELEASE 5.08.05-6

Support For Revised Amptek MCA 8000A Firmware
     ssppeecc now supports the new firmware included with the Amptek MCA 8000A with
     serial numbers 3660 and higher.  The new firmware can be used with
     USB-to-serial adapters on LLiinnuuxx.  See the _a_m_p_t_e_k help file for details.

Fine Tuning Of New Micos VENUS-3 Support
     This ssppeecc release contains a minor update to the Micos motor controller
     support added in the previous release to better handle error responses from
     the controller.

January 12, 2010 - RELEASE 5.08.05-5

Can Now Assign PCI Bus and Slot Numbers For NI 6601/2 Cards
     It is now possible to specify the PCI bus and slot numbers of National
     Instruments 6601/2 timer/counters cards in the ssppeecc configuration editor,
     so that a particular card can be selected when more than one is installed
     in the same PC.  See the _n_i_6_6_0_x help file for details.

Files Opened For aarrrraayy__dduummpp(()) Will Close Automatically
     If an unopened output file is used as the optional first argument for the
     aarrrraayy__dduummpp(()) (or ddaattaa__dduummpp(())) functions, ssppeecc will now automatically close
     the file when the function finishes.  Previously, such files remained open
     and an explicit cclloossee(()) call to remove the file from ssppeecc's list of open
     output files was required.  If the file is already open when the function
     is called, it will stay open and on the list of open files.

Updates To the New Micos VENUS-3 Support
     This release includes a couple of updates to the support for the Micos
     VENUS-3 protocol as used with the new Hydra models introduced in ssppeecc
     release 5.08.05-1.  The new sseettoorrggccoonnffiigg command included with Hydra
     firmware 2.034 is used so that the ssppeecc sseett__ddiiaall command will work as
     expected.  Also, the error stack is now cleared when an error is detected,
     preventing spurious error messages on subsequent commands.

Fix For Recent Bug Concerning EPICS Motor Numbering
     A bug introduced in ssppeecc release 5.08.04-3 which prevented an EPICS motor
     with channel number one from being used has been fixed.

December 3, 2009 - RELEASE 5.08.05-4

Fix For Macro Hardware Parameters
     A bug introduced in ssppeecc release 5.08.05-1 that removed the unit number
     from the argument list in calls to the pprreeffiixx__ccmmdd(()) macro-hardware macro
     function has been fixed.  In addition, an issue where the value of the
     pprreeffiixx__AADDDDRR and pprreeffiixx__CCOONNPPAARR parameters would be cleared if the
     pprreeffiixx__ppaarr(()) macro function was called from the pprreeffiixx__ccmmdd(()) macro function
     has been partially addressed.  With this release, the above parameters are
     not available in pprreeffiixx__ppaarr(()) although the value of pprreeffiixx__AADDDDRR can be
     retrieved using the ccoouunntteerr__ppaarr(()) or mmoottoorr__ppaarr(()) ""aaddddrreessss"" argument.

November 25, 2009 - RELEASE 5.08.05-3

New Write-Only I/O Port Configuration Option
     Due to issues with certain PC cards freezing a Linux system when a
     write-only I/O port is accessed for reading, ssppeecc now supports write-only
     I/O port configuration on the IInterfaces screen of the hardware
     configuration editor.

Fix and Additional Support For Measurement Computing PCI-DDA Cards
     Newer revisions of the Measurement Computing PCI-DDA DAC cards (supported
     via ssppeecc's DAC motor facility) appear to freeze a Linux PC if write-only
     ports are accessed for reading or if ports associated with channels not
     present on the card are accessed at all.  The presence test for the cards
     now no longer attempts a read of the write-only ports.  Also, ssppeecc now
     determines the maximum number of channels for PCI DACs automatically and
     will overrule a misconfigured value from the ccoonnffiigg file.  In addition,
     ssppeecc now supports Measurement Computing models PCI-DDA02/12, PCI-DDA04/12,
     PCI-DDA08/12, PCI-DDA02/16 in addition to the PCI-DDA04/16 and PCI-DDA08/16
     models previously supported.  See the _d_a_c help file for more details.

Fix For PI Motor Controller Crash
     A bug introduced in release 5.08.05-1, where ssppeecc would crash during
     hardware configuration if the device associated with a Physik Instrumente
     motor controller channel couldn't be opened, has been fixed.

Fix For Mclennan PM595 Delays On Exit
     Previously, when quitting ssppeecc, each Mclennan PM595 motor controller
     configured would add a delay of one second to the time it took for the ssppeecc
     process to exit.  Those delays are now gone.

Fix For uunniixx(()) Return Value
     A very old bug, where the return value of the uunniixx(()) function when used
     with more than one argument was not the return status of the executed
     command, has been fixed.

November 16, 2009 - RELEASE 5.08.05-2

Fix For Broken Macro Hardware pprreeffiixx__AADDDDRR
     A bug introduced in the previous release that broke the availability of the
     pprreeffiixx__AADDDDRR variable inside macro-hardware macro functions has been fixed.

October 30, 2009 - RELEASE 5.08.05-1

New Support For Controller Parameter Configuration
     It is now possible to access the nonstandard optional controller parameters
     available from the configuration editor DDevices screen.  These parameters
     are entered and modified by typing the pp command and appear in the ccoonnffiigg
     file prefixed with CCOONNPPAARR.  Values can now be accessed from the ssppeecc user
     level using the mmoottoorr__ppaarr(()) and ccoouunntteerr__ppaarr(()) functions.  The parameter
     will be associated with the controller used by the motor or counter
     mnemonic given as the first argument.  In addition, the parameters are
     accessible from within macro hardware functions as elements of the
     associative array pprreeffiixx__CCOONNPPAARR[[]] where the array elements are indexed by
     the parameter name and pprreeffiixx is the macro function prefix.

Fix For Disabled Calculational Macro Motors
     Previously, if the mmoottoorr__ppaarr(()) ""ddiissaabbllee"" command was used to disable a
     calculational macro-hardware pseudomotor, a move command for that motor
     would generate an error message that the motor was disabled, but ssppeecc would
     still send move commands to the associated real motors.  That problem is
     fixed in this release.  ssppeecc will no longer make mmooddee==11 calls to the
     pprreeffiixx__ccaallcc(()) function when the pseudomotor is in a disabled state.  The
     associated real motors are not disabled, but will not move as a result of a
     move command to the pseudomotor.

A ^^CC Will Now Override ""kkeeeepp__ggooiinngg"" Mode
     The ssppeecc__ppaarr(()) ""kkeeeepp__ggooiinngg"" option (introduced in ssppeecc release 4.05.01),
     which tells ssppeecc to keep reading and executing commands from a command file
     no matter what errors occur, will now return to command level if there is a
     ^^CC abort entered at the keyboard.

Shared Arrays Now Working on Mac OS X
     A long-standing issue with the experimental ssppeecc support on the Mac OS X
     platform with respect to shared data arrays not working properly has been
     resolved.

Powder-mode Macro Update
     The wwaaiittmmoovvee call in the __ppccoouunntt macro associated with the powder-mode
     macros has been replaced by the new __ppccoouunntt__eemm macro which adds calls of
     uusseerr__pprreeccoouunntt and uusseerr__ppoossttccoouunntt before and after the mmoovvee__ccnntt command.

Fix For Position Resolution For Huber H9000
     The support for the Huber H9000 motor controller will now send up to nine
     significant figures to specify the target position in move commands.
     Previously, only up to six significant figures were used.

Fix For OMS PC48 Issue
     Recent updates to the ssppeecc support for OMS motor controllers resulted in a
     bizarre problem with the ISA bus PC48 model OMS motor controller on at
     least one platform, where the modified initialization sequences sent to all
     the OMS controllers resulted in a LLiinnuuxx crash.  Although the exact
     mechanism of this crash is unknown, it has been suppressed by adding a
     couple of ten millisecond delays around the new commands.

Fix For PPAA In OMS ""iinniitt__sseeqquueennccee""
     The OMS support now correctly recognizes and requires a parameter of 0 or 1
     for the PPAA (power automatic) command when included as part of an
     ""iinniitt__sseeqquueennccee"" nonstandard optional motor parameter.

New OMS Position Maintenance Details
     By default, ssppeecc will now turn off position maintenance on OOMMSS__PP configured
     motors on exit.  This default behavior can be disabled by setting the
     nonstandard optional parameter ""kkeeeepp__ppooss__mmaaiinntt"" to a non-zero value.  The
     parameter can be a controller parameter which will set values for all
     motors on the controller, or a motor parameter which will only set values
     for the individual motor (and override a controller parameter setting).  In
     addition, ssppeecc now turns on position maintenance for OOMMSS__PP on start up
     rather than on the first move command.  See the _o_m_s help file for details.

Preliminary Support For Micos VENUS-3 and Hydra Model
     Support for the latest revision of the Micos firmware, called VENUS-3, as
     implemented in the Hydra model of their motor controller, is included in
     this ssppeecc release.  The support is for both serial and Ethernet interfaces.

Preliminary Support For Physik Instrumente Model C-863 Motor Controller
     This ssppeecc releases includes support for the Physik Instrumente (PI) model
     C-863 single-axis DC-motor controller.

Preliminary Support For Korean HMT HCC1 Motor Controller
     This ssppeecc release includes preliminary support for the Korean-made HMT HCC1
     motor controller over a serial interface.  See the company's site
     _(_w_w_w_._e_-_h_m_t_._k_r_) for a product description.

September 10, 2009 - RELEASE 5.08.04-4

Fix For Crash When Using CAMAC RTC-018
     A bug, where configuring an RTC-018 module could sometimes lead to a
     program crash, introduced when ssppeecc was updated over four years ago to
     support multiple CAMAC crates (release 5.06.02-1), has been fixed.

September 9, 2009 - RELEASE 5.08.04-3

New rreemmoottee__ppaarr(()) Command For ssppeecc Clients
     For ssppeecc clients communicating with a ssppeecc server, a new rreemmoottee__ppaarr(())
     command is available, currently with the following options: ""ccoonnnneecctt"" to
     open a connection to a remote server, ""cclloossee"" to close a connection,
     ""aabboorrtt"" to send a ^^CC-type event to the remote server and ""ttiimmeeoouutt"" to set a
     timeout for rreemmoottee__eevvaall(()) calls.  See the _s_e_r_v_e_r help file for additional
     details.

A ^^CC During a rreemmoottee__eevvaall(()) Now Passed To Server
     If a call to rreemmoottee__eevvaall(()) from a ssppeecc client is interrupted by a ^^CC from
     the keyboard, the client will send the ssppeecc server an SSVV__AABBOORRTT event, to
     which the server will respond as if a ^^CC had been typed at its keyboard.
     In addition, any pending commands in the server queue from that client will
     be flushed from the queue.

Cleanup Macros Now Called From Commands Sent To Server
     If a command sent to a ssppeecc server encounters an error or is otherwise
     interrupted, the server will now run the standard cleanup macros,
     cclleeaannuupp__oonnccee and cclleeaannuupp__aallwwaayyss (and the deprecated cclleeaannuupp and cclleeaannuupp11),
     if any such macros are defined.

Preliminary Support For the Newport Agilis Piezo Actuators
     This ssppeecc release contains preliminary support for Newport's Agilis Model
     AG-UC2 controller over a USB interface.  Each controller supports two piezo
     actuators.  To distinguish multiple AG-UC2 modules, configure the device
     serial number in the address field of the configuration editor.

lliibbeeddiitt Command Completion For Directory Names Restored
     From time to time, the version of the lliibbeeddiitt command-line editing library
     included with the ssppeecc distribution is updated to track changes at the
     upstream source repository.  A recent change in the upstream sources, which
     was included in ssppeecc release 5.08.03-5 and subsequent releases, eliminated
     the feature where command completion for directory names appended a //
     rather than a space character.  The prior behavior is now restored in the
     patched version distributed with ssppeecc.  See the _e_d_i_t_l_i_n_e help file for
     details on ssppeecc's command-line editing library support.

August 9, 2009 - RELEASE 5.08.04-2

Fix For Recently Created OMS Bug
     A bug created in the previous release, where OMS motor channels were not
     necessarily marked as unusable when the associated controller was
     unresponsive, has been fixed.  It was possible for ssppeecc to crash in some
     instances due to this bug.

August 1, 2009 - RELEASE 5.08.04-1

Fix For Server Position/Count Update Throttling
     The update in release 5.08.03-1 which limited the rate at which a ssppeecc
     server sends position and count updates to clients inadvertently blocked
     sending position updates for more than one motor when more than one motor
     was active.  That issue has been corrected.  Note, the problem only
     affected the updates during motion.  The final position at the end of the
     move was always sent correctly for all motors.

Support For Struck PCI Express SIS1100E VME Card
     This ssppeecc release supports the Struck model SIS1100E PCI Express to VME
     interface.

Updates For OMS Motor Controllers
     Slip detection for OMS motor controllers configured with stepper motors and
     encoders is now supported.  Also, additional OMS commands are permitted in
     the iinniitt__sseeqquueennccee optional parameter introduced in ssppeecc release 5.08.03-8.
     See the _o_m_s help file for details.

Encoder Update For Huber 9300 Motor Controller
     When moving a motor configured with an encoder on the Huber 9300 motor
     controller, ssppeecc now sends a relative-move command rather than an
     absolute-move command.  Relative moves make it more likely the position
     after a small move will match the commanded position.

July 17, 2009 - RELEASE 5.08.03-13

Additional Serial Baud Rates Supported
     Serial devices can now be configured for 7200, 14400 and 28800 baud.  Those
     rates were not previously supported by ssppeecc.

Fix For Canberra Multiport II Support
     A bug in the support for the Canberra Multiport II MCA devices for
     configurations with less than the full complement of six MCA modules, where
     certain ssppeecc commands such as mmccaa__sseell((""??""))  would cause ssppeecc to crash, has
     been fixed.

July 9, 2009 - RELEASE 5.08.03-12

New dd22ppss Geometry Variation
     A variation on the standard ppssiicc geometry for the ERSF BM02 (D2AM) beamline
     is now included.  The diffractometer differs in that the sample circles are
     stacked as eettaa, cchhii, mmuu, pphhii rather than eettaa, mmuu, cchhii, pphhii as in the
     standard ppssiicc.  Currently only the ""dd11 dd22 ss11"" modes are implemented and
     only for the eettaa sample circle fixed at zero.  The configuration should be
     installed as geometry ppssiicc with name dd22ppss.  The motor mnemonics and macros
     are otherwise the same as for ppssiicc.

Fix For ESRF/TACO Serial Device Configuration
     A bug, introduced in ssppeecc release 5.08.03-4, where the ssppeecc configuration
     editor, eeddccoonnff, did not properly read in serial devices configured to use
     the EESSRRFF or TTAACCOO interface type, has been fixed.  With the bug, the
     configuration editor would display the initial TTAACCOO:: from the ccoonnffiigg file
     as part of the device name and not show the interface type as TTAACCOO.

Fix For Using ^^CC Around TANGO Calls
     A problem, where a ^^CC keyboard interrupt during the TANGO user-level calls
     of ttaannggoo__iioo(()), ttaannggoo__ggeett(()) and ttaannggoo__ppuutt(()) could cause memory corruption
     leading to a subsequent segmentation fault crash, has been fixed.

July 1, 2009 - RELEASE 5.08.03-11

Fix For Out-Of-Bounds Array Bug
     A bug, introduced in ssppeecc release 5.08.01-9, where repeated access to
     out-of-bounds data array elements would lead to the message ""OOuutt ooff
     tteemmppoorraarryy cceellllss"" and made ssppeecc unusable, has been fixed.

June 30, 2009 - RELEASE 5.08.03-10

Support For the National Instruments VME-GPIB Module
     ssppeecc now includes built-in support for the National Instruments VME-GPIB
     module.  See the _n_i_g_p_i_b help file for more details.

June 20, 2009 - RELEASE 5.08.03-9

Improved GPIB Error Messages
     The more frequent GPIB error messages, such as ""GGPPIIBB ttiimmeeoouutt"", now show the
     associated GPIB controller number (for other than controller zero) and
     device address, which may be useful in diagnosing hardware problems when
     many GPIB devices are involved.  This update is only for the National
     Instrument GPIB controllers, but covers both the built-in and the external
     driver (or library) support.

Fix To Accommodate Old OMS Cards
     Some of the recent updates to the OMS support had made very old OMS
     controllers (particularly ISA bus models) unusable.  That issue is fixed in
     this release, and the older cards are again usable.

June 18, 2009 - RELEASE 5.08.03-8

Fixed Missing Shared Array Update In aarrrraayy__ppiippee(())
     When the aarrrraayy__ppiippee(()) function obtains new array data, it now updates the
     shared-array update flag used by other processes to detect changes in the
     shared array data.

Minor Fix For Reading Optional Motor Parameters
     A small issue, where ssppeecc would send a command to certain models of motor
     controller to set the current value of an optional motor parameter when a
     mmoottoorr__ppaarr(()) command was used to read the value, has been fixed.  This fix
     simply eliminates an unnecessary hardware access.  The parameter value
     returned by the command is as before.

Update To Attocube ANC350 Support
     The code for the Attocube ANC350 will now update the current values (values
     returned by mmoottoorr__ppaarr(())) for non-standard optional motor parameters
     included in the ccoonnffiigg file to the values contained in a ..aappss file sent to
     the controller using the mmoottoorr__ppaarr(()) ""llooaadd"" option.

An Initialization Sequence Can Now Be Configured For OMS Motors
     If a non-standard optional motor parameter named ""iinniitt__sseeqquueennccee"" is created
     for an OMS motor controller motor, the string value of the parameter wil be
     sent to the controller by ssppeecc during hardware configuration as an
     initialization sequence.  Only certain commands, such as those for
     configuring limits and the general purpose I/O pins, are allowed in the
     string.  See the _o_m_s help file for complete details.

June 15, 2009 - RELEASE 5.08.03-7

New TIFF Support With ffmmtt__wwrriittee(()), ffmmtt__rreeaadd(())
     ssppeecc now includes basic support to save two-dimensional array data to TIFF
     output files using the ffmmtt__wwrriittee(()) function.  Code for reading TIFF files
     using ffmmtt__rreeaadd(()) is included, but is disabled by default, as it requires
     linking with lliibbttiiffff..aa, which is not part of the ssppeecc distribution.  See
     the ffmmtt__ttiiffff..cc file in the ssppeecc distribution for implementation details and
     how to enable the TIFF read functionality.

Fixed Delimiter Issues With aarrrraayy__dduummpp(()) From Previous Release
     A couple of problems when using the ""DD=="" option introduced for aarrrraayy__dduummpp(())
     in the previous release have been fixed.

Update To Attocube ANC350 Support
     The support for the Attocube ANC350 will now track changes to the
     ""sseennssoorruunniitt"" parameter made by loading ..aappss files, by reading the ccoonnffiigg
     file or directly through mmoottoorr__ppaarr(()).  Previously, the parameter's value
     was read from the controller during hardware configuration and that value
     was used to label units displayed with the mmoottoorr__ppaarr(()) ""dduummpp"" option.

June 11, 2009 - RELEASE 5.08.03-6

New aarrrraayy__dduummpp(()) Options
     Additional options are now available to the aarrrraayy__dduummpp(()) function.  In
     particular, additional pprriinnttff(())-style format options are available for
     integer data types, one can now specify an arbitrary delimiter character,
     and one can now control the number of data elements printed per line when
     outputting two-dimensional arrays.  See the aarrrraayy__dduummpp(()) entry in the
     _a_r_r_a_y_s help file for complete details.

Improved Support For UDP Sockets
     The user-level socket support for UDP socket connections has been updated
     to provide more robust functionality.  Previously, reading from UDP sockets
     did not work well.

Improved ssoocckk__ppaarr(()) ""qquueeuuee"" Option
     The ""qquueeuuee"" option to the ssoocckk__ppaarr(()) command has previously returned the
     number of available bytes that have been read from the socket into ssppeecc,
     but have not yet been retrieved using ssoocckk__ggeett(()).  (Data could remain in
     the queue due to a previous ssoocckk__ggeett(()) call only reading up to an
     end-of-string match or a specific number of bytes.)  In this release, if
     there are leftover bytes remaining in the queue from the prior ssoocckk__ggeett(())
     call, that number will still be returned.  However, if there are no
     leftover bytes, ssppeecc will now query the underlying kernel driver to see if
     there is data available and will return that value.

Fix For sseerr__ppaarr(()) ""qquueeuuee"" Option
     The ""qquueeuuee"" option to the sseerr__ppaarr(()) function has been long documented to
     return the number of bytes in the input queue, but has instead returned a
     fixed value of one if there were one or more bytes available (for UNIX-type
     serial devices).  The function now returns the number of bytes available.

Fix For aarrrraayy__ppiippee(()) With 2D Data Arrays
     A bug, where the aarrrraayy__ppiippee(()) (or ddaattaa__ppiippee(())) function would only fill the
     first row of a returned two-dimensional array, has been fixed,

Fix For aarrrraayy__ppiippee(()) With Big Shared Arrays
     A bug, where the aarrrraayy__ppiippee(()) (or ddaattaa__ppiippee(())) function would generate a
     spurious error about a too large array when trying to read into a shared
     array larger than half a megabyte, has been fixed.

May 28, 2009 - RELEASE 5.08.03-5

Fix For Struck SIS1100 Driverless Support
     A small timing problem with the Struck SIS1100 PCI cards using ssppeecc's
     recently added driverless support, where the card could become unresponsive
     to ssppeecc after repeated initializations, has been fixed.

New Emergency Stop Feature For OMS MAXv Controllers
     For Oregon Microsystems MAXv VME motor controllers, if both limits are
     found active at the same time, ssppeecc will treat that as an emergency stop
     signal.  The effect is very similar to what happens when a single hard
     limit, in that ssppeecc will stop all active motors and reset to command level.
     The difference is that a different message will be displayed on the screen,
     and if using ssppeecc in server mode, an ""eemmeerrggeennccyy__ssttoopp"" event will be sent to
     clients.  Note, with most models of OMS controllers, it is not possible to
     detect when both limits are set.

Fix For EPICS Encoder Motor Initial Value
     An issue dealing with the initial value displayed for EPICS motors after
     ssppeecc release 5.08.01-4 (and partially fixed in ssppeecc release 5.08.02-3), has
     been fixed for motors where the UUEEIIPP (use encoder if present) process
     variable is nonzero.  The order of events produced by the standard EPICS
     motor record caused ssppeecc to report the initial motor position based on the
     RRRRBBVV (raw read back value) process variable without correcting for the
     encoder resolution.  ssppeecc will now recalculate the motor position whenever
     a UUEEIIPP event is received.

May 21, 2009 - RELEASE 5.08.03-4

New Polled Macro-Hardware Counter Type
     A new polled macro-hardware counter type is available.  These counters will
     be polled using the standard wwaaiitt(()) function.  Counting won't end until
     both the master timer and all polled macro-hardware counters have finished.
     See the _m_a_c___h_d_w file for details.

Support For Attocube ANC350 Piezo Controller
     This ssppeecc release contains preliminary support for the Attocube ANC350
     piezo controller over an Ethernet connection.  See the _a_t_t_o_c_u_b_e help file
     for implementation details.  The controllers should have current firmware
     (later than 0.0.2.1) in order for ssppeecc's limit sensing to work properly.

New sseerr__ppaarr(()) Options for DTR, RTS, DSR
     The sseerr__ppaarr(()) function can now be used to set values for the modem control
     Data Terminal Ready (DTR) and Request To Send (RTS) signals on standard
     serial interfaces.  Also, the Data Set Read (DSR) signal can be read.  See
     the _s_e_r_i_a_l help file for details.

Parameter Settings Can Be Combined With sseerr__ppaarr(())
     Multiple serial interface parameters can now be set with one call of
     sseerr__ppaarr(()) using a comma-delimited string of assignments.  See the _s_e_r_i_a_l
     help file for details.

Configuration Editor Now Uses TACO For Serial Device Type
     The serial interface device type used in the hardware configuration file
     and configuration editor that was formerly named EESSRRFF is now called TTAACCOO.
     Both ssppeecc and the configuration editor will continue to recognize the old
     name, but the configuration editor will use TTAACCOO when writing out updated
     ccoonnffiigg files.  ssppeecc binaries since release 5.01.01 will recognize both
     names.  Previous releases of the configuration editor will not.

May 11, 2009 - RELEASE 5.08.03-3

Final Fix For Local Variables in Recursive Macro Functions
     A remaining problem with the fixes in the two previous releases for local
     variables in macro functions, where a macro function could no longer return
     an associative array local variable, has been fixed.

May 5, 2009 - RELEASE 5.08.03-2

Tweak Of Fix For Local Variables In Recursive Macro Functions
     A bug, introduced in the previous release and associated with the fix for
     macro function local variables used in recursive calls, where a llooccaall
     declaration of a variable as an associative array within a macro function
     was broken, has been fixed.  Also, a second introduced bug, where using a
     local associative array within a macro function as an argument to a call of
     another macro function caused a segmentation fault when running ssppeecc in
     server mode, has been fixed.

March 16, 2009 - RELEASE 5.08.03-1

Install Script Simplified
     Questions related to obsolete or little-used hardware options asked by the
     IInnssttaallll script have been eliminated.  Specifically, questions for the cciibb,
     ccvvxxii, kksscc__ssccssii and ssiiccll parameters are gone.  Note, though, if the
     associated object files or libraries are still needed, they should be
     entered as values for the ssiittee__oobbjj or ssiittee__lliibb parameters, as appropriate.
     The updated IInnssttaallll script will automatically convert old iinnssttaallll__ddaattaa
     files to the new format.  Also, the IInnssttaallll script no longer asks whether
     to include CAMAC or VME support.  Such support will be included for all
     standard installations.  (As before, it is still possible to prevent
     linking in hardware support by manually editing the uu__hhddww..cc file, although
     there is little reason to go to that trouble.)

Can Link With TANGO Without TACO
     It is now possible to install spec with TANGO support included but TACO
     support left out.

Local Variables Now Behave Well In Recursive Macro Functions
     Previously, local variables used in a macro function would be reset to zero
     on return from a recursive call to the same macro function.  Now, local
     variables behave as expected.

ssppeecc Server Position/Counts Update Frequency Throttled
     Position update events while moving and counter update events while
     counting sent by a ssppeecc server to its clients will now be limited to a rate
     no higher than four times per second.

ssppeecc__ppaarr((""??"")) Now Shows Default Values
     When the current value differs from the default value, the ssppeecc__ppaarr((""??""))
     command now displays the default value in parenthesis.

New ssppeecc__ppaarr((""sseett__ddeeffaauullttss"")) Option
     A new ssppeecc__ppaarr((""sseett__ddeeffaauullttss"")) command will now set all the ssppeecc__ppaarr(())
     parameters to their default values.

New ssppeecc__ppaarr(()) Option For Enabling a Motor Warning Message
     A new ssppeecc__ppaarr(()) option ""wwaarrnn__nnoott__aatt__ppooss"" enables printing of a warning
     message whenever a motor doesn't reach its final position.  Previously, the
     warning message was not optional, but was only available when ssppeecc was
     linked with TACO libraries.

Fix For pplloott__ccnnttll((""kkiillll"")) With Multiple Windows
     An ancient bug, where using the pplloott__ccnnttll((""kkiillll"")) command with multiple
     plot windows open would make reopening some of the windows impossible, has
     been fixed.

February 26, 2009 - RELEASE 5.08.02-7

Fix For Recently Broken OMS Encoder Support
     The support added in ssppeecc release 5.08.02-4 for position maintenance mode
     with Oregon Micro Systems motor controllers (OOMMSS__PP controller type)
     inadvertently broke the basic encoder support (OOMMSS__EE controller type).
     That problem is fixed in this release.

Fix For Keyboard Generated Stop Signal Issue
     The keyboard generated stop signal (usually associated with ^^ZZ) has always
     been purposely ignored by ssppeecc.  However, when running a subprocess via the
     uunniixx(()) command, such as with uunniixx((""vvii ssoommeeffiillee"")), a ^^ZZ would stop the
     subprocess and ssppeecc would hang (although recovery was possible by sending a
     kill signal to the subprocess via another terminal window).  This ssppeecc
     release fixes that problem by allowing ssppeecc to receive the stop signal
     while such a subprocess is running.  Thus, both the subprocess and ssppeecc are
     stopped (and both can be resumed with the shell ffgg command).  Note, ssppeecc
     still ignores the keyboard stop signal at all other times.

February 24, 2009 - RELEASE 5.08.02-6

New ssttrrddeeff(()) Built-In Function
     The new ssttrrddeeff(()) function returns a string containing the definition of the
     macro name given as an argument.  If there is no such defined macro, the
     function returns its argument.

New Optional "Units" Argument To ggeettvvaall(())
     The ggeettvvaall(()) built-in function now takes an optional third argument.  If
     present, it will be appended to the current value displayed in parenthesis
     after the first argument prompt string:

        SSPPEECC..11>> pp ggeettvvaall((""SSaammppllee ttoo ddeetteeccttoorr"",, 110000,, "" mmmm""))
        SSaammppllee ttoo ddeetteeccttoorr ((110000 mmmm))??

New ""lliissaa"" ssuurrff Geometry
     A new liquid surface diffractometer geometry for the LISA instrument at
     Petra III is included in this ssppeecc release.

Support For Additional Physik Instrumente Motor Controllers
     The Physik Instrumente (PI) model C-663, C-862 and C-863 motor controllers
     are now supported by ssppeecc.  In addition, ssppeecc now supports the
     ""hhoommee__mmeetthhoodd"" standard optional motor parameter for PI motor controllers.
     If set, its value will be used as the argument to the controller's FFEE (find
     edge) command.

February 20, 2009 - RELEASE 5.08.02-5

Fix For AI Solutions DAQ Modules
     A bug introduced with the recent updates to the support for the AI
     Solutions DAQ (formerly called HANARO KISIM) USB modules, where the elapsed
     counts, elapsed time, external triggers and count events could sometimes
     have preposterous incorrect values, both when displayed by mmccaa__ppaarr((""dduummpp""))
     and when returned by the associated mmccaa__ppaarr(()) option, has been fixed.

February 18, 2009 - RELEASE 5.08.02-4

Server/Client Now Maintains Associative Elements As Strings
     The ssppeecc server/client protocol transfers associative array index and value
     elements as strings.  Previously, strings containing numbers would be
     converted to numbers when received.  That would cause strings such as
     "090105" or "0123" to be converted to 0 and 81 respectively, as both would
     be treated as octal values (the first contains an invalid octal digit so
     becomes zero).  ssppeecc now maintains the received values as strings.  Note,
     conversion to numbers will be automatic when the values are used in a
     number context, just as with any locally generated value.

The llooccaall Help File Now Displayed On Start Up
     A long documented but never implemented feature, where an optional file
     named llooccaall in the ssppeecc help directory would automatically be displayed on
     start up, is now available.

Fix For OMS Position Maintenance With Steppers
     A problem associated with the position-maintenance support added for OMS
     stepper motor controllers in release 5.08.02-1 has been fixed.  The problem
     was that a motor would run away under certain conditions associated with
     changing the position registers (as with the ssppeecc cchhgg__ddiiaall(()) function).

Fix For XIA DXP Elapsed Time Value
     The ssppeecc code for the XIA DXP modules now reads the clock rate from the
     module when it is available rather than using compiled-in values (20 or 40
     MHz, depending on model).  The clock rate is only used with two mmccaa__ppaarr(())
     parameters:  elapsed real time as returned by ""rreeaall"" and dead time as
     returned by ""ddeeaadd"".

January 28, 2009 - RELEASE 5.08.02-3

New ttlloogg Log File Type
     A new type of lloogg file is available.  If the name of an output file begins
     with the characters ""ttlloogg"" or ends with the characters ""..ttlloogg"", all output
     sent to the ""ttttyy"" device (the screen) will be written to that file, but
     unlike regular lloogg files, output sent to other files or devices will not be
     saved to a ttlloogg file.  As with all types of lloogg files, output is not turned
     off on errors or ^^CC interrupts, and output generated by functions that
     ""ppaaiinntt"" the screen, such as ttttyy__ffmmtt(()), ttttyy__mmoovvee(()), pplloott__mmoovvee(()), sshhooww__hheellpp(())
     and ddaattaa__pplloott(()), isn't written to the file.

Log File Carriage Returns Translated
     ssppeecc now translates carriage return characters to newline characters in lloogg
     file output.  This change will make lloogg files that contain output from
     updated moves and counts easier to handle with editors and other file
     handling utilities.

Debugging Now Available For TANGO Functions
     The ttaannggoo__iioo(()), ttaannggoo__ggeett(()) and ttaannggoo__ppuutt(()) functions can now display
     debugging information.  Set the DDEEBBUUGG level to 128 to see the debugging
     output.

Extra TANGO Attribute Information Available With ttaannggoo__ggeett(())
     Additional information associated with data obtained using ttaannggoo__ggeett(()) is
     available by passing an associative array as an optional third argument.
     Elements of the array will be assigned the data quality factor, time stamp
     and other attribute information.  See the _t_a_n_g_o help file for details.

Fix For EPICS Motors
     An issue, where ssppeecc would display the wrong motor position for an EPICS
     motor under certain conditions, has been fixed.  The problem would only
     occur if the first event sent to ssppeecc for the motor's RRRRBBVV process variable
     had a value of zero while the corresponding dial position from the ssppeecc
     sseettttiinnggss file was nonzero.  This problem has only been an issue since
     ssppeecc's 5.08.01-4 release, which began using only event notifications for
     keeping track of EPICS motor positions.

January 22, 2009 - RELEASE 5.08.02-2

Fixes For Image Device Support
     A buffer size limitation in iimmaaggee__ppaarr(()) that caused problems with the
     Frelon cameras has been fixed.  A bug, where region-of-interest parameters
     used with the

     iimmaaggee__ppaarr((sseell,, ""rrooii"",, bbeegg__rrooww,, eenndd__rrooww,, bbeegg__ccooll,, eenndd__ccooll))

     invocation couldn't be greater than 128, has been fixed.

Updates For AI Solutions DAQ Modules
     The support for the AI Solutions DAQ (formerly HANARO KISIM) USB modules
     has been updated to enable readout of the 256x256 preview images returned
     when the device is acquiring data.  Also, the restriction on the absolute
     value of the ooffffsseett__xx and ooffffsseett__yy parameters to the current resolution has
     been removed.  See the updated _k_i_s_i_m or _a_i_s_o_l_u_t_i_o_n_s help file for more
     information.

January 13, 2009 - RELEASE 5.08.02-1

Updates To ssppeecc Code
     The majority of the ssppeecc package source code has been updated from
     traditional (or K&R) C to ANSI/ISO Standard C.  Although ssppeecc is still
     distributed as a 32-bit application, the code updates also include changes
     to allow 64-bit distributions in the future.  Most of the C files that are
     included in the distribution will reflect the updates, mainly in terms of
     function declarations.  The software should behave the same as before,
     although with changes to many thousands of lines of code, it is possible
     for a new bug to have slipped past the quality control checks.  As always,
     if you note any anomalous behavior in this ssppeecc release, please promptly
     inform CSS.

Position Maintenance Support For OMS Steppers
     ssppeecc now includes support for the position-maintenance feature for stepper
     motors with encoders as is available with most OMS motor controllers.  See
     the ssppeecc _o_m_s help file for details.

Removed Sixteen Motor Limit On Huber 9300
     The configuration restriction on the number of motors allowed for the Huber
     9300 motor controller has been removed to accommodate new versions of the
     controller that support more than sixteen channels.

USB Reset Added For XIA DXP
     The support for the USB interface on the XIA DXP devices now includes
     sending an initial USB reset, which fixes a problem that appeared with USB
     2.0 versions of the device, where spec could only connect once without
     cycling the power to the device.

Fix For GPIB-ENET Big Reads
     A bug, where ssppeecc's built-in support for the National Instruments GPIB-ENET
     device left gaps in the returned data when reading large blocks of data,
     has been fixed.

Fix For PCI DAC Motors
     A bug, where ssppeecc did not enable I/O port access when the Measurement
     Computing DDA04 or DDA08 (or compatible) PCI analog output boards were
     used, has been fixed.  Note, if other I/O port devices were configured,
     access would be enabled anyway, and no problems would be observed.  If not,
     ssppeecc would crash.

Improved Formatting For TANGO Queries
     The output for the ""??""  and ""????""  options to ttaannggoo__iioo(()), ttaannggoo__ggeett(()) and
     ttaannggoo__ppuutt(()) are now better formatted, particularly with respect to columns
     lining up properly.

Improved Axis Scaling For ttiimmeessccaann Macro
     The code for the automatic rescaling of the xx-axis (time) in the standard
     ttiimmeessccaann macro has been improved to work better with certain scan
     parameters, particularly with long sleep times and counting to long monitor
     times.

November 30, 2008 - RELEASE 5.08.01-13

Update For Tsuji CT16-02/NCT08-01/NCT08-02 Counter/Timers
     ssppeecc now supports the socket interface available on the Tsuji CT16-02,
     NCT08-01 and NCT08-02 counter/timers.  In addition, the NCT08 support has
     been updated to use commands that allow count times and monitor presets to
     be specified to higher precision than with the CT16 (microseconds versus
     milliseconds for time and to multiples of eight versus 1000 for monitor
     presets).

October 29, 2008 - RELEASE 5.08.01-12

Fix For Recent Data Array State File Bug
     A serious bug introduced in ssppeecc release 5.08.01-9, where data array sizes
     would not be restored properly from the saved state file, has been fixed.
     Please obtain a updated ssppeecc release from CSS if affected.

Compumotor SX Updates
     The support for the Compumotor model SX motor controller has been updated
     to work with more than one controller at a time using separate serial
     device nodes.  Previously, multiple controllers were supported only via
     daisy-chaining over a single serial node.  In addition, the ""rreeaadd""
     mmoottoorr__ppaarr(()) command pass-through option will now return the string received
     by the motor controller.  Previously, it didn't.

October 22, 2008 - RELEASE 5.08.01-11

Fix For ppssiicc Sectors Limit Check
     A bug in the enhanced ppssiicc sector search introduced in ssppeecc release
     5.06.04-1 where possible sectors in the exhaustive search would fail the
     motor-limit test if the sign (of user*dial) parameter for a geometry motor
     was negative has been fixed.

Improved EPICS Monitor Support
     ssppeecc's recently added support for EPICS monitors has been updated to insure
     pending callbacks for monitored values are evaluated prior to an
     eeppiiccss__ggeett(()).  Previously, a ""mmoonniittoorr__cchheecckk"" eeppiiccss__ppaarr(()) call, some form of
     a wwaaiitt(()) call, calls to the built-in EPICS motor, counter, etc. support or
     a return to the main prompt was necessary.

Update For Ortec 974/995 Counter/Timer
     The default ""aallaarrmm mmooddee"" disabled setting added for the Ortec 974/995
     counter/timers for the GPIB configuration in ssppeecc release 4.03.10 to
     accommodate modified Ortec firmware has now also been made the default for
     the serial interface.

September 25, 2008 - RELEASE 5.08.01-10

Fix For Recently Broken State-File Name Behavior
     An error made during a recent code cleanup that resulted in the user-name
     part of the ssppeecc state file names truncated to six characters is corrected
     in this release.  Files in the uusseerrffiilleess directories created using ssppeecc
     releases 5.08.01-8 or 5.08.01-9 can be manually renamed to preserve that
     state file content.

Command Completion Fix
     An old bug, where the command-line editing command-completion feature would
     produce completions for EPICS, TACO or TANGO functions when the functions
     were not part of the installation configuration, has been fixed.

September 9, 2008 - RELEASE 5.08.01-9

Fix For ssppeecc Client Connecting To Many ssppeecc Servers
     A problem, where some connection attempts failed when a ssppeecc client tried
     to connect to more than two ssppeecc servers by ssppeecc name (rather than explicit
     port number), has been fixed.

Fix For ccoonnffiigg__mmaacc On ssppeecc Server
     A bug, where a ssppeecc server's ccoonnffiigg__mmaacc macro wouldn't get called for a
     rreeccoonnffiigg command typed at the ssppeecc server keyboard immediately after a
     client sent a remote command, has been fixed.  Note, normally, if a macro
     named ccoonnffiigg__mmaacc exists, it will be run automatically after ssppeecc reads the
     hardware ccoonnffiigg file, both on start up and on the rreeccoonnffiigg command
     (included in the standard ccoonnffiigg macro).

Fix For Error On Out-Of-Bounds Array Assignment
     An attempt to access a data array element beyond the array's size is
     supposed to generate an error message, but not be treated as a fatal error.
     A bug, where using an out-of-bounds array element on the left side of an
     assignment expression would produce the spurious error message ""TTrryyiinngg ttoo
     aassssiiggnn ttoo aann iimmmmuuttaabbllee"" and generate a fatal error, has been fixed.

Fix For MDrive Motor Controllers
     An issue with ssppeecc's initialization of the IMS MDrive motor controllers
     which caused problems in recognizing all the configured MDrive channels
     under some conditions has been fixed.  Previously, ssppeecc would send an EEEE==00
     command to disable encoders if the channel was configured as MMDDRRIIVVEE and
     send an EEEE==11 to enable encoders for an MMDDRRIIVVEE__EE configuration.  For some
     models that didn't have an encoder capability, the command would generate
     an unexpected error, which would be associated with the next command ssppeecc
     issued.  With this release, ssppeecc no longer sends EEEE==00 for channels
     configured as MMDDRRIIVVEE, but will send EEEE==11 for MMDDRRIIVVEE__EE channels.  Also,
     ssppeecc's MDrive support has been updated so that unexpected error responses
     should no longer throw off the command-response synchronization.

August 23, 2008 - RELEASE 5.08.01-8

Updated eeppiiccss__hhoommee Syntax
     The eeppiiccss__hhoommee parameter used in the ssppeecc IInnssttaallll script can now contain
     the complete path name to the directory that holds the EPICS channel access
     libraries.  The prior behavior, where eeppiiccss__hhoommee contained the path to
     either the bbaassee directory or the lliibb directory, continues to be supported.

Preliminary Support For Solaris 10 (x86) Platform
     Installation of  ssppeecc on the Solaris 10 (x86) platform is now possible,
     although such support is still in the preliminary stage and contains no
     support for direct access to PCI cards, as is available for LLiinnuuxx on x86
     platforms.

Updates To Preliminary Support For the Canberra Lynx (DSA-3000) MCA
     Several updates to the preliminary support for the Canberra Lynx (DSA-3000)
     have been made.  Specifically, the command mmccaa__ppaarr((""ddeevviiccee__iidd"")) is fixed
     and no longer causes a segmentation fault, the command
     mmccaa__ppaarr((""ggrroouupp__ssiizzee"")) has been added as a synonym for mmccaa__ppaarr((""nnppttss"")) and
     the command mmccaa__ppaarr((""sseelleecctt__ggrroouupp"")) has been added as a synonym for
     mmccaa__ppaarr((""ggrroouupp"")).

July 14, 2008 - RELEASE 5.08.01-7

Support For Siemens D5000 Diffractometer
     This ssppeecc release includes support for the Siemens D5000 X-Ray
     Diffractometer, including both motor moving and counting functions.  The
     connection is over a serial interface.

Fix For Obscure ssppeecc Client Error
     A spurious instance of the ""NNoott aalllloowweedd ttoo ccoonnnneecctt ttoo sseellff"" error that
     occurred when a ssppeecc client had configured server resources using the
     ""llooccaallhhoosstt"" host name but where the client was also invoked in server mode
     with the --SS flag has been fixed.

Tweak Macro Tweaked
     A minor error of ten-year vintage in the definition of the ttww tweak macro
     for motors has been fixed.  Previously, when the option for displaying
     counts was active, the macro would display the counts associated with
     SS[[ddeett]] rather than SS[[DDEETT]].

July 2, 2008 - RELEASE 5.08.01-6

Fix For rreemmoottee__aassyynncc(())/rreemmoottee__ppoollll(())
     A problem, where the rreemmoottee__ppoollll(()) function could fail to detect a ssppeecc
     server-generated event from a prior rreemmoottee__aassyynncc(()) call, has been fixed.
     See the _s_e_r_v_e_r help file for updated details on using the rreemmoottee__aassyynncc(())
     and rreemmoottee__ppoollll(()) ssppeecc client functions.

June 25, 2008 - RELEASE 5.08.01-5

New mmoottoorr__ppaarr(()) Option To Return ""ssiiggnn""
     The ""ssiiggnn"" motor parameter, which is +1 or -1 indicating the rotation sense
     of user angles versus dial angles, can now be read via the mmoottoorr__ppaarr(())
     function.

Fix For GPIB Problems After a Serial-Poll Timeout
     An old problem with most of the GPIB controller support in ssppeecc, where a
     GPIB serial poll that timed out could cause subsequent GPIB accesses to
     fail, has been fixed.

Fix For OMS MAXv Used With Struck SIS3150 USB-VME Module
     A problem has been fixed with the recent support for the Struck SIS3150
     USB-VME module that caused ssppeecc to crash when configured with an OMS MAXv
     motor controller VME module.

New Configuration Option For Struck SIS1100 PCI Card
     It is now possible to configure bus:slot numbers in the AADDDDRR field of the
     configuration editor to distinguish among identical Struck SIS1100 PCI
     cards configured to use ssppeecc's built-in support.  If the AADDDDRR is set to
     zero, ssppeecc will behave as before, with multiple identical PCI cards
     assigned to VME units in the order in which they are discovered by ssppeecc.

Fix For TANGO Support
     A problem with the implementation of the built-in symbol TTAANNGGOO__EERRRR in the
     new TANGO C-binding support has been fixed.

June 6, 2008 - RELEASE 5.08.01-4

Fix For EPICS "Monitors"
     A problem in the implementation of EPICS monitors in ssppeecc release
     5.07.02-10 that could result in unexpected timeouts on subsequent
     eeppiiccss__ggeett(()) calls has been fixed.  In addition, values for EPICS EENNUUMM types
     for which monitors have been created are now returned as strings rather
     than integers.

New EPICS ""ccoonnnneecctt"" Option For eeppiiccss__ppaarr(())
     It is now possible to bundle many initial channel-access PV connections
     into a single network access by using the new eeppiiccss__ppaarr(()) ""ccoonnnneecctt"" option.
     Such a call will perform the channel access call to create the connection,
     but will not force the channel access code to broadcast the request to the
     network.  Thus many such requests can be put into a single broadcast.  See
     the _e_p_i_c_s help file.

More Efficient EPICS Motor Support
     An unnecessary channel access read for motor positions has been eliminated
     from the ssppeecc code, as the current motor position for any EPICS motor is
     already available via callback events.

May 29, 2008 - RELEASE 5.08.01-3

Fix For Reconnecting To ssppeecc Server Motors
     A problem introduced in ssppeecc release 5.06.03-10, where ssppeecc clients might
     not reconnect to ssppeecc server motors after a server exits and restarts, has
     been fixed.

Fix For Extra ""mmoovvee__ddoonnee"" Events From ssppeecc Server Motors
     A problem, where ""mmoovvee__ddoonnee"" events would be sent by a ssppeecc server before
     the backlash correction had been performed, has been fixed.

Minor Fix For Canberra Multiport
     A bug, where an unrecognized mmccaa__ppaarr(()) parameter sent to the Canberra
     Multiport MCA code might cause a segmentation fault, has been fixed.

May 19, 2008 - RELEASE 5.08.01-2

Support for Struck SIS3150 USB-VME Controller
     ssppeecc now includes support for the Struck SIS3150 USB-VME controller.

May 9, 2008 - RELEASE 5.08.01-1

ENHANCEMENTS
Data-Group Data-Type Install Option Eliminated
     The option to choose ffllooaatt or ddoouubbllee for the data-group data-type
     configuration has been eliminated from ssppeecc's installation script.  The
     type now is fixed at ddoouubbllee.  (In ancient times, the megabyte of virtual
     memory and disk storage space that could be saved by choosing ffllooaatt
     sometimes mattered.)  Note, the data-group feature hasn't been used by the
     standard macros since the release of ssppeecc 5 (Feb 1, 2001).  Eliminating
     this configuration option should also eliminate the confusion over whether
     the storage size applied to anything else in ssppeecc beyond the data groups
     (it didn't).

Attempted Move of "Unresponsive" Motors Now Fatal Error
     Attempts to move an unresponsive motor will now cause a fatal error.  That
     is, ssppeecc will jump out of any executing statement blocks and return to the
     highest level prompt.  Previously, ssppeecc would issue an error message but
     continue.  Most motors are marked as unresponsive during hardware
     initialization when a presence test fails, although several controllers
     will mark motors unresponsive after certain communication failures.  The
     EPICS and ssppeecc-server support can mark motors unresponsive on disconnect
     events and responsive again automatically if the connection is restored.

New mmoottoorr__ppaarr(()) Option To Return ""ooffffsseett""
     The ""ooffffsseett"" motor parameter, which is the difference between the user and
     dial motor positions, can now be read via the mmoottoorr__ppaarr(()) function.

New mmoottoorr__ppaarr(()) Option To Return ""wwrriittaabbllee"" Status
     The new mmoottoorr__ppaarr(()) ""wwrriittaabbllee"" option returns a value indicating the
     permission status of a motor, as set in the hardware ccoonnffiigg file.  If bit 1
     is set in the return value, the motor can be moved.  If bit 2 is set, the
     limits can be changed.  A fully protected motor will return zero.  A fully
     open motor will return 3.

New Output Options For aarrrraayy__dduummpp
     The aarrrraayy__dduummpp(()) function (and ddaattaa__dduummpp(())) now accept an xx (or XX) format
     identifier in the pprriinnttff(())-style optional argument, in addition to the ee, gg
     and ff formats already recognized.  If the ""%%xx"" format is used, double
     values will be converted to integers.  In addition, initial characters may
     be included in the format string, for example, ""00xx%%0088xx"" is valid.

Server Interactive Screen Re-prompts After Client-Generated Output
     When a client to a ssppeecc server produces output on the server's interactive
     screen by way of remote commands, the server will now refresh the prompt
     and any text an interactive user may have typed.  Note, though, this
     feature is only implemented when ssppeecc is linked with one of the optional
     command-line editing libraries (lliibbeeddiitt or rreeaaddlliinnee).

New "Scan-Active" Bit In Standard Macro Status Variable __ssttyyppee
     Bit 00xx8800 in the __ssttyyppee global variable is now set and cleared by the
     standard scan macros.  The bit is set in the standard __hheeaadd and rreessuummee
     macros and cleared by the standard __ttaaiill and __ssccaannaabboorrtt macros.

Floating Values Saved With Greater Precision In Configuration Editor
     The eeddccoonnff configuration editor now writes all floating-point values to the
     ccoonnffiigg file with twelve digits of precision.  Previously the
     steps-per-degree parameter was written with that precision, but other
     floating values were written with the default six significant digits.

New Monochromator Configuration Supported
     A new two-monochromator configuration is contained in the eenneerrggyy..mmaacc
     macros.  The presence of the motor mnemonics mmoonnoo and mmoonnpp selects the new
     configuration.

New EEPPIICCSS__EERRRR, EEPPIICCSS__EERRRR__MMSSGG Built-In Variables
     The new EEPPIICCSS__EERRRR built-in variable (present only when ssppeecc is linked with
     EPICS libraries) will assigned the return value of the channel access calls
     associated with the ssppeecc user-level functions eeppiiccss__ggeett(()), eeppiiccss__ppuutt(()) and
     eeppiiccss__ppaarr(()).  If the channel access return value is EECCAA__NNOORRMMAALL, EEPPIICCSS__EERRRR
     will be assigned a value of zero.  If there is a non-EPICS error, such as
     no connection available, EEPPIICCSS__EERRRR will be assigned a vale of -1.  The new
     EEPPIICCSS__EERRRR__MMSSGG built-in variables is assigned the string message associated
     with the error.

New TTAACCOO__EERRRR, TTAACCOO__EERRRR__MMSSGG Built-In Variables
     New built-in variables TTAACCOO__EERRRR and TTAACCOO__EERRRR__MMSSGG are now included when ssppeecc
     is linked with TACO libraries.  The previous global variables EESSRRFF__EERRRR and
     EESSRRFF__EERRRR__MMSSGG are still recognized for compatibility.  See the _t_a_c_o help
     file for more details.

Following Error Generates Fault For Delta-Tau PMAC/PMAC2 Controllers
     A fatal following error status will now generate a motor fault with
     Delta-Tau PMAC/PMAC2 motor controllers, which will have the same effect as
     hitting a limit, in that any other moving motors will be stopped and ssppeecc
     will reset to command level.

FIXES
Fix For Unresponsive Macro-Hardware Controllers
     A bug with the macro-hardware implementation, where a motor channel would
     be marked unresponsive if the __ccoonnffiigg(()) function returned ""..eerrrroorr.."" when
     called with ""mmoott"" argument but not when called with the ""ccttrrll"" argument,
     has been fixed.  Now, if the __ccoonnffiigg(()) function returns ""..eerrrroorr..""  when
     called with the ""ccttrrll"" argument, not only will all associated channels be
     marked unresponsive, but also the __ccoonnffiigg(()) function won't even be called
     with the ""mmoott"" argument for the associated channels.

Fix For Rare External Shared Array Problem
     A bug, where connecting to an external shared memory array could lead to a
     segmentation fault in ssppeecc, has been fixed.  The problem could occur if the
     process that created the shared array was replaced with another process
     with a shared array of the same name but owned by another user.

Fix For Hardware Parameters Saved In State File
     A editing error in ssppeecc release 5.07.03-4 that disabled the saving of some
     miscellaneous parameters associated with hardware and with some of the
     ssppeecc__ppaarr(()) options has been corrected.

Fix For EEPPIICCSS__MM11 Motors With Initial Limit
     A problem, where ssppeecc didn't flag a limit switch that was active when first
     connecting to an EEPPIICCSS__MM11 type motor, has been fixed.  The symptom would be
     no limit error message when trying to move the motor in the direction of
     the limit.  (EEPPIICCSS__MM11 motors take initial parameter values from the ssppeecc
     hardware ccoonnffiigg file while EEPPIICCSS__MM22 motors take initial parameter values
     from the EPICS database.)

NEW HARDWARE SUPPORT
Support For XIA DXP USB 2.0 Interface
     This ssppeecc release supports the USB 2.0 interface on the newer XIA Saturn
     DXP device.

Driverless Support For Struck SIS1100/3100
     ssppeecc now includes ""ddrriivveerrlleessss"" support for the Struck SIS1100/3100 PCI-VME
     bus adapter.  With the driverless support, no additional software needs to
     be installed.  Previously, this hardware could only be used with a
     vendor-supplied Linux kernel driver.  Note, the driverless support does not
     use DMA.  If large data blocks are to be transferred, the vendor driver
     mode may provide better performance.

Preliminary Support For the Newport SMC100CC Motor Controller
     This ssppeecc release includes preliminary support for the Newport SMC100CC
     motor controllers over a serial interface.

Preliminary Support For the Canberra Lynx (DSA-3000) MCA
     This ssppeecc release includes preliminary support for the Lynx (DSA-3000) MCA
     over an Ethernet interface.

Preliminary Support For the TANGO C-Binding Library
     This ssppeecc release includes preliminary support for the new TANGO C-binding
     library, as developed at ESRF.  New built-in functions to support the TANGO
     interface include ttaannggoo__iioo(()), ttaannggoo__ppuutt(()) and ttaannggoo__ggeett(()).  See the new
     _t_a_n_g_o help file for preliminary details.

changes                      spec 5.07 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 5.07

March 4, 2008 - RELEASE 5.07.04-9

Fix For Crashes With Unresponsive Motor Controller
     A bug, where ssppeecc would crash when a motor hit a limit or a move was
     aborted with ^^CC with some models of motor controller, but only when
     multiple controllers were configured but not all units were present, has
     been fixed.  The problem was first noted with socket-based Galil motor
     controllers.

February 17, 2008 - RELEASE 5.07.04-8

New mmoottoorr__ppaarr(())/ccoouunntteerr__ppaarr(()) Option
     A new ""aaddddeedd??"" option for the mmoottoorr__ppaarr(()) and ccoouunntteerr__ppaarr(()) functions will
     return a value of 1 if the parameter passed as the third argument has been
     added as an optional parameter.  Both built-in optional parameters, such as
     ""hhoommee__sslleeww__rraattee"" and non-built-in parameters, added with the ""aadddd"" option
     or configured on the new parameter screen of the configuration editor, are
     recognized.  The ""aaddddeedd??"" option is the first argument after the mnemonic.

Update For the Delta-Tau PMAC/PMAC2 Controller
     It is now possible to configure many of the II variables for the Delta-Tau
     PMAC/PMAC2 controllers as non-built-in optional parameters using ssppeecc's
     configuration editor.  These values will be programmed in the controller
     during hardware initialization.  For parameters named in the range ""II0000"" to
     ""II9999"", the motor channel number will be inserted between the ""II"" and
     variable number.  For parameters in the range ""II77mmnn00"" to ""II77mmnn99"", the mm
     will be replaced with the channel number divided by 4, and the nn will be
     replaced with the channel number modulus 4 plus 1 (that is, values in the
     range 1 to 4).  For parameters that are named with an II followed by a
     number greater than or equal to 100, no substitutions are made with respect
     to the II variable name.  In addition, II variables associated with the
     non-built-in optional parameter screen of the controller entry will be sent
     to the controller with no substitutions made to the parameter name.

Fix For Newport XPS Motor Controller
     A bug in the code to support the Newport XPS motor controller, which
     prevented having more than two motor groups and having more than two motors
     in a motor group, has been fixed.

February 15, 2008 - RELEASE 5.07.04-7

Micos Controller Fix
     A minor update to the recent rewrite of the Micos support addresses a
     problem in passing very small values to the ""sseettccllwwiinnddooww"" command.

Update For Newport ESP-300 Motor Controller
     ssppeecc no longer considers an axis reported by the Newport ESP-300 motor
     controller with IIDD type ""uunnkknnoowwnn"" as unusable.

February 4, 2008 - RELEASE 5.07.04-6

Fix For Detel S21DC Counter/Timer
     A bug in the recently added support for the Detel S21DC counter/timer from
     GE Inspection Technologies, where counting to fractions of a second was
     broken, has been fixed.

Fix For Compumotor ViX Motor Controller
     A bug in the recently added support for the Compumotor ViX motor
     controller, where setting the dial position (to zero - the only possible
     setting) would generate a spurious time-out error message, has been fixed.

February 2, 2008 - RELEASE 5.07.04-5

Updates For Micos Motor Controllers
     A number of problems with the ssppeecc support for the Micos Pegasus, Pollux
     and Pollux2 motor controllers have been addressed.  Setting of the optional
     ""ddcc__sseettttllee__ttiimmee"" and ""ddcc__ddeeaadd__bbaanndd"" parameters (via the Micos ""sseettccllttiimmee""
     and ""sseettccllwwiinnddooww"" commands) has been fixed.  A new non-builtin parameter
     ""hhoommee__ddiissttaannccee"" is recognized and will be used as the argument to the
     ""nnrreeffmmoovvee"" command, if set.  Otherwise, the default value of +/-100 is
     used.  A number of other issues have been addressed, mostly concerned with
     syntax differences in the Venus-2 language among different models.

Fix For Configuration Editor New Parameter Screen
     A problem where non-integers could only be entered in string mode in the
     value field of the new parameter screen on the eeddccoonnff configuration editor
     has been fixed.

January 30, 2008 - RELEASE 5.07.04-4

Fix For Screen Plot Inconsistency When Plotting Multiple Counters
     Previously, if more than one counter was chosen to be plotted via the
     pplloottsseelleecctt macro, the last counter specified was used to calculate the
     derived values displayed on the screen plots (full width at half max,
     maximum value, center of mass), while the macros which refer to
     corresponding values, such as ppll__CCFFWWHHMM (also known as CCEENN), ppll__CCOOMM, ppll__MMAAXX,
     etc., would use the first counter, leading to confusion.  The plotting
     macros have been revised so that the first counter specified with
     pplloottsseelleecctt is used to calculate the values displayed at the top of the
     screen plots.

Merged ccoouunntteerrss and pplloottsseelleecctt Macros
     The functionality of the ccoouunntteerrss and pplloottsseelleecctt macros has been combined,
     so that when invoked without arguments, both ask for which counters to plot
     and which counters to assign to the DDEETT and MMOONN global variables.  Note,
     though, when invoked with arguments the behavior of the two macros is
     unchanged in order to preserve backward compatibility.  As a reminder, the
     counter assigned to DDEETT will be the last column in the data file during
     scans.  The MMOONN counter will appear as the ##MM data file entry, and will be
     the second to last column in the scan data file.  Also, the MMOONN counter is
     used to calculate the value for the MMOONN__RRAATTEE global variable.

Fixed Issues With ttttyy__ffmmtt(())
     Long standing (but unreported) formatting issues with the ttttyy__ffmmtt(())
     command, such as it breaking lines prematurely under certain combinations
     of text and space characters, have been addressed.

New Server Mode For Alternate Motor-Limit Behavior
     The standard behavior of ssppeecc when a motor hits a limit is to stop all
     currently moving motors, clear the input buffers and reset to the high
     level prompt.  In the original server mode, however, when a motor hits a
     limit, the server  does not stop other motors and reset to the top input
     level.  A new server mode is now available that behaves as normal
     non-server mode with respect to motor limits.  This new server mode (called
     a ""mmooddee--22 sseerrvveerr"") is activated by starting ssppeecc with a --SS22 flag rather
     than the original --SS flag.  Note, a --SS11 flag will also now be recognized
     and is equivalent to a plain --SS.

Macro Motor ""ggeett__ssttaattuuss"" Update
     Additional bits are interpreted in the macro motor ""ggeett__ssttaattuuss"" return
     value.  Returning a value with bit 0x10 set indicates an emergency-stop
     situation and bit 0x20 set indicates a motor fault, which are both
     currently treated in a similar manner to hitting a limit, with all motors
     stopped and control returned to the top level prompt.  See the _m_a_c___h_d_w help
     file.

New Support For FZD Sergen Motor Controller
     Support for a new motor controller developed at the Foschungzentrum Dresden
     Rossendorf is included in this ssppeecc release.  The name of the controller is
     Sergen, and communication is over a serial interface.

Fixes For ffiivveecc and ssiixxcc Geometry Calculations
     A very old sign error in the calculation of the AAZZIIMMUUTTHH variable from motor
     positions (via the ccaallccHHKKLL macro) in the ffiivveecc and ssiixxcc geometries has been
     fixed.  Note, the error only affected the value displayed on the screen or
     printed to the data file.  The value used to calculate motor positions (via
     the ccaallccAA macro) wasn't affected.  Also, the sign of the CCHHII angle found
     via the ccaallccAA macro at a particular singular point in the PPHHII-fixed mode
     was also sometimes incorrect, and that has been fixed.

Renaming From ESRF To TACO
     The built-in functions eessrrff__iioo(()), eessrrff__ddbb(()) and eessrrff__ddcc(()) are now available
     as ttaaccoo__iioo(()), ttaaccoo__ddbb(()) and ttaaccoo__ddcc(()), although the original names will
     remain supported.  Also, the library named lliibbEESSRRFF..aa, included with the
     ssppeecc distribution, has been renamed lliibbTTAACCOO..aa.

Fix For ACS MCB-4B Motor Controller
     A spurious error message with the text ""MMoottoorr iiss ssttooppppeedd"" that sometimes
     appeared when aborting a move on the ACS MCB-4B motor controllers has been
     eliminated.

November 8, 2007 - RELEASE 5.07.04-3

Timing Adjustment For Built-In PCI-GPIB Support
     A small increase in the length of a delay during the I/O port programming
     for GPIB write operations seems to have fixed a time-out problem on at
     least one system that uses a PCI-GPIB rev 1 board.

November 4, 2007 - RELEASE 5.07.04-2

Update For Compumotor SX Encoder Option
     The support for the Compumotor SX motor controller has been updated to work
     properly with a relative encoder.  When configured for an encoder (CCMMSSXX__EE
     in the ccoonnffiigg file), moves will be relative rather than absolute, position
     read back will be from the encoder and the sseett__ddiiaall command will set both
     the encoder and the commanded position.

November 1, 2007 - RELEASE 5.07.04-1

New Parameter Screen For Configuration Editor
     A new configuration screen is available in the eeddccoonnff hardware
     configuration editor to add values for motor and counter parameters and
     device controller parameters that aren't built into ssppeecc or aren't included
     as standard optional parameters.  The new pp command displays the additional
     parameter screen.  Usage is available from that screen with the ??  and HH
     commands.  The ability to edit additional optional parameters will be
     useful with macro hardware and with future built-in support for
     non-standard configuration parameters.

New oouuttppuutt Property For ssppeecc Server
     A new oouuttppuutt property is available in the ssppeecc server.  A client can
     register to have string events sent that mirror output sent to specific
     files or to the screen.  This property is not useful for ssppeecc clients, but
     may be of interest to third party client programs that communicate with a
     ssppeecc server.  See the _s_e_r_v_e_r help file for details.

Redundant Server Motor Position Events Eliminated
     The ssppeecc server will now only send motor position events to clients when
     the value of the position changes.  Previously, position events were sent
     more frequently.

sseettttiinnggss File Now Updated After ssyynncc
     After executing the ssyynncc command from user level, ssppeecc will update the
     motor sseettttiinnggss file whether or not any values have changed.  The motivation
     is to insure positions of calculational pseudomotors will be updated before
     a subsequent invocation of the eeddccoonnff hardware configuration editor, as is
     the sequence in the standard ccoonnffiigg macro.

Fix For Short Integer Array Assignment
     A compiler bug on a number of Linux platforms, where assignments of values
     greater than 32768 to data array elements of type sshhoorrtt were improperly
     truncated rather than converted to negative values, has been addressed.

Updates To Trinamic Support
     The support for the Trinamic QUADpack and SIXpack motor controllers has
     been updated.  ssppeecc now supports configuration of most of the controller's
     parameters, making most home search operations possible.  See the new
     _t_r_i_n_a_m_i_c help file for details.

Update To Accommodate OMS Position Maintenance
     Although ssppeecc doesn't currently include commands to program an OMS motor
     controller for position maintenance, it is possible for users to activate
     the mode via the mmoottoorr__ppaarr(()) command pass-through feature.  To accommodate
     such users, ssppeecc will now program OMS moves (on controllers that support
     it) with the IIPP (interrupt when in position) command rather than the IIDD
     (interrupt when done) command for axes configured with encoders.  When not
     using encoders, the IIPP command behaves the same as IIDD.

Update For TACO ESRF General CCD Device Server
     ssppeecc's built-in support for the the TACO general CCD device server has been
     updated to work with three-bytes-per-pixel cameras.  Previously, ssppeecc would
     crash if used with such a camera.

October 16, 2007 - RELEASE 5.07.03-5

Micos Update For Encoder
     When a Micos motor controller channel is configured to use an encoder, ssppeecc
     will now check bit 0x20 of the status (position out of target window) in
     addition to the busy bit (0x01) for move completion.  In addition, the
     ""ddcc__ddeeaadd__bbaanndd"" parameter will now set the Micos sseettccllwwiinnddooww value and the
     ""ddcc__sseettttllee__ttiimmee"" parameter will now set the Micos sseettccllttiimmee value.

Fix For Mclennan Segmentation Fault
     A bug, where ssppeecc could crash if configured for a Mclennan motor controller
     on a serial interface that couldn't be opened, has been fixed.

September 21, 2007 - RELEASE 5.07.03-4

Support For XIA DXP USB Interface
     This ssppeecc release supports the USB interface on the XIA Saturn DXP device.

Hangup Signals (After the First) Masked On Exit
     In release 5.02.03-5, the ssppeecc code was modified to catch the SSIIGGHHUUPP
     (hang-up) signal generated, for example, by window managers when the
     terminal window containing the ssppeecc process was closed.  On receipt of the
     signal, ssppeecc saves its state to the state files and exits.  In some
     environments multiple hang-up signals arrive, which could end up corrupting
     the state file.  In this release, subsequent hang-up signals are blocked.

Better Time-Out Recovery For Built-In GPIB-ENET
     Due to reports that the recently introduced built-in support for the
     National Instruments GPIB-ENET had problems with subsequent communications
     after a timeout while attempting to communicate at an address not present
     on the bus, this ssppeecc release now issues an interface-clear (IFC) message
     after timeouts, which clears the problem.  Note, this IFC-after-timeout
     feature has only been added to the built-in GPIB-ENET support.

New GPIB Feature For Detecting Listeners
     For selected GPIB controllers (currently NI GPIB-ENET and PCI-GPIB),
     writing a null string to a GPIB device with ggppiibb__ppuutt((aaddddrr,, """")), will now
     return 1 if a listener is present at address aaddddrr or zero if no listener is
     present.  A -1 is returned if the feature is not available with the
     configured GPIB controller.

Fix For Phytron Segmentation Faults
     A bug, where ssppeecc could crash if configured for a Phytron controller but no
     controller was present, has been fixed.

Improved Error Recovery For Mclennan Multiplexed Controllers
     The support for the Mclennan PM381 and PM608 multiplexed motor controllers
     has been updated to avoid certain communication errors and to better
     recover from those that do occur.

August 29, 2007 - RELEASE 5.07.03-3

New Argument For Macro Hardware Functions
     When more than one instance of a macro-hardware counter or motor controller
     was configured, calls to the macro function that apply to all channels
     would be made for each such unit with the mnemonic argument set to the
     string ""...."".  However, all such calls looked identical.  ssppeecc now includes
     the controller unit number as the last argument in such calls.  See the
     _m_a_c___h_d_w help file for details.

Fix For Phytron Motor Controllers Over Ethernet-Serial Connection
     A problem that prevented Phytron motor controllers to be accessed via
     Ethernet-to-serial devices has been fixed.

Bug Fixes For Built-In PCI-GPIB Support
     A bug in the new built-in support for the National Instruments PCI-GPIB
     cards, where the end-of-string character for EOS-mode reads was not always
     programmed correctly, has been fixed.  Another bug, where the ggppiibb__ppuutt(())
     function didn't return the number of bytes written, has also been fixed.

Another Fix For Built-In GPIB-ENET Support
     A bug in the recently added built-in support for the National Instruments
     GPIB-ENET module, where reading a message longer than 255 bytes could
     produce a segmentation fault, has been fixed.

July 26, 2007 - RELEASE 5.07.03-2

Fix For Built-In GPIB-ENET Support
     A bug in the recently added built-in support for the National Instruments
     GPIB-ENET module, where reads having a byte count with bits 7 or 15 set
     (128 or 32768) could produce errors or segmentation faults, has been fixed.

Preliminary Support For AllMotion EZStepper Motor Controllers
     This ssppeecc release contains initial support for the AllMotion, Inc.
     EZStepper motor controllers.  Steppers and steppers with encoders are
     supported over a serial interface.

July 20, 2007 - RELEASE 5.07.03-1

Assignment Allowed To Built-In Associative Arrays
     In the associative-array assignment feature introduced in ssppeecc release
     4.05.09 that allowed usage such AA00 == AA, where both AA00 and AA are associative
     arrays, assignment to the built-in associative arrays such as AA[[]], SS[[]] and
     UUBB[[]] was forbidden.  Now such assignment is possible.  Only elements that
     match existing elements of the built-in array can be assigned, and only
     number values are allowed.  Elements of the right-hand side array that
     don't exist in the built-in array or are string valued are silently
     ignored.

Fix For cchhgg__ooffffsseett(()) For EPICS and ssppeecc Server Motors
     A problem in changing the user offset for calculational pseudomotors (see
     the _m_a_c___h_d_w help file) where the associated real motors were EPICS motors
     or ssppeecc server motors has been fixed.  Previously the cchhgg__ooffffsseett(()) call (as
     used by the sseett macro) did not send commands to the EPICS data base or the
     ssppeecc server to indicate the user-offset change to the real motors when the
     cchhgg__ooffffsseett(()) was invoked for the calculational pseudomotor.

Fix For Detecting ssppeecc Server Connections From Self
     The code added in ssppeecc release 5.07.02-4 to detect a ssppeecc server connecting
     to itself as a client (which is not allowed) produced false positives under
     some conditions when the server and client were on the same host.  That
     problem should be fixed in this release.

Debouncing Filters for NI 6601/6602
     This ssppeecc release implements support for the digital debouncing filters
     available on the National Instruments PCI 6601/6602 counter/timer cards.
     See the _n_i_6_6_0_x help file for details.

Update For Tsuji Counter/Timers
     The support for the Tsuji counter/timers has been extended to include model
     NCT08-01 in addition to model CT16-01B.  In addition, a bug which reported
     incorrect elapsed time for intervals over 2,147 seconds has been fixed.

Update For GE Fanuc VME Driver Support
     The support for the Linux kernel drivers for the GE Fanuc (formerly SBS,
     formerly Bit-3) PCI-to-VME model 61x/62x controllers (and compatible
     models) has been updated to work with the version 3 drivers.  Note, ssppeecc
     still includes driverless support (no kernel drivers are installed) for
     these controllers.

June 30, 2007 - RELEASE 5.07.02-10

EPICS Monitors Available
     Process variable monitors for user-level eeppiiccss__ggeett(()) calls are now
     available using the new eeppiiccss__ppaarr(()) ""mmoonniittoorr__sseett"", ""mmoonniittoorr__cchheecckk"" and
     ""mmoonniittoorr__cclleeaarr"" options.  Monitors eliminate unnecessary network traffic
     for process variables that are checked often but change seldom.  See the
     _e_p_i_c_s help file for details.

EPICS Put Callbacks Implemented
     A new wait-time option for the user-level eeppiiccss__ppuutt(()) function allows ssppeecc
     to wait until the specified channel-access put has been processed.  The
     optional third argument to eeppiiccss__ppuutt(()) specifies the maximum wait time.
     See the _e_p_i_c_s help file for details.

EPICS 3.14 Signal Handling Improved
     Previously, due to the threaded implementation used with EPICS 3.14, signal
     handling in ssppeecc, particularly that associated with a ^^CC interrupt from the
     keyboard, could easily cause ssppeecc to hang in the EPICS library code.  ssppeecc
     now blocks signals during key calls to the EPICS channel access library,
     which should prevent most, if not all, such problems.

June 7, 2007 - RELEASE 5.07.02-9

New ""ddiissaabbllee__lliimmiitt__cchheecckkss"" Optional Motor Parameter
     A new ""ddiissaabbllee__lliimmiitt__cchheecckkss"" optional motor parameter is available.  Its
     value can be set on the second optional motor parameter screen of the
     configuration editor or with the mmoottoorr__ppaarr(()) function.  A nonzero value
     disables software limit checks for the designated motor.

New CCCCDDSS Built-In Global Variable
     A new read-only CCCCDDSS built-in global variable is available.  Its value is
     the number of CCD-type devices in the ccoonnffiigg file, similar to the existing
     MMCCAASS, MMOOTTOORRSS and CCOOUUNNTTEERRSS global variables.

Increase In Number of GPIB Controllers
     Up to eight GPIB controllers can now be configured.  The previous limit was
     four.

Limit Values Limited
     The eeddccoonnff configuration editor tests for corruption of the sseettttiinnggss file
     by checking that none of the dial limits or user offset values are greater
     than 1e40 in absolute value.  Previously, if a user explicitly set the
     motor limits or offset to values outside that range, the next time the
     configuration editor was invoked, it would discard the sseettttiinnggss file.  Now,
     both ssppeecc and the configuration editor silently limit the values of the
     limits and the user/dial offset to a magnitude of 1e20.

Macro Hardware Value Precision Fixed
     Previously, numbers returned by macro-hardware macro functions for commands
     such as ""ppoossiittiioonn"" and ""ccoouunnttss"" were rounded to six significant digits.
     The precision is now kept to fifteen significant digits.

Fix For Newport NSC200/PZC200 Motor Controllers
     A bug that would misassign unit/crate/channel numbers for Newport
     NSC200/PZC200 motor controllers if the motors weren't numbered
     consecutively in the ccoonnffiigg file has been fixed.

Preliminary Support For Detel S21DC Counter/Timer
     This ssppeecc release includes preliminary support for a counter/timer from GE
     Inspection Technologies, model Detel S21DC, for use over a serial
     interface.

May 4, 2007 - RELEASE 5.07.02-8

Fix For Macro Hardware Config Bug In Recent Release
     A new feature introduced in release 5.07.02-6 associated with the eeddccoonnff
     hardware configuration editor had the unintended consequence of changing
     the order in which parameters associated with macro-motor and macro-counter
     controllers were saved.  The order has been restored in this release.

April 27, 2007 - RELEASE 5.07.02-7

Non-backwards Compatible Update For Trinamic Motor Controllers
     The units of the optional generic motor parameter mmiisscc__ppaarr__11, have been
     changed from mA to percent of maximum for the Trinamic motor controller
     peak current setting.  Percent of peak current is a more logical choice for
     the parameter, as both the old QUADpack and the new SIXpack-2 models have
     switch-selectable peak-current settings which can't be read by software, so
     the actual mA value was a best guess by ssppeecc in any case.

Fix For CANnes Bug In Last Release
     A bug introduced in release 5.07.02-6, where the CANnes PCI card CAN baud
     rate wasn't set from the value in the ccoonnffiigg file, has been fixed.

April 23, 2007 - RELEASE 5.07.02-6

Built-In Support for National Instruments PCI-GPIB Modules
     This ssppeecc release contains a preliminary version of built-in support for
     both the rev 01 and rev 02 National Instruments PCI-GPIB cards.  The rev 01
     support introduced in release 5.07.02-1 has been replaced with the new
     support that works with both revisions.  With the built-in support, there
     is no need to install kernel drivers for GPIB.  See the _n_i_g_p_i_b help file
     for details.

New Configuration Option For PCI Cards
     Most PCI cards do not have switches to select an address.  Previously, for
     such cards, if more than one of the same type was configured, ssppeecc assigned
     the cards unit numbers in the order the cards were discovered.  It is now
     possible to configure bus:slot numbers in the AADDDDRR field of the
     configuration editor to distinguish among identical PCI cards.  If the AADDDDRR
     is set to zero, ssppeecc will behave as before.  In this ssppeecc release, only the
     NI PCI-GPIB (built-in) and CANnes PCI cards support the bus:slot
     addressing.  Subsequent ssppeecc releases will include support for the feature
     for other PCI cards.

Updated Support the XIA DXP Modules
     Several updates have been made to the support for the XIA DXP modules (both
     the CAMAC and the parallel port models).  The dead-time calculation
     returned by the mmccaa__ppaarr(()) ""ddeeaadd"" option has been modified based on
     information provided by a user who did a careful reading of the XIA
     documentation.  The value returned is now

         100 * [1 - (ooccrr * lliivveettiimmee) / (iiccrr * rreeaallttiimmee)]

     where ooccrr is the output count rate and iiccrr is the input count rate.  The
     previous calculation was

         100 * (1 - lliivveettiimmee / rreeaallttiimmee)

     In addition, mmccaa__ppaarr(()) options ""eellaappsseedd__rreeaall"" and ""eellaappsseedd__lliivvee"" have been
     introduced as synonyms for the current ""rreeaall"" and ""lliivvee"", respectively.

Fixes For Trinamic Motor Controller
     Problems identifying the Trinamic model (QUADpack vs. SIXpack vs.
     SIXpack-2) have been addressed.  Also, support for ssppeecc's ""lliimm++"" and ""lliimm--""
     cchhgg__ddiiaall(()) homing options has been added.

April 5, 2007 - RELEASE 5.07.02-5

Fix For Newport XPS Controller
     A bug in the code for the Newport XPS motor controller, where the list of
     configured positioners obtained from the controller was not parsed
     correctly, has been fixed.

April 1, 2007 - RELEASE 5.07.02-4

Built-In Support For National Instruments GPIB-ENET
     This ssppeecc release includes experimental built-in support for the National
     Instruments GPIB-ENET Ethernet-to-GPIB modules.  With the built-in support,
     it is not necessary to link ssppeecc with any NI modules or install any
     additional drivers.  See the _n_i_g_p_i_b help file for more information.

Installable On 64-Bit Platforms
     ssppeecc should now install cleanly on 64-bit platforms, assuming the 32-bit
     compatible library packages are installed.  Note, though, ssppeecc remains a
     32-bit application.

ssppeecc Client/Server Updates
     Previously, if a ssppeecc client's initial connection to a ssppeecc server was by
     port number, then that server exited and a new server with a different ssppeecc
     name became available at the same port number, the client could refer to
     the new server by the old name.  That behavior is no longer allowed.  Note,
     if the initial connection is by name and not by port number, a server
     reconnecting with the same name at a different port will be considered the
     same server.

     Also fixed, an attempt by a ssppeecc server to connect to itself as a client
     (which wouldn't work well, in any case) is detected and prevented with an
     error message displayed.

New Sync Option For Certain Motor Controllers
     A new option is available to deal with limits when there is a position
     discrepancy on the few models of motor controllers that only allow the
     position registers to be set to zero and don't retain the current position
     if the power is cycled.  If the controller position register is zero
     (likely due to a power reset) and the ssppeecc software dial position is
     nonzero, if the user chooses the option to adjust the user offset (to
     maintain the user position), there is a new option available to offset the
     dial limits by the same amount.  ssppeecc suggests not offsetting the limits,
     but rather after adjusting the user offset, move the motor to zero and
     reset the dial position to zero (or do a home search).  Such a procedure
     will restore the dial positions to what they were before the motor
     controller was reset.

Multiple CANnes PCI Cards Should Now Work
     Support for the CANnes PCI cards has been fixed to allow more than one card
     to be used at a time.

Updates For Trinamic SIXpack-2
     The support for the Trinamic QUADpack and SIXpack motor controllers has
     been updated to accommodate the newer SIXpack-2 model.  The 0x45 command
     (to set power-down mode) is no longer used.  (The command isn't supported
     by the SIXpack-2 and can possibly cause problems with the EEPROM data
     integrity on the older models.)

Fix For ggmmccii, ww2211vv, iidd1100bb, ggoonniioo and ppii11ggoo Geometries
     Code that incorrectly restricted reciprocal space access in the ggmmccii, ww2211vv,
     iidd1100bb, ggoonniioo and ppii11ggoo geometries with the message ""QQ >> 22kk"" has been fixed.
     A factor-of-two error resulted in QQ magnitudes greater than kk, rather than
     greater than 22kk being rejected.

Bug Fix For ESRF TACO MAR Image Plate Scanner
     An old bug in the support for the ESRF TACO MAR image plate scanner where
     ssppeecc would crash unless a particular preventive iimmaaggee__ppaarr(()) command was
     issued has been fixed.

Fix For ESRF TACO MAXE Motor Device Server
     The acceleration calculation in ssppeecc for the ESRF TACO MAXE device server
     has been updated so that the higher slew rates used with motor controllers
     newly supported by the MAXE no longer result in an integer overflow.

March 16, 2007 - RELEASE 5.07.02-3

Increase In Maximum Number Of Serial Devices
     The maximum number of serial devices that can be associated with ssppeecc's
     built-in hardware support has been increased from twenty to forty.

Fix For Software Timer On ssppeecc Server
     A problem when using the software timer in interrupt mode on a ssppeecc server
     where macro-hardware counters are also configured, where the server command
     thread would hang at the end of a count period, has been fixed.

Fix For Recent Multiport II Support
     Problems in the Canberra Multiport II MCA support introduced in release
     5.07.01-11 and associated with setting the number of points (and possibly
     other parameters) on modules with more than one MCA device have been fixed.

Fix For ESRF TACO/TANGO Camera Device Server
     Problems in using a new TANGO device server with the iimmaaggee__ppaarr(()) commands
     ""ffiillee__ddiirr"", ""ffiillee__pprreeffiixx"", ""ffiillee__ssuuffffiixx"", ""ffiillee__iinnuumm"" and ""oovveerrwwrriittee"",
     associated with the ESRF general-CCD and image-plate support in ssppeecc, have
     been fixed.

Fix For XIA Huber Slit Controllers (HSC)
     ssppeecc support for the XIA HSC motor controllers has been updated to
     accommodate the changed serial number format used in the device's more
     recent firmware releases.

March 6, 2007 - RELEASE 5.07.02-2

Multiple GPIB Controller Syntax Update
     When using multiple GPIB controllers with the generic GPIB functions
     ggppiibb__ppuutt(()), ggppiibb__ggeett(()), etc., a new addressing option uunniitt..aaddddrreessss is
     available in addition to the existing ""uunniitt::aaddddrreessss"" syntax.  See the _g_p_i_b
     help file for details.

Multiple GPIB Controller Improved Presence Tracking
     ssppeecc now keeps better track of the presence of individual GPIB controllers
     of the same type.  Previously, a segmentation fault was possible if a
     configured controller of a particular type was accessed but not installed,
     while another of the same type was configured and usable.

New Option To Set Data Bits For Generic Serial Devices
     A new sseerr__ppaarr(()) option ""ddaattaa__bbiittss"" can be used to set the number of data
     bits for generic serial devices.  Although the default values set by ssppeecc
     work for almost all serial devices, specific values can be set, if
     necessary, with this new option.  See the _s_e_r_i_a_l help file for details.

Preventive Fix For ESRF/TACO Error Message Display
     The code that prints error messages from the ESRF TACO device servers has
     been updated to avoid segmentation faults possible when unexpectedly long
     error messages are returned by the TACO devices.

Old Motor Position Rounding Bug Fixed
     An old bug, where a very particular combination of motor step size,
     position and user offset could lead to a motor being moved by single steps
     while other motors are commanded to move, has been fixed.

Recently Introduced Bug With MCA ""aauuttoo__rruunn"" Fixed
     A bug introduced in release 5.07.1-11 and associated with the new support
     for the Canberra Multiport II MCA, but affecting the behavior when using
     mmccaa__ppaarr(()) to set ""aauuttoo__rruunn"" mode for any MCA, has been fixed.

February 4, 2007 - RELEASE 5.07.02-1

Built-In Support For Additional Older NI GPIB cards
     This release of ssppeecc contains the option to use built-in support for the
     National Instruments PCI-GPIB (rev 01) and AT-GPIB (ISA) controllers.  With
     the built-in support, there is no need to install kernel drivers from
     National Instruments or the open source drivers from Source Forge.  See the
     _n_i_g_p_i_b help file for details.

January 29, 2007 - RELEASE 5.07.01-11

Support For the Canberra Multiport II MCA
     Support for the Canberra Multiport II MCA over both Ethernet and USB
     interfaces is included is this ssppeecc release.  See the _M_P_I_I help file for
     details.

January 11, 2007 - RELEASE 5.07.01-10

Support Compumotor AX/OEM750 Updated
     The support for the Compumotor AX and OEM750 motor controllers has been
     updated to use separate configuration entries (CCMMAAXX and CCMM775500 controller
     types) so that ssppeecc can handle the small differences between the
     controllers correctly.  Choosing the OEM750 controller type will allow ssppeecc
     to properly set the motor speed.

November 28, 2006 - RELEASE 5.07.01-9

Support For Newport PZC200 Motor Controllers
     Preliminary support for Newport's PZC200 motor controller is included in
     this ssppeecc release.

Encoder Support For Galil Controllers
     Encoder support is now available for Galil motor controllers.  Choose
     controller type GGAALLIILL__EE on the motor screen of the configuration editor,
     and set the optional encoder steps-per-degree parameter if the encoder step
     size differs from the commanded-position step size.

Further Fixes For Hecus ASA-32 MCA
     Problems reading back data from the Hecus ASA-32 MCA ISA cards on fast
     computers are addressed in this ssppeecc release by performing a series of
     heuristic tests on the data and retrying the read if any of the tests fail.
     Due to limitations within the board's firmware, there is no fail-safe way
     to ensure the data has been read back correctly.

Update For IMS MDrive Plus Controllers
     The support for the IMS MDrive motor controllers has been updated to be
     compatible with the newer firmware on the MDrive Plus models.

November 24, 2006 - RELEASE 5.07.01-8

Fix For Trinamic Motor Controller Serial Interface
     A problem using the serial interface on the Trinamic motor controllers has
     been fixed.

Additional Fix For ssttaarrtt__aallll Macro Motor Calls
     A problem with the update in ssppeecc release 5.07.01-4 that eliminated
     unnecessary ""ssttaarrtt__aallll"" calls of the macro motor __ccmmdd(()) function had an
     unwanted side effect of preventing the calls when the ""rreeaadd__mmooddee"" optional
     motor parameter was set to include the PPRREEMMOOVVEE flag.  That problem has been
     fixed.

November 7, 2006 - RELEASE 5.07.01-7

Fix For Hecus ASA-32 MCA
     Problems using the Hecus ASA-32 ISA card MCA on faster computers have been
     addressed with this ssppeecc release by slowing down the I/O port access.

mmoottoorr__ppaarr(()) Bug Fix
     A bug, where an out-of-range motor number used as the first argument to
     mmoottoorr__ppaarr(()) could cause a crash with the new ""aadddd"" option, has been fixed.

November 3, 2006 - RELEASE 5.07.01-6

Preliminary Support For IMS MicroLYNX Motor Controllers
     This ssppeecc release includes preliminary support for the IMS MicroLYNX motors
     controllers over a serial interface.

Home Search Improvement
     For motor controllers with home-search support where the direction of the
     home search can be specified, if the ""hhoommee"" option (rather than ""hhoommee++"" or
     ""hhoommee--"") to cchhgg__ddiiaall(()) is used, ssppeecc chooses the direction of the home
     search based on the current dial position.  Previously, ssppeecc chose the
     search direction to be towards zero.  With this release, the the search
     direction is chosen to be towards the home position given as the optional
     third argument to cchhgg__ddiiaall(()) or if that is unset, the ""hhoommee__ppoossiittiioonn""
     optional parameter from the ccoonnffiigg file.  If neither is set, then the
     search is towards zero, as before.

November 1, 2006 - RELEASE 5.07.01-5

Server Events Added For mmoottoorr__ppaarr((""ddiissaabbllee""))
     The ssppeecc server will now send events to clients when the ""ddiissaabbllee"" argument
     to mmoottoorr__ppaarr(()) is used on the server to change the enabled/disabled state
     of the associated motor.  The ssppeecc client will keep track of the
     enabled/disabled state from both local commands and remote events, and the
     motor must be enabled with both in order to be moved.  The return value of
     mmoottoorr__ppaarr(()) with the ""ddiissaabbllee"" argument will have bit two set if the motor
     has been disabled by a remote event.

Home Search Update Delta-Tau Controllers
     Home searches are now implemented for the Delta-Tau PMAC motor controller.

New uusseerr__ffiilleecchheecckk(()) Hook In nneewwffiillee
     The standard nneewwffiillee macro contains a new macro hook uusseerr__ffiilleecchheecckk(()) which
     can be used to test or modify the file name to be used as the data file.
     See the mmaaccrrooss//ffiillee..mmaacc file in the ssppeecc distribution for an example.

Debugging Crash Fixed
     A bug, where ssppeecc might crash when the debug level was set to 0x40000
     (print input context on execution-time errors), has been fixed.

XIA-HSC Bug Fix
     A bug introduced in ssppeecc release 5.06.02-8, where a rreeccoonnffiigg could cause
     ssppeecc to crash if a serial node associated with XIA HSC-1 Huber slit
     controllers couldn't be opened, has been fixed.

October 22, 2006 - RELEASE 5.07.01-4

Improvement For Macro-Hardware Motors
     A problem associated with configurations with multiple macro-hardware motor
     controllers, where all the pprreeffiixx__ccmmdd(()) functions were called with the
     ""pprreessttaarrtt__aallll"" and ""ssttaarrtt__aallll"" commands when any of the macro-hardware
     motors were moved, even if no motors associated with a particular pprreeffiixx
     were being moved, has been fixed.

October 13, 2006 - RELEASE 5.07.01-3

Fix For Recently Broken cchhgg__ddiiaallss(()) With Macro Motors
     A programming error in ssppeecc release 5.06.05-9 that made it impossible to
     change dial positions for macro motors has been fixed.

EPICS Install Updated
     The path for the directory containing the EPICS libraries (the eeppiiccss__hhoommee
     parameter in the iinnssttaallll__ddaattaa file) can now either be the directory
     containing the subdirectory named bbaassee (as before), or the base directory
     containing the subdirectory named lliibb.

October 4, 2006 - RELEASE 5.07.01-2

New Check For Calculational Pseudomotor Limits
     ssppeecc now checks whether moves of real motors will send any associated
     calculational pseudomotors outside of the configured limits.  Calculational
     pseudomotors motors are either associated with geometry code (such as the
     pseudomotors associated with kappa geometries) or implemented via the macro
     hardware feature (see the _m_a_c___h_d_w help file).  In previous releases, limits
     for calculational pseudomotors were ignored.

Update For xx1111ffiilltt
     The xx1111ffiilltt process uses the X library XXLLiissttFFoonnttss(()) call to obtain a list
     of possible fonts matching a pattern, using either the default built-in
     pattern or one obtained from the FFoonntt property, as explained in the _x_1_1
     help file.  Previously, the returned list was limited to 512 items.  That
     limit has been raised to 8192 to accommodate the increased number of
     possible fonts on a modern X installation.  Also, a new font debugging
     property, FFoonnttDDeebbuugg, is available for the xx1111ffiilltt program.  See the _x_1_1
     help file for details.

Fix For Old Mac Science (Now Bruker) MXC Controllers
     Code added for support of a new model of the Mac Science (now Bruker) MXC
     controller in ssppeecc release 5.02.04-1 generates an error with prior models
     that don't support an added MXC command PPMM (which sets speed and
     acceleration).  ssppeecc now silently checks whether the command is available
     and and will stop sending it if the device doesn't support it.

Preliminary Support For Compumotor ViX Motor Controller
     This ssppeecc release contains preliminary support for the Parker Compumotor
     ViX motor controllers over a serial interface.

September 20, 2006 - RELEASE 5.07.01-1

New Invocation Option To Specify Start-Up Command Files
     A new --CC ffiillee start-up option is available to specify command files to be
     read after all the standard start-up commands files, but before the
     optional ssppeecc..mmaacc file in the current directory.  Up to 32 such files may
     be specified on the command line.  See the _s_p_e_c help file for details.

Fixed Timeout Behavior For ddaattaa__ppiippee(())
     The ""ttiimmeeoouutt"" parameter added to the ddaattaa__ppiippee(()) function in release
     5.06.04-1 was not implemented correctly.  This release fixes that problem.
     By default, the ddaattaa__ppiippee(()) processes block as long as necessary.  With
     this release, setting the ""ttiimmeeoouutt"" parameter will prevent the process from
     taking any longer than the timeout value.  Also, if the process exits on
     its own (perhaps due to a crash), ssppeecc will print a message indicating that
     is what happened.  The default timeout of zero will maintain the
     traditional blocking behavior.  See the _d_a_t_a___p_i_p_e help file for details.

One More Fix For Updated mmoottoorr__ppaarr(())
     A remaining bug, where some of the standard optional motors parameters
     could not have values set if the parameters weren't configured in the
     ccoonnffiigg file, associated with the new mmoottoorr__ppaarr(()) features added in release
     5.06.04-1 and mostly fixed in release 5.06.04-9, is completely fixed in
     this release.

Update For Compumotor 6K Motor Controller
     The support for the Compumotor 6K motor controllers has been made a bit
     more robust by flushing out the read buffers before new commands are sent.

changes                      spec 5.06 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 5.06

September 5, 2006 - RELEASE 5.06.06-10

Updated Support for Delta-Tau Controllers
     The existing support for the Delta-Tau PMAC motor controller on an ISA bus
     has been updated for PMAC2 controllers over socket (Ethernet) interfaces.

Open-Loop Mode Fix for New Focus 8750/53
     A problem with position discrepancy messages appearing after aborting a
     move when using the New Focus 8750/53 controllers with open-loop motors has
     been fixed.  The problem did not appear with closed-loop motors.

August 28, 2006 - RELEASE 5.06.06-9

Home Search For New Focus 8750/53 Updated
     The home search feature for the New Focus model 8750/53 has been updated to
     implement the FFIINN, RRIINN, FFLLII and RRLLII commands included with the controller
     version 1.5.4 firmware.  The first two search for the index mark on
     actuators so equipped in the forward and reverse directions.  The second
     two search for the limit switches.

Fix For PI E710 Motor Controller
     An old bug in the code for the Physik Instrumente E710 where the
     configuration choice of serial vs. GPIB was not always correctly detected
     has been fixed.

August 17, 2006 - RELEASE 5.06.06-8

Additional Updates For AI Solutions DAQ Modules
     Bugs in the new code for the AI Solutions DAQ modules (formerly KISIM),
     which could lead to segmentation faults when switching the configuration
     between 1D and 2D mode in the configuration file or switching out of
     emulation mode via mmccaa__ppaarr(()), have been fixed.

August 4, 2006 - RELEASE 5.06.06-7

Support For Tsuji Model SPM8C-01 Motor Controller
     This ssppeecc release includes support for the Tsuji Model SPM8C-01 motor
     controller over a socket interface.

Support For Huber 9300 Motor Controller
     This ssppeecc release has preliminary support for the Huber 9300 motor
     controller over serial and socket interfaces.

Fixes For Amptek Pocket MCA
     A bug in the code for the Amptek PPoocckkeett MCA 8000/8000A that prevented
     reading back the correct data from other than group zero has been fixed.
     Also, a bug where the value returned by the mmccaa__ppaarr(()) ""bbaatttteerryy__ttyyppee""
     argument was incorrect has been fixed.

Fix For ESRF/TACO Serial Device Timeouts
     A bug, where the RPC timeouts for connections to the ESRF/TACO serial
     device server were set to 1000 times the requested value (usually 2000
     seconds instead of 2 seconds), has been fixed.

July 25, 2006 - RELEASE 5.06.06-6

More Updates For AI Solutions DAQ Modules
     A bug in the new code for the AI Solutions DAQ modules (formerly KISIM),
     which prevented setting the ""ooffffsseett__xx"" parameter in MCA mode with the
     mmccaa__ppaarr(()) function, has been fixed.  In addition, the internal clock
     parameter is now reprogrammed, if necessary, for time presets larger than
     approximately 4.7 hours.  Also, when counting to fixed count presets or
     with no presets, ssppeecc will keep track of overflows in the elapsed-time
     register by using the computer's system clock, thus making the returned
     elapsed-time value correct for indefinitely long count times.

Fix For Mac Science (now Bruker) MXC Instrument
     A bug (introduced three years ago in ssppeecc release 5.02.04-1), which broke
     control of the rrsslliitt motor for the then Mac Science, now Bruker, MXC
     controller, has been fixed.

July 13, 2006 - RELEASE 5.06.06-5

Fix For sslleeeepp(())
     A bug that has been present for at least several years, where a call to the
     built-in sslleeeepp(()) function with an argument between -1 and zero would cause
     ssppeecc to become stuck, has been fixed.

Fix For __pplloottccoonnffiigg(()) Macro
     An old bug in the internal __pplloottccoonnffiigg(()) macro, which resulted in an ""AArrrraayy
     aacccceessss SSCCAANN__DD[[......]][[]] iiss oouutt ooff bboouunnddss"" error message on start up or with
     the pplloottsseelleecctt macro, has been fixed.  The error would occur if the scaler
     channels were rearranged in the ccoonnffiigg file such that an existing scaler's
     number (as returned by the ccnntt__nnuumm(()) function) became greater than or equal
     to the value of the global variable PPLLOOTT__CCNNTTRRSS__MMAAXX (default value of 10).
     The previous work around for this bug of increasing the value of
     PPLLOOTT__CCNNTTRRSS__MMAAXX is no longer necessary.

Updated Code For AI Solutions DAQ Modules (Formerly KISIM)
     The support for the HANARO KISIM USB modules has been rewritten for
     redesigned modules, now produced by the Korean company, AI Solutions.  See
     the updated _k_i_s_i_m or _a_i_s_o_l_u_t_i_o_n_s help file for information on the new
     support.

July 12, 2006 - RELEASE 5.06.06-4

Fix For ccoonnffiigg Issues When Changing Limits
     A rare problem, where motor limits would revert to their prior values when
     reentering ssppeecc after using the ccoonnffiigg macro and configuration editor to
     change them, has been fixed.  The problem only occurred when motor position
     discrepancies were resolved (either silently or with user intervention) in
     favor of the hardware causing the sseettttiinnggss file to be updated during the
     built-in motor synchronization call that occurs just before possibly
     modified ccoonnffiigg and sseettttiinnggss files are reread.

Fix For OMS MAXv Controller When Moving Off Limits
     A timing problem with the new Oregon Micro Systems MAXv VME motor
     controller firmware that sometimes made it impossible for ssppeecc to move a
     motor off a limit switch has been worked around.

Fix For Ortec MCS PCI Initialization
     A problem with ssppeecc's presence test and initialization of the Ortec MCS PCI
     multi-channel analyzer hardware that could occur if the board was actively
     acquiring during ssppeecc's hardware configuration procedure has been fixed by
     making sure acquisition is off before testing the board's memory.

July 10, 2006 - RELEASE 5.06.06-3

Fixed the Updated Support For EPICS Serial Record
     The updated support for the EPICS serial record that was included in
     release 5.06.06-1 had many problems which should now be fixed.

July 5, 2006 - RELEASE 5.06.06-2

Newport NSC200 Support Updated
     The preliminary support for the Newport NSC200 motor controller has been
     updated to fix a few problems.

June 30, 2006 - RELEASE 5.06.06-1

Updated Support For EPICS Serial Record
     This ssppeecc release includes updated support for the EPICS serial record.  In
     particular, the new aassyynn record is supported.  Support for the older
     HHiiddeeooss-based generic serial record is still included, and many bugs with
     the older support have been fixed.  ssppeecc automatically sorts out which
     serial record is being used.

Fix For Server Motor and Counter Properties
     An old coding bug that may have caused generally insignificant problems
     with the ssppeecc server when motor or counter properties were received from a
     client, with the most noticeable being incorrect command serial numbers,
     has been fixed.

June 2, 2006 - RELEASE 5.06.05-11

Support For Inel PEM Motor Controller
     This ssppeecc release supports the Inel PEM motor controller over a serial
     interface.

Insure User-Units Mode Is Off For OMS Controllers
     ssppeecc will now send the ""UUFF"" (user off) command to each axis of an OMS motor
     controller during hardware configuration to make sure user units are off to
     accommodate at least one site that switches control between ssppeecc and
     software that turns user-units mode on.

May 12, 2006 - RELEASE 5.06.05-10

Initial Support For Newport XPS Motor Controller
     This ssppeecc release contains initial support for Newport's XPS motor
     controller.  This motor controller communicates exclusively via sockets and
     contains its own computer and operating system.  Motor parameters must be
     configured by downloading and uploading the XPS configuration files by ftp.
     ssppeecc mnemonics must match the XPS motor names in the XPS ssyysstteemm..iinnii file.
     ssppeecc will send slew rate and acceleration parameters, as set in ssppeecc's
     ccoonnffiigg file, but those parameters will only be accepted by the XPS if the
     values are not greater than the maximum values set in the XPS ssttaaggeess..iinnii
     file.  Although the value of ssppeecc's steps-per-degree parameter is ignored
     for calculating positions for these motors, the value is used in ssppeecc's
     code for rounding motor positions to their intrinsic resolution.  Thus, set
     the parameter to a value the same order of magnitude as the value in the
     ssttaaggeess..iinnii file.  (Unfortunately, there is no command in the XPS protocol
     to retrieve the value, other than retrieving and parsing the configuration
     files, which is beyond ssppeecc's scope.)

May 3, 2006 - RELEASE 5.06.05-9

Fixes For Compumotor 6K Motor Controller
     A couple of problems with the support code for the Compumotor 6K motor
     controller have been fixed.  Unnecessary AAXXSSDDEEFF calls, which could lead to
     lost positions, are now avoided for all models, including those with eight
     motors.  A problem, where the final position of a motor was sometimes not
     read at the end of a move when multiple motors were active, has been fixed.

April 30, 2006 - RELEASE 5.06.05-8

Preliminary Support For Newport NSC200 Motor Controllers
     Preliminary support for the Newport NSC200 motor controller is included
     with this ssppeecc release.

April 26, 2006 - RELEASE 5.06.05-7

New Option To Set Stop Bits For Generic Serial Devices
     A new sseerr__ppaarr(()) option ""ssttoopp__bbiittss"" can be used to set the number of stop
     bits for generic serial devices.  The default value of one works for almost
     all serial devices.  A value of two can be set when needed.  See the _s_e_r_i_a_l
     help file for details.

New Option To Test For Motor Limits
     New mmoottoorr__ppaarr(()) options ""hhiigghh__lliimm__hhiitt"" and ""llooww__lliimm__hhiitt"" return nonzero if
     the associated motor limit is active (for most supported motor
     controllers).

Further Update for OMS VME MAXv Support
     Problems with the support code for the OMS MAXv motor controller that
     weren't fixed in release 5.06.05-4 have now been fixed with the help of OMS
     support engineers.

April 21, 2006 - RELEASE 5.06.05-6

New ssiixxcc Mode
     A new cchhii-fixed, pphhii-fixed, mmuu-fixed mode is available with the standard
     ssiixxcc geometry.

April 12, 2006 - RELEASE 5.06.05-5

Fixes For Compumotor 6K With Encoders and With Servos
     The ssppeecc support for the Compumotor 6K motor controller now uses relative
     moves (rather than absolute moves) if the axis is configured for an
     encoder.  Also, when starting up, the initial configuration commands now
     work correctly if servo motors are configured, avoiding unnecessary AAXXSSDDEEFF
     calls, which could lead to lost positions.

Update For ESRF TACO LeCroy 1151 Counter Support
     The ssppeecc support for the LeCroy 1151 counters via the ESRF TACO facility
     now allows more than one such counter module to be configured.

April 2, 2006 - RELEASE 5.06.05-4

Update For OMS VME MAXv Support
     The code for the Oregon Micro Systems VME model MAXv controller has been
     modified to be a bit more robust in the face of communication errors.

March 22, 2006 - RELEASE 5.06.05-3

Longer Count Times Implemented For NI 660x Cards
     The code for the National Instruments 6601/6602 PCI counter/timer card will
     now automatically select the slower time base when necessary to allow for
     longer counter times, now up to nearly 12 hours.

March 22, 2006 - RELEASE 5.06.05-2

Fix For Amptek PX4 Attenuation
     The recently added support for the Amptek PX4 MCA should have set a bit in
     the configuration buffer but didn't, which resulted in the input signal
     being attenuated by fifty percent.  The bit is now set.

March 8, 2006 - RELEASE 5.06.05-1

Fix For Comment Parsing On Macro Invocation Line
     Since the earliest versions of ssppeecc (ca. 1986), the $$## and $$** symbols in
     ordinary macro definitions (replaced by the number of arguments and all the
     arguments, respectively) have always inappropriately included any ##
     prefixed comments on the invocation line.  Consider the macro definition

        11..SSPPEECC>> ddeeff tteesstt ''{{pprriinntt $$##,, "" $$** "",, $$**}}''

     Prior behavior was:

        22..SSPPEECC>> tteesstt 11 22 33 ## 44 55 66
        77  11 22 33 ## 44 55 66  112233

     (Since the second $$** isn't in quotes, the comment is effective after the
     argument substitution.)  New behavior is:

        22..SSPPEECC>> tteesstt 11 22 33 ## 44 55 66
        33  11 22 33  112233

     Not sure why this problem went unnoticed and unfixed all this time.

Fix For ESRF VCT6 Timer Polling
     The polling of the counting/busy status for the ESRF VCT6 timer now also
     checks for the status bit that indicates the unit is preparing to start
     counting.  Previously, not checking this bit wasn't a problem, but with
     faster computers, ssppeecc's polling for busy status can occur before counting
     has actually started.

Fix For Amptek PX4 Parameter Display
     A bug in the new code for the Amptek PX4 where an incorrect high-voltage
     setting was displayed with the mmccaa__ppaarr((""ppaarrss"")) command has been fixed.

Fix For Kinetic Systems 3388
     A bug introduced with implementation of support for multiple CAMAC crates
     in release 5.06.02-1 that broke support for the Kinetic Systems 3388
     CAMAC-to-GPIB controller has been fixed.  In addition, the KS 3388 can now
     be used in other than crate zero, and more than one KS 3388 can be used at
     a time.

February 22, 2006 - RELEASE 5.06.04-12

Support For Amptek PX4 MCA
     ssppeecc now supports the Amptek PX4 Digital Processor MCA over both USB (on
     Linux and Mac OS X) and serial interfaces.  See the new _p_x_4 help file for
     details.

February 21, 2006 - RELEASE 5.06.04-11

Recent lliibbeeddiitt Problem With ^^CC Handling Fixed
     Some obscure problems with signal handling when linking ssppeecc with the
     optional lliibbeeddiitt library version included with ssppeecc releases since 5.06.03
     have been fixed.

February 16, 2006 - RELEASE 5.06.04-10

USB Support Under Mac OS X
     The USB support in ssppeecc is now available on Mac OS X platforms in addition
     to Linux.  To enable the USB support on the Mac OS X platform, ssppeecc must be
     linked with the lliibbuussbb library, available at _l_i_b_u_s_b_._s_o_u_r_c_e_f_o_r_g_e_._n_e_t .

February 9, 2006 - RELEASE 5.06.04-9

Support For Physik Instrumente C-630 Motor Controller
     ssppeecc now supports the Physik Instrumente model C-630 (Apollo) motor
     controller.  This controller uses a serial interface.

Fix For ssppeecc Client's Server Lookup
     A bug in the ssppeecc client server-lookup algorithm has been fixed.
     Previously, if a ssppeecc client connected to multiple ssppeecc servers on the same
     host using port numbers for some (such as ""llooccaallhhoosstt::77000000"") and ssppeecc
     process names for others (such as ""llooccaallhhoosstt::ffoouurrcc""), the code would
     sometimes direct commands to the wrong server.  The bug was probably
     associated with the updates to the lookup algorithm in ssppeecc release
     5.06.03-1.

Fix For Unconfigured Optional Motor Parameters
     The new mmoottoorr__ppaarr(()) features introduced in release 5.06.04-1 broke old
     behavior that allowed setting values for optional motor parameters that
     were not explicitly assigned values in the ccoonnffiigg file.  With the new
     features, motor parameters not in the ccoonnffiigg file can be created (to exist
     only in the current ssppeecc session) using the new mmoottoorr__ppaarr(()) ""aadddd"" option.
     This ssppeecc release will restore compatibility with past releases by doing an
     automatic ""aadddd"" of any of the standard optional motor parameters not
     otherwise assigned values in the ccoonnffiigg file when values are set with
     mmoottoorr__ppaarr(()).

Fix For Synchronizing Motor Positions
     A bug in the implementation of the new mmoottoorr__ppaarr(()) features in release
     5.06.04-1 that could cause problems with synchronizing motor positions in
     some situations has been fixed.

February 2, 2006 - RELEASE 5.06.04-8

New pprreeffiixx__AADDDDRR Variable For Macro Hardware Functions
     The string value of the controller AADDDDRR parameter for macro hardware
     controllers, as set on the DDevices screen of the eeddccoonnff hardware
     configuration editor, is now available in the associated macro functions as
     a llooccaall variable with the name pprreeffiixx__AADDDDRR.  See the _m_a_c___h_d_w help file for
     details.

Fix For Compumotor 6K With Negative Step Size
     The ssppeecc code that supports the Compumotor 6K motor controllers will no
     longer supply a negative argument to the DDRREESS command, as was the previous
     behavior when ssppeecc's steps-per-degree motor parameter was negative.  (The
     6K doesn't accept negative values for that parameter.)

Fix For Broken ssppeecc Server Motor Initialization
     A bug in the implementation of the new mmoottoorr__ppaarr(()) features introduced in
     release 5.06.04-1, which prevented ssppeecc clients from connecting to ssppeecc
     server motors that didn't have a configured encoder step-size parameter,
     has been fixed.

Fix For Server/Client Associative Array-Element Transfers
     A coding bug in release 5.06.04-5, where ssppeecc server/client transfers for
     single elements of associative arrays using pprroopp__ggeett(()) and pprroopp__ppuutt(()) were
     broken, has been fixed.

January 24, 2006 - RELEASE 5.06.04-7

New uusseerr__ssccaann__pplloott Hook In Standard Macros
     The standard ssccaann__pplloott macro, called for each point of a scan, now includes
     a call of uusseerr__ssccaann__pplloott, which local users can define to perform special
     actions before the standard __pplloott (normally defined as rrpplloott) macro is
     called.  By default, uusseerr__ssccaann__pplloott is defined as an empty macro using
     ccddeeff(()).

Fix For TACO Serial Interface
     A bug, where the TACO device-server timeout was not set correctly for baud
     rates of 38400 and above, has been fixed.

Bug Fix For Out-Of-Bounds Array Access
     A bug, where assignment of a value to a data-array element indexed beyond
     its dimensioned size could cause a segmentation fault on Solaris platforms,
     has been fixed.

January 23, 2006 - RELEASE 5.06.04-6

Fix For TACO and EPICS Serial Interface
     A bug, which would cause problems only with the Galil Optima, IMS MDrive
     and New Focus 8753 motor controllers and only when used with the TACO or
     EPICS serial-line interface, has been fixed.

January 19, 2006 - RELEASE 5.06.04-5

ssyymmss --vv Now Escapes Embedded Double Quotes
     The built-in command ssyymmss has a --vv option to list symbols and values in a
     format that can be used as input to ssppeecc.  Previously, symbol values with
     embedded double-quote characters ("") were not escaped with a backslash,
     thus making the ssyymmss output not suitable as further input.  That problem is
     fixed.  Previous behavior was as follows:

        11..FFOOUURRCC>> xx[[00]]==""aa \\""ssttrriinngg\\""""

        22..FFOOUURRCC>> ssyymmss --vv xx

        xx[[""00""]] == ""aa ""ssttrriinngg""""

     New behavior is:

        22..FFOOUURRCC>> ssyymmss --vv xx

        xx[[""00""]] == ""aa \\""ssttrriinngg\\""""

Bug Fix To Allow Macro Functions To Return Arrays
     A bug, which prevented certain associative array representations from being
     used as return values from macro functions, has been fixed.  An example of
     what didn't work before is

        ddeeff ffoooo22(()) ''{{
                llooccaall xx[[]]
                xx[[00]]==""tteesstt""
                rreettuurrnn((xx))
        }}''

Associative Array Elements Keep String Value In Server/Client Calls
     String-valued associative array elements that represent numbers (of the
     form ""11ee66"" or ""00xx112233"", for example) will now maintain the string
     representation when passed to and from ssppeecc server and clients using the
     server/client protocol.  (See the _s_e_r_v_e_r help file for details on passing
     associative arrays.)

Associative Array Initialization Keeps String Value
     Associative array initialization of the form

        xx == [[ 00 :: ""11ee66"" ,, 11 :: ""00xx112233"" ]]

     will now maintain the string representation of the array elements.
     Previously, values were converted to numbers.

December 16, 2005 - RELEASE 5.06.04-4

New mmoottoorr__ppaarr(()) Option for Macro Motors
     The new read-only parameter ""cchhaann00"" returns the motor number of the motor
     associated with channel zero of the unit and module of the specified motor.
     This feature allows for simplified implementation of general-purpose
     calculational pseudomotors.

New Configuration Parameter Available for Macro Hardware
     The configuration editor now allows entry of an arbitrary string in the
     AADDDDRR field for macro motors and counters.  The contents of this field can
     be retrieved with the mmoottoorr__ppaarr(()) and ccoouunntteerr__ppaarr(()) option ""aaddddrreessss"".  All
     macro-hardware motor and counter channels associated with the controller
     will return the parameter.

Fix For Recently Broken ccoouunntteerr__ppaarr(())
     A coding bug in release 5.06.04-1 that broke ccoouunntteerr__ppaarr(()) for
     device-dependent parameters has been fixed.

Update For ttiimmeessccaann, llooooppssccaann Macros
     The __ttiimmeessccaann macro used by both ttiimmeessccaann and llooooppssccaann has been modified to
     take into account the duration of the optional sleep times when calculating
     the range of the xx-axis for plotting.

December 14, 2005 - RELEASE 5.06.04-3

String-Valued Mnemonics Now Work With mmoottoorr__ppaarr(()) and ccoouunntteerr__ppaarr(())
     Previously, the mmoottoorr__ppaarr(()) and ccoouunntteerr__ppaarr(()) functions only accepted
     number-valued symbols as the first argument.  Now, string-valued symbols
     containing the string representing the motor mnemonic are recognized.  That
     is, the following syntax will now work as expected:

        {{
           llooccaall ss
           ss == ""cchhii""
           pp mmoottoorr__ppaarr((ss,, ""sstteepp__ssiizzee""))
        }}

Another Bug Fix For Recent mmoottoorr__ppaarr(()) Changes
     Another bug associated with recent changes for the mmoottoorr__ppaarr(()) function,
     which would result in a segmentation fault only in server mode and only
     with string-valued optional motor parameters in the ccoonnffiigg file, has been
     fixed.

Update for ESRF DC Motor Device Server Support
     The previous limit of four motors per controller for the ESRF (TACO) DC
     Motor device server has been removed.

Fixes For Negative Step Size For Several Motor Controllers
     Possible problems when using a negative step size with the Newport ESP300,
     the Newport 4000 series and the Compumotor SX motor controllers have been
     addressed.

December 7, 2005 - RELEASE 5.06.04-2

Bug Fix For Recent mmoottoorr__ppaarr(()) Changes
     A programming bug associated with changes in the previous ssppeecc release that
     could cause a segmentation fault and could prevent the setting of a number
     of optional motor parameters has been fixed.

Fix For PSD-50M Number Of Channels
     An oversight in the original code for the MBraun PSD-50M MCA, where the
     number of channels could not be changed from the default 1024, has been
     fixed.  The ""nnppttss"" option to mmccaa__ppaarr(()) can now be used to set or retrieve
     the number of channels.  Note, the number of channels is only relevant to
     data read out and the clear command.

November 28, 2005 - RELEASE 5.06.04-1

New Motor Parameter and Counter Parameter Features
     Site-defined motor and counter parameters may now be included in the ccoonnffiigg
     file.  These parameters will be accessible in ssppeecc via the standard
     mmoottoorr__ppaarr(()) and ccoouunntteerr__ppaarr(()) functions.  Currently, the configuration
     editor eeddccoonnff will read and save the parameters, but the parameters are not
     viewable or editable with eeddccoonnff.  Thus the parameters must be added
     manually.

     In addition, arbitrary, temporary run-time motor and counter parameters may
     be created using

         mmoottoorr__ppaarr((mmnnee,,  ss,,  vv,, ""aadddd""))

     where ss is the parameter name and vv is the initial parameter value.  The
     same syntax works for ccoouunntteerr__ppaarr(()).  These temporary parameters disappear
     when ssppeecc exits and after a rreeccoonnffiigg command.  This feature might be useful
     with calculational macro pseudomotors (see the _m_a_c___h_d_w help file).

New ""ttiimmeeoouutt"" Parameter For ddaattaa__ppiippee(())
     By default, calls to the user code embedded in the ddaattaa__ppiippee(()) functions
     are expected to return within one second.  This release includes a
     configurable time-out parameter to accommodate special user needs.  The
     command

         ddaattaa__ppiippee((""ttiimmeeoouutt"",, sseecc))

     changes the timeout to sseecc seconds for all subsequent newly created
     ddaattaa__ppiippee(()) processes.  The command

         ddaattaa__ppiippee((pprrooggrraamm,, ""ttiimmeeoouutt"",,  sseecc))

     changes the timeout to sseecc seconds just for the named data-pipe process.
     For both calls, if the sseecc argument is missing, the current timeout is
     returned.

Enhanced Sectors Scheme For ppssiicc Geometry
     The sector transformations for the ppssiicc geometry have been rewritten to
     perform an exhaustive search of possible angle transformations.  The new
     search algorithm makes additional angle settings available, usually in
     situations where one or more of the diffractometer angles are at special
     positions, such as multiples of ppii over 2.  In addition, transformations
     that violate motor limits are eliminated in the preference ranking schemes.
     See the _p_s_i_c help file for details.

New Theta-Fixed Mode For zzaaxxiiss
     A new theta-fixed mode for use near 0000LL scattering vectors is implemented
     for the zzaaxxiiss geometry.  See the ggeeoo__zzaaxxiiss..cc file included in the ssppeecc
     distribution for implementation details.

Fix For Theta-Fixed Mode In ffoouurrcc
     A bug in the recently introduced theta-fixed mode for the ffoouurrcc geometry
     has been fixed.

New ""iinniittiiaalliizzee"" Option For XIA DXP Devices
     A new ""iinniittiiaalliizzee"" mmccaa__ppaarr(()) option is available for the XIA DXP devices.
     This option will reload the firmware and execute all the initialization
     functions associated with startup and the rreeccoonnffiigg command.

Fix For XIA DXP Devices
     Users have reported from time to time that the XIA DXP libraries return the
     error ""mmuusstt ssttoopp rruunn bbeeffoorree bbeeggiinnnniinngg aa nneeww rruunn"".  To avoid this message
     and resulting error, ssppeecc now always calls the ddxxpp__ssttoopp__rruunn(()) DXP library
     function before calling the ddxxpp__ssttaarrtt__rruunn(()) function.

More Updates For Struck SIS 3820 Scalers
     Another new ccoouunntteerr__ppaarr(()) option, ""tteesstt__ppuullssee__mmaasskk"", is implemented for the
     Struck SIS 3820 scalers.  The value of the argument is used to program
     register 0x218 (part of Struck's firmware release 1.0A).  This register
     allows the 25 MHz internal test pulse train to be routed to any channel.
     If a nonzero value is written to this register, ssppeecc will enable counter
     test mode and the 25 MHz test pulses in the operation register (register
     0x000) during counting.  It is then necessary to mask the channels that are
     to count external signals using the mask written with this command.  Note,
     ssppeecc will always mask channel 0 on the master unit, as ssppeecc uses that
     channel to measure elapsed time based on the 50 MHz internal signal.

Initial Support For ESRF MUSST As MCA
     The Multipurpose Unit for Synchronization, Sequencing and Triggering
     (MUSST) from the the ESRF Control Electronics group is now supported as an
     MCA device in ssppeecc.  The interface is GPIB.

Update For ESRF/TACO Serial Device Server
     Previously, ^^CC aborts would turn off reading from the ESRF/TACO serial
     device server, thus preventing macro-hardware implementation of calls such
     as ""aabboorrtt__oonnee"" from working.  That problem has been fixed.  (Similar
     behavior for the standard serial support and the EPICS serial support was
     corrected in ssppeecc release 5.02.03.)

Macro-Function Argument Precision Increased
     All number values passed to macro-hardware macro functions are now sent
     with nine-digit precision.  Previously, six-digit precision was used for
     most calls.

Macro-Function ccoouunntteerr__ppaarr(()) Support Enhanced
     The macro-hardware counter macro functions now fully support the
     ccoouunntteerr__ppaarr(()) facility.

November 2, 2005 - RELEASE 5.06.03-11

Nonfatal Bug In MVP-2001 Support
     A bug in the support for the MicroMo MVP-2001 (present since the code was
     created for ssppeecc release 5.05.01-3), where spurious error messages of the
     sort ""sseerriiaall ddeevviiccee XX iissnn''tt ccoonnffiigguurreedd"" could be displayed during device
     configuration, has been fixed.

October 27, 2005 - RELEASE 5.06.03-10

New rreeccoonnnneecctt Option For eessrrff__iioo(())
     A new ""rreeccoonnnneecctt"" option is available with the eessrrff__iioo(()) function.  The
     option is also available directly for the ESRF/TACO camera devices via
     iimmaaggee__ppaarr(()).  Such an option allows remaking the connection without the
     disruption caused by the complete hardware reinitialization associated with
     rreeccoonnffiigg.  The command closes the connection to the device via the
     ddeevv__ffrreeee(()) TACO function and reopens the connection to the same device
     using the same timeout and UDP/TCP protocol via ddeevv__iimmppoorrtt(()).

New Theta-Fixed Mode For ffoouurrcc
     A new theta-fixed mode is available with the four-circle geometry code.
     Currently, though, the sectors transformations are not implemented for this
     mode.  Only sector 0 is available.

Server/Client ssppeecc Motor Version Incompatibility Fixed
     A problem where ssppeecc clients from releases 5.06.02-2 through 5.06.03-9 are
     not compatible with ssppeecc motor servers from prior releases has been
     addressed with this release.  Clients in the above range did work with ssppeecc
     motor servers in the same range and will now work with servers from this
     and later releases.  Clients from this release onward will work with all
     previous ssppeecc motor server releases.

ddeebbuugg Macro Fix
     A syntax error introduced in the ddeebbuugg macro in release 5.06.03-8 has been
     fixed.

Mclennan Motor Fix
     A programming error introduced in the code that supports the Mclennan
     PM301/381, PM600 and PM608 motor controllers in release 5.06.03-2 that
     would produce a segmentation fault when an attempt was made to move a motor
     associated with one of the above controllers has been fixed

October 17, 2005 - RELEASE 5.06.03-9

Updates For Struck SIS3820 Scalers
     New ccoouunntteerr__ppaarr(()) options ""iinnvveerrtt__iinnppuuttss"", ""iinnvveerrtt__oouuttppuuttss"", ""iinnppuutt__mmooddee""
     and ""vveettoo__iinnhhiibbiittss"" are available to allow additional flexibility in
     configuring the Struck SIS3820 VME Scaler module.  If passed with nonzero
     arguments, the ""iinnvveerrtt__iinnppuuttss"" and ""iinnvveerrtt__oouuttppuuttss"" will have corresponding
     bits set in the module's operation-mode register when the device is
     programmed for counting.  The ""iinnppuutt__mmooddee"" option can be set to values from
     0 through 6 to override the default input mode 2.  A value can be passed
     using the ""vveettoo__iinnhhiibbiittss"" option that will be written to register 0x214 of
     the module (only available with firmware 1.9 and greater).  Currently,
     options are reset to default values after every start up and rreeccoonnffiigg.

October 17, 2005 - RELEASE 5.06.03-8

The ""ddiissaabbllee"" mmoottoorr__ppaarr(()) Option Now Passed To Macro Motors
     The __ppaarr(()) function for macro motors will now be called when the ""ddiissaabbllee""
     option to mmoottoorr__ppaarr(()) is called to change the disabled status of a motor.
     See the _m_a_c___h_d_w help file for details.

String-Valued Generic Motor Parameters Passed to Macro Motors
     Previously, if the value of a generic motor parameter (one named mmiisscc__ppaarr__NN
     were NN is from 1 to 6), was set to a string, the string value was not
     passed to the __ppaarr(()) function of an associated macro motor.  That problem
     has been fixed.

Support For Tsuji PM4C-05A Motor Controller
     ssppeecc now supports the Tsuji model PM4C-05A motor controllers.  The
     controller can be used with ssppeecc over GPIB or serial interfaces.  The
     controller is selected as TTSSUUJJII44CC on the MMotor screen of the configuration
     editor.  The optional ""mmiisscc__ppaarr__11"" motor parameter, if set, will enable the
     controller's hold-off mode for the associated axis.

Support For New Focus 8751 Closed-Loop Picomotors
     The support for the New Focus 87XX Picomotor Controller has been extended
     to include support for the 8751 closed-loop controllers.  Such support
     requires New Focus firmware version 1.5.4 or higher in the model 8752
     ethernet controller.  ssppeecc will automatically detect the presence of the
     closed-loop controllers.

New Debugging Level For Server-Client Socket I/O
     The new debugging bit 0x800000 will print only the socket I/O transactions
     associated with ssppeecc server and client communications.  That output will no
     longer be displayed with debugging bit 0x40 (64).

October 3, 2005 - RELEASE 5.06.03-7

New Option To rreemmoottee__ssttaatt(())
     If a second argument of ""??""  is used with the rreemmoottee__ssttaatt(()) function on a
     ssppeecc client, the return value is a string indicating the status of the
     connection specified by the first argument.  Possible return strings are
     ""uupp"", ""ttrryyiinngg"", ""lloosstt"" and ""nnoo ccoonnnneeccttiioonn"".  See the _s_e_r_v_e_r help file for
     details.

New Tracking Option For X19C ssuurrff Geometry
     The X19C variation of the ssuurrff geometry now includes an option to turn off
     sample height and detector height tracking with the incident angle motions.
     This is the same option that has been available with the X22B and CMC ssuurrff
     variations.  Tracking is generally turned off to speed alignment of the
     motors associated with the incident angle.  The sseettttrraacckk macro can be used
     to turn tracking on or off.  By default, tracking is on.

Bug In Handling of SSVV__AABBOORRTT Fixed
     Deficiencies in the original implementation of the handling of SSVV__AABBOORRTT
     protocol command (which is intended to mimic a ^^CC action from the keyboard)
     by a ssppeecc server have been addressed.  Previously, reception of an SSVV__AABBOORRTT
     packet could cause the server to become stuck in a loop on reads of the
     input socket stream and/or to fail to carry out the abort actions on
     subsequent SSVV__AABBOORRTT packets.

Recently Introduced ssppeecc Client Bugs Fixed
     The release 5.06.03-1 update that was intended to allow servers to be
     interchangeably specified by port number or ssppeecc version name had problems
     that could cause a ssppeecc client to crash or not properly recognize an
     existing connection.  Those problems have been fixed.

September 19, 2005 - RELEASE 5.06.03-6

Bug Fix For Compumotor 6K
     A programming bug that could cause bad positions to be reported for the
     Compumotor 6K motor controller has been fixed.

September 17, 2005 - RELEASE 5.06.03-5

Fix For XIA X10P Support
     The changes in release 5.06.02-1 to add support for multiple CAMAC crates
     inadvertently broke the support for XIA X10P parallel port MCA device.
     That problem has been fixed.  (Note, the X10P support in ssppeecc does work
     with the Radiant Vortex X-ray detector.)

September 13, 2005 - RELEASE 5.06.03-4

Fix For Compumotor 6K Encoder Support
     ssppeecc now sends the EENNCCCCNNTT command to the Compumotor 6K motor controllers,
     which is needed to enable encoder position read back.  ssppeecc now also
     properly uses the configured encoder step-size parameter to determine the
     user angle associated with the encoder position.

August 20, 2005 - RELEASE 5.06.03-3

Fix For FAST ComTec MCDLAP ISA Board MCA Support
     A bug in the recently introduced support for the FAST ComTec MCDLAP that
     prevent the ""ssoofftt__pprreesseett"" mode from working has been fixed.

August 3, 2005 - RELEASE 5.06.03-2

Fix For Compumotor 6K Support
     A problem that prevented ssppeecc from recognizing certain eight-motor
     Compumotor 6K controller configurations has been fixed.

August 3, 2005 - RELEASE 5.06.03-1

Updated For GCC Release 4
     The ssppeecc code has been updated to compile cleanly with gcc 4.x, as used
     with Fedora Core 4 Linux, Mac OS 10.4, etc.

Pseudocounters Now Ignore Scale Factor
     For pseudocounters (those counters with controller type NNOONNEE in the ccoonnffiigg
     file), ssppeecc shouldn't change the value assigned to the corresponding
     element of the SS[[]] scaler array.  However, in prior releases, ssppeecc would
     divide the value in SS[[]] by the ccoonnffiigg-file scale factor on every call of
     ggeettccoouunnttss.  Since the scale factor is normally set to one, this was seldom
     an issue.  In any case, with this release, ssppeecc will ignore the scale
     factor for pseudocounters.  The configured scale factor can be retrieved,
     though, via the ""ssccaallee"" option to ccoouunntteerr__ppaarr(()).

Two Issues With the ssppeecc Client Addressed
     Previously, if a ssppeecc client configured to use ssppeecc server hardware was
     started before the server was started, and if a user-level call, such as
     rreemmoottee__ccmmdd(()), was also issued before the server started, when the server
     finally did come up, the client would not connect to the server for the
     configured hardware.  That problem has been fixed.

     Also previously, if a server was specified by both a symbolic name, such as
     hhoosstt::ffoouurrcc, and a port number, such as hhoosstt::66551100, ssppeecc would attempt to
     create two connections, even if the first was using the same port number as
     the second.  The two connections were problematic in some situations.  Now
     the ssppeecc client will check if the two specifications refer to the same
     server and use the same connection when appropriate.

Support For FAST ComTec MCDLAP ISA Board MCA
     Initial support for the FAST ComTec MCDLAP ISA Board MCA is now included
     with ssppeecc.

Fix For Mclennan Motor Controllers
     Previously, errors were sometimes generated when changing base and slew
     rates on a multiplexed Mclennan motor channel on a Model 381 or 608
     controller if the new base rate was higher than the old slew rate.  ssppeecc
     now makes sure the slew rate is reprogrammed first, when necessary.

Fix For IMS Motor Controllers
     A problem, where a failed serial communication link to an IMS motor
     controller could lead to endless looping in ssppeecc, has been addressed.

July 15, 2005 - RELEASE 5.06.02-9

Support For Scientific Solutions GPIB Controllers Updated
     The Scientific Solutions IEEE-488-CL/PCI GPIB controller is now supported
     by ssppeecc on Linux.  The support is entirely built into the ssppeecc code and no
     kernel driver is required.  The support shares code with the
     register-compatible ISA GPIB controllers from Scientific Solutions
     (formerly Tecmar).  Also, the code has also been updated to allow multiple
     boards of this type (both ISA and PCI) to be used with ssppeecc simultaneously.
     In addition, the timing in the polling loops of the code has been improved.

Support For Scientific Solutions Labmaster PCI Timer/Counter
     The Scientific Solutions Labmaster DPCI with Am9513-based timer/counter
     functionality is now supported by ssppeecc.

Update For Am9513-Type Counter/Timers
     A number of updates have been made to the Am9513 code.  Multiple PC cards
     with Am9513 chips may now be used.  An improved gating system is
     implemented, although it requires adding an additional jumper between two
     connector pins.  However, boards without the jumper will still work.  See
     the _a_m_9_5_1_3 help file for details.

Fix For Hecus ASA-32 MCA Card
     Missing code in the Hecus ASA-32 MCA card support needed to set the time
     preset when the MCA ""ssoofftt__pprreesseett"" mode is active has been put in place.

Fix For nneewwffiillee Macro
     An old bug in the nneewwffiillee macro where a typo in a variable name resulted in
     a harmless but unintended reset of the EEPPOOCCHH variable when an existing file
     was reused, has been fixed.

June 12, 2005 - RELEASE 5.06.02-8

Fixes For Unit Number Assignment
     Previously, for a number of motor controller and counter types, when using
     more than one controller of the same type, if the device associated with
     one of the controllers couldn't be opened during hardware configuration,
     the unit numbers assigned to additional controllers of the same type would
     be shifted.  Although, this behavior was not normally encountered, it was
     annoying to users when it did occur, which usually happened when ssppeecc
     couldn't connect to controllers interfaced via Ethernet.  In this ssppeecc
     release, the code for most of the motor controller types has been changed
     to avoid the unit number reassignment.

Bug Fix For End-Of-String For Several Socket-Interfaced Controllers
     A bug in the end-of-string detection that affected only the Galil, New
     Focus model 8752/53 and Compumotor 6K motor controllers, and only over
     socket interfaces, has been fixed.  The bug could result in communication
     problems with the controllers, although only problems with the 6K have so
     far been reported.

Accommodate TACO Plus TANGO Install For ESRF
     The ssppeecc installation script now accommodates linking with both TACO and
     TANGO libraries simultaneously, as is now needed in the ESRF instrument
     control environment.

May 22, 2005 - RELEASE 5.06.02-7

New zeta Geometry
     A new four-motor geometry for a diffractometer located at NSLS beamline X21
     is included.  The geometry is called zzeettaa.  The geometry motors are called
     nnuu, zzeettaa, ddeellttaa and tthheettaa.

Support For OMS MAXv Motor Controller
     This ssppeecc release supports the new Oregon Micro Systems MAXv VME motor
     controller module.

Fixes For Compumotor 6K
     A problem with setting the axis definition on the Compumotor 6K to stepper
     or server to reflect the ssppeecc hardware configuration file has been fixed.
     Also, an issue where the unit number assignments would change if configured
     controllers were unavailable has been addressed.

May 4, 2005 - RELEASE 5.06.02-6

Fix For Optional Motor Parameters With Linked Configurations
     An old bug, where for linked configurations, the MMOOTTPPAARR optional parameters
     encountered in the ccoonnffiigg file for motors not part of the active geometry
     were assigned to the last motor that was part of the active geometry, has
     been fixed.

May 2, 2005 - RELEASE 5.06.02-5

Fix For DAC Motor Timing
     Short (< 10 millisecond) sleeps have been added after PCI- and ISA-board
     DAC motors are set to allow the DACs time to settle, apparently required in
     some configurations when more than one DAC channel on the same card is to
     be ""mmoovveedd"" at the same time.

Fix For Macro-Hardware Motor Start Command
     A bug, where the first parameter sent with the ""ssttaarrtt__oonnee"" key in the call
     to the macro motor ""__ccmmdd"" macro function had been inadvertently sent as the
     final position after a backlash correction was applied, rather than final
     position for the first part of a two-part move with backlash, has been
     fixed.

April 27, 2005 - RELEASE 5.06.02-4

Option Added To OMS Multiplexing
     The multiplexing support for the OMS motor controller, where a single
     channel can be used to drive up to sixteen motors, has a new mmoottoorr__ppaarr(())
     option available.  When set, the order in which the multiplexed channels
     are moved will be reversed.  By default, when more than one motor is
     commanded to move at the same time, the motors are moved in the channel
     number order.  The command

         mmoottoorr__ppaarr((mmnnee,, ""mmpplleexx__rreevveerrssee"",, 11))

     will cause the motors to be moved in reverse channel number order, while

         mmoottoorr__ppaarr((mmnnee,, ""mmpplleexx__rreevveerrssee"",, 00))

     will restore the default order.

April 25, 2005 - RELEASE 5.06.02-3

Fix For Server-Mode ""ssttaattuuss//qquuiitt"" Property
     A problem, where the server property ""ssttaattuuss//qquuiitt"" was often not sent to
     registered clients when the server exited, has been fixed.

April 24, 2005 - RELEASE 5.06.02-2

Support For Parker/Compumotor 6K Motor Controller
     This ssppeecc release includes support for the Parker/Compumotor 6K motor
     controller over serial and Ethernet interfaces.  The code includes support
     for encoders, servo motors and home searches, although some details of the
     implementation of these features may require refinement.  The support for
     these motor controllers includes a new ssppeecc feature for detecting an
     emergency stop.  If any of the 6K limit or trigger inputs have been
     preprogrammed using the LLIIMMFFNNCC or IINNFFNNCC firmware commands for behavior DD
     (emergency stop), ssppeecc will check whether the corresponding bit is set
     before starting a move and when a move has finished.  In the former case,
     ssppeecc will warn the user that the emergency stop is active.  In the latter
     case, ssppeecc will print a message that an emergency stop has occurred.

New Motor Property
     A new eemmeerrggeennccyy ssttoopp motor property has been incorporated into the ssppeecc
     infrastructure.  Currently, the only motor controller which can trigger the
     property is the Compumotor 6K.  ssppeecc's behavior on receiving an emergency
     stop is much the same as hitting a limit.  However, unlike with an active
     limit, ssppeecc will allow a new move to be started while the emergency stop is
     active.

New kkaappppaa Geometry Variation For Crystalogic Diffractometer
     A new kkaappppaa geometry variation is included to support Crystalogic kappa
     diffractometers where the detector angle is controlled by an elevator.  The
     configuration is automatically selected if, in addition to the standard
     ffoouurrcc and kkaappppaa motors, a motor with mnemonic xxllhhggtt is included in the
     ccoonnffiigg file.  For such a configuration, the tttthh motor should be configured
     with controller type NNOONNEE, as it will be a pseudomotor.  In addition, two
     geometry parameters, gg__xxttaallooggiicc__dd11 (the vertical distance between the
     instrument center and the driven point below the detector table) and
     gg__xxttaallooggiicc__dd22 (the horizontal distance between the instrument center and
     the detector table vertical axis) are included with the standard geometry
     macro files.

Further Improvements For Struck SIS 1100/3100 V2 Driver
     Additional modifications to the recently updated support for Struck's
     version 2.0 Linux driver for their SIS 1100/3100 PCI-to-VME controller
     turned out to be needed.

April 22, 2005 - RELEASE 5.06.02-1

Initial Support For Multiple CAMAC Controllers
     This release of ssppeecc allows up to four CAMAC crate controllers to be used
     at the same time, however, with a number of limitations.  (Previously, only
     one crate controller could be used.)  Currently, except for the Jorway 73A,
     the KS3929 and the DSP 6001 controller models, only one instance of a
     particular type or model of a controller can be used at a time.  Also, so
     far the only CAMAC modules that can be installed in other than the first
     crate (crate 0) are the XIA DXP-4C/4C2X MCA, KS-3655, KS-3610, QS-450,
     RTC-018, KS-3112, KS-3116, KS-3195 and E250 modules.  In addition, the
     user-level functions ccaa__ggeett(()), ccaa__ppuutt(()), ccaa__ffnnaa(()) and ccaa__ccnnttll(()) currently
     only work with the first crate.  The multiple crate support will be
     extended for multiple identical controllers, additional modules and to the
     user-level functions in the future as needed.

     To configure additional controllers from the eeddccoonnff configuration editor
     (invoked by the ccoonnffiigg macro), use ^^FF or ^^BB on the CAMAC entry of the
     IInterfaces screen.  To configure modules in the additional crates, type CC
     from the CAMAC crate screen to cycle through the crates associated with
     each controller.  For scaler modules installed in other than the first
     CAMAC crate, the crate number must be entered in the same field as the unit
     number on the SScaler screen of the configuration editor using the
     crate/unit notation, as in 1/0 for crate 1, unit 0.  For motor modules
     installed in other than the first CAMAC crate, the crate number is entered
     as [crate/]unit/channel in the unit/[module/]channel field of the motor
     screen.

     If only one crate is configured, the ccoonnffiigg file syntax is the same as
     before.  When multiple crates are configured, additional information
     specifying crate number for each module and controller is added to the
     ccoonnffiigg file.

Updated Code For CAMAC DAC Modules
     The support for the CAMAC KS-3112, KS-3116, KS-3195 and E250 (used as DAC
     motors) has been rewritten to use the ""nneeww"" (as of 1995) motor formalism.
     This change should be invisible for the most part, but does allow these
     motors to be accessed via the ssppeecc server.  Also, the optional unit/channel
     configuration feature is now available for these motor channels.

Fix For XIA DXP CAMAC Module
     A bug that prevented the XIA DXP parameters from being modified using the
     mmccaa__ppaarr(()) function where ssppeecc incorrectly indicated the parameter was ""rreeaadd
     oonnllyy"", has been fixed.

Improved Memory Mapping For Struck SIS 1100/3100
     The Struck SIS 1100/3100 PCI-to-VME controller on Linux has room for
     sixty-four 4 megabyte memory maps.  Previously, if all were used, an
     attempt to map a new region would fail.  In this update, ssppeecc will now
     reuse mapping registers in a circular fashion, thus making it possible to
     access the entire 4 gigabyte A32 VME address space.

Fix For Extra Echo In Piper Mode
     A recent bug (introduced with the piper mode fix in ssppeecc release
     5.05.05-7), that caused commands to be echoed twice when the file
     descriptor option to the --pp command line option was zero, has been fixed.

Fix For Start-up With No ccoonnffiigg File
     Although there is little reason to start ssppeecc with no ccoonnffiigg file, a bug
     which would cause ssppeecc to crash in that situation has been fixed.

April 13, 2005 - RELEASE 5.06.01-8

Fix For Hecus ASA-32 MCA Card
     A bug in the support for the Hecus ASA-32 MCA ISA card that affected the
     clear operation has been fixed.

April 4, 2005 - RELEASE 5.06.01-7

Update For Struck SIS 1100/3100 V2 Driver
     Support for the Struck SIS 1100/3100 PCI-to-VME controller on Linux has
     been updated to work with Struck's new Version 2 driver.  The new driver
     supports Linux 2.6 kernels.  When configuring ssppeecc to work with the new
     driver, note the default device name for the first controller has changed
     from //ddeevv//ssiiss11110000 to //ddeevv//ssiiss11110000__0000rreemmoottee.

March 21, 2005 - RELEASE 5.06.01-6

Fix For PI E710 Motor Controller
     An adjustment to the code for the Physik Instrumente Model E710 Picomotor
     Controller has been made to allow it to work with socket-to-serial devices.

March 10, 2005 - RELEASE 5.06.01-5

More Improvements For Micos Motor Controllers
     The Micos VENUS-2 compatible motor controllers on occasion send the same
     response twice, such that subsequent commands and responses become
     unsynchronized.  ssppeecc now examines responses to most commands to make sure
     the response contains the correct number of arguments.  If the number of
     arguments is incorrect, ssppeecc will flush the input buffer for the Micos
     controller and send the command again in order to reestablish synchronized
     communication.  (This code is considered a work around for a defect in the
     Micos firmware.)

March 9, 2005 - RELEASE 5.06.01-4

Enhanced Powder-Mode Macros
     The powder-mode macros will now return the rocked motor to its position at
     the start of the scan, taking into account the backlash correction, if
     needed.  (See the _s_e_t_p_o_w_d_e_r help file for more information.)

Additions To ppssiicc Macros
     The standard ppssiicc geometry macros now include suitable definitions for the
     traditional ffoouurrcc macros aann and uuaann, which move ddeell and eettaa; ppll and uuppll,
     which move cchhii and pphhii; and tthh22tthh, which scans ddeell and eettaa.

Fix For MicroMo MVP-2001 Motor Controller
     A bug in the support for the MicroMo MVP-2001 motor controller that
     prevented motor channels numbered ten and above from working has been
     fixed.

March 3, 2005 - RELEASE 5.06.01-3

Improvements For Micos Motor Controllers
     This release includes some new code to address communication
     synchronization issues with the Micos VENUS-2 compatible motor controllers
     that have been observed after ^^CC aborts.

Another Fix For EPICS Motors Powder-Mode Behavior
     The renewed attention (see below) to powder-mode behavior for EPICS motors
     revealed that the backlash parameter for the EPICS powder-mode motor, set
     to zero during a powder-mode scan, did not get restored at the end of the
     scan.  Such behavior has always been the case, but is now fixed.

February 24, 2005 - RELEASE 5.06.01-2

Fix For EPICS Motors Powder-Mode Behavior
     The recent addition of the new powder-mode mmoottoorr__ppaarr(()) parameters in ssppeecc
     release 5.05.05-1 adversely affected use of powder mode with EPICS motors.
     This release should correct the problem.

February 16, 2005 - RELEASE 5.06.01-1

Fix For ssppeecc Exiting On Start Up On Macro Hardware Macro Errors
     Previously, during the initial hardware configuration for the case of macro
     hardware (see the mmaacc__hhddww help file), errors in the macro functions
     associated with the hardware that would normally cause ssppeecc to reset to
     command level would cause ssppeecc to exit.  Now, ssppeecc will continue running,
     although the particular macro function call that contained the error will
     exit.

changes                      spec 5.05 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 5.05

February 14, 2005 - RELEASE 5.05.05-9

Support For ULS3020 Counter/Timer
     ssppeecc now includes support for the ULS3020 NIM-module counter/timer from the
     Korean company ULS, Inc.  See _w_w_w_._u_l_s_._c_o_._k_r for hardware details.

OMS MAXp Problem Introduced In Last Release Fixed
     Some ill-considered changes in the code for the OMS PCI MAXp motor
     controller added in ssppeecc release 5.05.05-8 that prevented the controller
     from working as it should have been undone.

February 4, 2005 - RELEASE 5.05.05-8

New Formatting Options For ddaattee(())
     ssppeecc now allows an optional argument to the ddaattee(()) function to specify the
     format of the date string.  The syntax of the argument follows that of the
     standard C library ssttrrffttiimmee(()) function, with the additional ssppeecc-added
     option of specifying a format for fractional seconds.  See the _f_u_n_c_s help
     file for details.

New Options For Error-Logging Features
     There are a couple of new features associated with the error-logging
     facility.  If the ssppeecc__ppaarr(()) option ""eelloogg__ttiimmeessttaammpp"" is set to less than a
     second (units are minutes, so the value must be less than 1/60), every
     message written to the eelloogg file will be preceded by a time stamp, and the
     time stamp will print the epoch time to microsecond resolution (as obtained
     from the system ggeettttiimmeeooffddaayy(()) function).  This feature is to accomodate
     users requiring relatively precise time stamps associated with each
     command.  In addition, a new ssppeecc__ppaarr(()) option ""eelloogg__lleevveell"" is available.
     The default value of 1 prints commands typed at the keyboard to the eelloogg
     files as before.  At level 2, commands read from command files will also be
     logged.

Updates For HANARO KISIM USB Acquisition Module
     ssppeecc now supports multiple HANARO KISIM USB modules.  Also, the module's
     one dimensional mode is now supported.  See the updated _k_i_s_i_m help file for
     details.

Fix For Potential PCI Memory-Mapping Problem
     A bug with the masking of memory base addresses obtained from PCI
     configuration space that could cause problems with some of the PCI cards
     supported by ssppeecc has been fixed.  A problem had only been observed in one
     ssppeecc installation with an OMS MAXp card.

January 11, 2005 - RELEASE 5.05.05-7

New Options To sseerr__ppaarr(())
     A new ""ddeevviiccee__iidd"" option to the sseerr__ppaarr(()) function returns the name of the
     associated serial device.  A new ""rreessppoonnssiivvee"" option returns a value that
     indicates whether the associated device was opened successfully.  These
     options parallel options with the same names available with mmoottoorr__ppaarr(()),
     ccoouunntteerr__ppaarr(()), mmccaa__ppaarr(()) and iimmaaggee__ppaarr(()).  See the _s_e_r_i_a_l help file for
     details.

Fix For ppiippeerr Mode
     A minor fix to the code that interfaces ssppeecc to the optional command-line
     editing libraries has been made to allow the ppiippeerr method of controlling
     ssppeecc through another program to work when ssppeecc is linked with the lliibbeeddiitt
     library.  Another fix now allows (for the first time) the ppiippeerr method to
     work when ssppeecc isn't linked with an external command-line editing library.
     Note, however, the ppiippeerr method is no longer recommended for interfacing
     other programs to ssppeecc.  The ssppeecc server mode is preferred.  See the _s_e_r_v_e_r
     and _p_i_p_e_r help files for more information.

December 18, 2004 - RELEASE 5.05.05-6

Support for HANARO KISIM USB Module
     This ssppeecc release includes preliminary support for the HANARO KISIM USB
     Module.  The device was developed at KAERI to interface with the ESRF N110
     TDC device used with 2D detectors.  See the _k_i_s_i_m help file for details.
     (Note, this is the first piece of USB hardware to be supported by ssppeecc.)

Support for Hecus ASA-32 MCA Card
     This ssppeecc release includes preliminary support for the ASA-32 ISA
     acquisition card, which is part of the Hecus SAX/SWAX X-ray system.  See
     the _h_e_c_u_s help file for details.

wwaaiitt Macros Updated
     New global variables WWAAIITTIINNGG__MMOOVVEE, WWAAIITTIINNGG__CCOOUUNNTT and WWAAIITTIINNGG__AACCQQ are now
     part of the standard macros.  These variables are incorporated into the
     wwaaiittaallll, wwaaiittmmoovvee, wwaaiittccoouunntt, wwaaiittaaccqq, cchhkk__mmoovvee, cchhkk__ccoouunntt and cchhkk__aaccqq
     macros to hold the most recent result of a wwaaiitt((00xx2211)), wwaaiitt((00xx2222)) and
     wwaaiitt((00xx2244)), respectively.  The latter calls are made in the cchhkk__** macros.
     Such results are useful in macros such as uusseerr__ggeettaanngglleess or uusseerr__ggeettccoouunnttss
     to determine whether moving or counting is still active without incurring
     the overhead of an additional hardware poll, particularly during updated
     moving or counting.

December 8, 2004 - RELEASE 5.05.05-5

Fix For New Focus 8750/53 Small Moves
     A problem where ssppeecc didn't properly detect the end of small, fast moves
     for the New Focus 8750/53 motor controllers has been fixed.

Fixed Bug With Server-Mode ssttaattuuss//rreeaaddyy Property
     A bug in the implementation of the ssttaattuuss//rreeaaddyy property (sent by the ssppeecc
     server to indicate when the server is available to execute commands either
     received from a client or typed in at the keyboard), where the values sent
     before and after keyboard input were opposite of what was intended, has
     been fixed.  The behavior of this property is now as documented in the
     _s_e_r_v_e_r help file.

Improved Socket Debugging Display
     When debug mode 0x400000 (hexadecimal dump) is added to debug mode 0x40
     (basic hardware), repeated lines of identical values are now condensed to
     minimize generated output.  The hexadecimal dump mode is currently only
     used with socket debugging, including socket communications between ssppeecc
     server and clients.

November 6, 2004 - RELEASE 5.05.05-4

More Workarounds For New Focus 8750/53 Firmware
     The New Focus 8750/53 firmware bug that has been the subject of previous
     ssppeecc workarounds is reported to have been fixed in firmware version 1.5.6,
     so the ssppeecc workaround is now only activated for firmware versions 1.3.1
     through 1.5.5.  Also, ssppeecc now sends the ""JJOOFF"" (joystick off) command on
     initialization, as controllers with recent firmware versions don't seem to
     work properly otherwise.  (The command should do no harm with earlier
     firmware versions.)

Workaround For Source-Forge LLiinnuuxx GPIB 3.2 Anomalies
     The Source Forge LLiinnuuxx GPIB project (successor to the deprecated linux-lab
     GPIB project) appears to be usable with ssppeecc using the cciibb..oo configuration
     option.  However, the 3.2 release of the package (for 2.6 LLiinnuuxx kernels)
     appears to have broken the compatibility of the National Instruments
     standard iibboonnll(()) interface function.  This ssppeecc release contains a
     workaround for that broken behavior.  See the _n_i_g_p_i_b help file for
     information on configuring ssppeecc to use this library.  (See
     _h_t_t_p_:_/_/_l_i_n_u_x_-_g_p_i_b_._s_o_u_r_c_e_f_o_r_g_e_._n_e_t for downloads and documentation of
     version 3 of the LLiinnuuxx GPIB project.)

October 14, 2004 - RELEASE 5.05.05-3

Help Utility Links File Updated
     The index file used by ssppeecc's built-in help utility (normally installed as
     //uussrr//llooccaall//lliibb//ssppeecc..dd//hheellpp//..lliinnkkss), which has had out-of-date line-number
     information for some time, is now automatically generated and so will
     always be up to date with each ssppeecc distribution.

ccddeeff(()) Query Syntax Updated
     In previous releases, the syntax to print out the pieces of a ccddeeff(())
     chained macro was ccddeeff((nnaammee,, """",, """",, ""??"")), although the documentation
     indicated ccddeeff((nnaammee,, """",, ""??"")).  As of this release, a ""??""  as second, third
     or fourth argument will print out the macro parts.

eeddccoonnff Allows VME Addresses Of Zero
     Prior releases of the eeddccoonnff hardware configuration editor were
     inconsistent with respect to allowing a value of zero for the base address
     of a VME module.  The current release will allow a zero value, and such
     behavior should continue in future releases.

Fix For Recent Obscure Server-Mode Bug
     A bug that could lead to a segmentation fault and associated mainly with
     features added for server mode in ssppeecc release 5.05.05-1 has been fixed.
     The fault could occur when the server tried to send a delete event for a
     watched array element that had been created in a macro function where the
     array name had been passed to the macro function as an argument.

October 12, 2004 - RELEASE 5.05.05-2

Fix For OMS ISA Support
     Updates to the OMS support in release 5.05.03-1 included some modifications
     to the low-level interface code.  The changes apparently fatally affected
     some sensitive timing for at least one ISA card, namely the PC39.  This
     ssppeecc release readjusts the low-level OMS interface code so that the PC39
     again works properly.

September 20, 2004 - RELEASE 5.05.05-1

New Motor Parameters To Set Powder-Mode Speed
     Powder-mode uses ssppeecc's mmoovvee__ccnntt command to gate counters open while a
     designated motor is rocked at each point of a scan.  (See the _s_e_t_p_o_w_d_e_r
     help file for more information.)  Previously, the powder-mode motor rocking
     speed was set to the motor's base rate.  To accommodate users needing a
     faster rocking speed that requires accelerating from a base rate, the
     following mmoottoorr__ppaarr(()) motor parameters are now available: ""ppoowwddeerr__bbaassee"",
     ""ppoowwddeerr__sslleeww"" and ""ppoowwddeerr__aacccceelleerraattiioonn"".  The values for the first two
     parameters are set to the motor base rate and the last to the motor
     acceleration when ssppeecc starts up and on every rreeccoonnffiigg command (or ccoonnffiigg
     macro invocation).  If the ""ppoowwddeerr__sslleeww"" value is less than the
     ""ppoowwddeerr__bbaassee"" value both the base and slew rates are set to the
     ""ppoowwddeerr__sslleeww"" value.  (Certain motor controllers, namely the 18011, CM3000,
     CM4000, E500, ES_OMS, ES_VPAP, HUB9000, IP28, MC4, MCB, SIX19, SMC and
     XRGCI_M, do not currently recognize these new parameters.  Contact CSS to
     discuss the feasibility of adding support for the new parameters for any of
     these controllers.)

New Server Feature To Send Delete Events
     The ssppeecc server will now send events to clients when registered global
     variables or associative array elements are deleted.  See the _s_e_r_v_e_r help
     file for more details.  Note, the ssppeecc client currently takes no action on
     such events.

New Server Feature To Reinstate Watched Status
     The ssppeecc server will now automatically reinstate the ""wwaattcchheedd"" status of
     global variables and associative array elements that are registered by
     clients and subsequently made unglobal in the server and then made global
     again.

Client pprroopp__wwaattcchh(()) Command Improved
     The pprroopp__wwaattcchh(()) command used by the ssppeecc client to register properties on
     which to receive events from the server will now re-register properties
     when invoked for a previously registered property.  Previously, there was
     no way to re-register a variable that had, for example, been made unglobal
     on the server and then global again other than by exiting and restarting
     the client.

New Support For HANARO Motor Controller
     Support is included for a new motor controller built and used at the HANARO
     research reactor at the Korea Atomic Energy Research Institute (KAERI).

Workaround For New Focus 8750/53 Firmware Bug Extended
     Since the New Focus 8750/53 firmware bug first addressed in ssppeecc release
     5.04.04-10 hasn't been fixed in firmware version 1.5.4, the ssppeecc workaround
     is now also applied to that firmware release.

Instability Associated With EPICS Motors Fixed
     A double-free bug that could result in segmentation faults on some
     platforms, introduced in ssppeecc release 5.05.03-7 and only associated with
     the rreeccoonnffiigg call for EPICS motors, has been fixed.

One More Revision Of the Algorithm For Determining EPICS Release
     The method for determining the EPICS release (3.13 versus 3.14) in ssppeecc's
     IInnssttaallll script, most recently revised in release 5.05.04-8, has been
     rewritten once more and is now better than ever.

September 10, 2004 - RELEASE 5.05.04-9

Update To New Code For Micos Motor Controllers
     The support for the Micos VENUS-2 compatible motor controllers added in
     release 5.05.04-6 has been updated to fix a problem with spurious error
     messages.

September 8, 2004 - RELEASE 5.05.04-8

Recent Client Segmentation Fault Fixed
     A bug associated with the client/server updates of release 5.05.04-1, where
     a rreemmoottee__eevvaall(()) call that failed (due to an unreachable host, for example)
     could produce a segmentation fault, has been fixed.

Installation Root-User Test Modified
     The IInnssttaallll installation script root-access test has been revised to not
     require write permission in the current directory if the standard shell
     command iidd exists.  This change helps in a situation where root access is
     available, but not for writing to an NFS-mounted disk where the ssppeecc
     distribution might be located.  Note, root access is required for
     installing ssppeecc on LLiinnuuxx boxes where I/O port or memory-map access is used
     for control of PC cards.  Otherwise, installation only requires write
     access to the directories where ssppeecc is installed along with permission to
     overwrite any existing ssppeecc files.

Installation EPICS Release Specification Enhanced
     Since release 5.05.01, ssppeecc can be linked with either EPICS release 3.13 or
     EPICS release 3.14.  ssppeecc needs to know which, as different ssppeecc libraries
     are used for the different EPICS releases.  Previously, the EPICS release
     was determined automatically by the IInnssttaallll script by examining the
     eeppiiccssVVeerrssiioonn..hh file in the EPICS base directory specified in the ssppeecc
     installation configuration.  However, although some sites have the EPICS
     libraries available, the header files are not.  Now, if the header files
     aren't available, the installation will default to EPICS release 3.13.
     However, by setting the shell variable EEPPIICCSS__VVEERR to 331144 the ssppeecc
     administrator can force linking for the 3.14 release.  Usage from the shell
     command line might be

        EEPPIICCSS__VVEERR==331144 ..//IInnssttaallll --dd

September 2, 2004 - RELEASE 5.05.04-7

MDrive Support Improved
     The code to support the IMS MDrive motor controllers is now a bit more
     robust.  Previously, replies to position and status requests were
     indistinguishable.  Occasionally, an MDrive controller would miss a
     response and ssppeecc would get unsynchronized with respect to the requests and
     replies, leading to unexpected behavior.  The MDrive controllers are now
     programmed to format replies to position and status requests such that ssppeecc
     can tell one from the other and resynchronize when necessary.

Fix For Recent Bug in ESRF CCD Support
     An undocumented update to the ESRF CCD support in ssppeecc release 5.05.04-3
     that removed the constraint on the number of units that could be
     configured, also introduced a bug that prevented the code from working
     properly at all.  That bug has been fixed.

Fix For Opening Socket-to-Serial Interfaces
     Code introduced in ssppeecc release 5.05.03-8 to do a sleep after opening a
     socket-to-serial device has been eliminated, as the sleep appears to have
     been unnecessary, but did noticeably add to the configuration time
     overhead.

August 31, 2004 - RELEASE 5.05.04-6

Support For Micos VENUS-2 Compatible Motor Controllers
     Initial support for the Micos VENUS-2 compatible motor controllers is
     included in this ssppeecc release.

August 24, 2004 - RELEASE 5.05.04-5

Update To Server For Forward Compatibility
     A fix had been made to the ssppeecc server, so that it will work with future
     clients that may use a newer version of the ssppeecc client/server protocol, as
     was originally intended.  Unfortunately, ssppeecc releases prior to this update
     require clients of the same or earlier client/server protocol version.

August 17, 2004 - RELEASE 5.05.04-4

Implementation of Counters-Only Mode For ssppeecc Client
     The ""ccoouunntteerrss--oonnllyy"" mode is now usable as a device configuration on ssppeecc
     clients.  The ssppeecc server will send events to the client when the
     associated scalers are updated during counting on the server.  The client
     will copy the latest values received via events from the server to the SS[[]]
     scaler array when the client ggeettccoouunnttss command is executed.  See the _s_e_r_v_e_r
     help file for more information.

Minor eeddccoonnff Fix
     A bug in the eeddccoonnff hardware configuration editor, where inappropriate
     serial-device prefixes (ESRF:, EPICS: or SOCKET:) could be included in the
     ccoonnffiigg file output for non-serial devices, has been fixed.

Fix For Setting Trinamic Current Parameters
     A bug that limited the maximum peak current for the Trinamic QUADpack motor
     controllers to 800 mA when set from the ccoonnffiigg file has been fixed.

July 31, 2004 - RELEASE 5.05.04-3

Bug In Configuring OMS PCIx Controllers Fixed
     A bug in the eeddccoonnff hardware configuration editor (associated with the
     support added for the OMS MAXp in release 5.05.03-1), where the parameters
     for the OMS PCIx controller information were read incorrectly, has been
     fixed.

Fixes For New OMS Homing Feature
     A couple of issues with the new ""hhoommee__mmeetthhoodd"" feature for OMS controllers
     have been addressed.  A problem where the standard slew speed on moves
     following certain home sequences was not restored has been fixed.  Another
     problem, where under certain circumstances, the first move command was
     ignored after a home search when the search ended at a limit switch, has
     been fixed.

July 22, 2004 - RELEASE 5.05.04-2

Fix For Trinamic QUADpack/SIXpack Speed Settings
     A bug, where the speed parameters were sometimes not set correctly for
     cards beyond the first when multiple Trinamic QUADpack/SIXpack cards were
     assigned the same ssppeecc unit number, has been fixed.

Updated Counter Output Formats For Standard Scans
     The counter pprriinnttff(()) formats in the standard __lloooopp and __uuppdd__ccoouunntt macros
     have been modified to display non-integer values on the screen (and
     printer) when appropriate, and to include additional significant digits in
     the values written to the data file.

July 18, 2004 - RELEASE 5.05.04-1

New Associative Array Feature
     A new syntax feature allows initialization of associative arrays by
     assignment and the passing of associative-array data to macro functions by
     value.  The syntax uses a pair of square brackets to enclose a
     comma-separated list of colon-separated value pairs.  The first item of
     each pair is the associative array index and the second item is the value
     of the array element.  The examples below illustrate the usage:

        11..SSPPEECC>> xx == [[ ""vvaall""::112233,, 445566::""ddaattaa"" ]]

        22..SSPPEECC>> pp xx
        xx[[""vvaall""]] == 112233
        xx[[""445566""]] == ""ddaattaa""

        33..SSPPEECC>> ddeeff tteesstt((xx)) ''{{ ffoorr ((ii iinn xx)) pp ii,, xx[[ii]] }}''

        44..SSPPEECC>> tteesstt(([[ ""vvaall""::112233,, 445566::""ddaattaa"" ]]))
        vvaall 112233
        445566 ddaattaa

Improved ppssiicc Sector Calculation
     A change in the ppssiicc geometry code (see ggeeoo__ppssiicc..cc) makes another sector
     available for the nnaazz- and qqaazz-fixed modes that have the constraint
     eettaa=ddeell/2 or mmuu=nnuu/2.  For sector 9 (which only involves transformation of
     the detector circles) the sample circle positions are now recalculated to
     maintain the constraints.  This change provides more flexibility in
     positioning a ppssii-circle diffractometer.

Improved Connection Handling From ssppeecc Client To ssppeecc Server
     Code has been added to better handle the loss of connection from the ssppeecc
     client to the ssppeecc server, including additional timeout checks.

Server-Client Communication Faster
     The socket communication between the ssppeecc server and clients has been sped
     up by a significantly.

Fix For rreemmoottee__eevvaall(()) Return of Associative Arrays
     A bug, where the ssppeecc client's rreemmoottee__eevvaall(()) (and
     rreemmoottee__aassyynncc(())//rreemmoottee__ppoollll(())) couldn't return associative arrays, has been
     fixed.

Server Errors Noted On rreemmoottee__eevvaall(())
     The ssppeecc server protocol has been revised to allow the server to flag
     clients when commands sent by rreemmoottee__eevvaall(()) (and
     rreemmoottee__aassyynncc(())//rreemmoottee__ppoollll(())) fail due to unrecoverable errors, such as
     syntax or divide-by-zero errors.  ssppeecc clients will display the error
     messages provided by the server.

Client Can Create Associative Array Elements With pprroopp__ppuutt(())
     The previous limitation on creating new associative array elements with
     pprroopp__ppuutt(()) from a ssppeecc client has been removed.  The command
     pprroopp__ppuutt((""hhoosstt::ssppeecc"",, ""vvaarr//xx[[33]]"",, ""vvaalluuee"")) can create the associative array
     element on a ssppeecc server, even if the element doesn't already exist.  The
     associative array xx[[]] must already exist on the server, though.

New Server Protocol Options For Executing Functions
     The ssppeecc client/server protocol includes new commands to pass function
     names and arguments from client to server.  See the _s_e_r_v_e_r help file (or
     contact CSS) for additional information on the new SSVV__FFUUNNCC and
     SSVV__FFUUNNCC__WWIITTHH__RREETTUURRNN commands.

July 11, 2004 - RELEASE 5.05.03-8

More Features For CANbus Interface
     The built-in code to support CANbus devices has been improved with the
     addition of support for segmented SDO transfers and better reporting on SDO
     error returns.

Improvements For Socket-to-Serial Devices
     Some models of Ethernet-to-serial interfaces generate a short stream of
     garbage characters when the initial socket connection is made, which caused
     presence tests for a number of serial devices in ssppeecc to fail.  ssppeecc now
     attempts to flush out the garbage before the first command is sent.

July 5, 2004 - RELEASE 5.05.03-7

Fixes For EPICS Motor Record Support
     A couple of old, minor problems with the ssppeecc support of the EPICS motor
     record associated with how ssppeecc maintains certain parameters in step units,
     while the EPICS data base maintains the parameters in engineering units,
     have been corrected.  Previously, a negative step-size (or motor
     resolution) parameter would change the sign of motor base rate, slew rate
     and backlash in ssppeecc.  The negative speeds would cause problems for the
     EPICS motor record code.  Also, previously, if the initial connect events
     for motor base rate (VBAS), slew (VELO) or backlash (BDST) arrived before
     the connect event for the motor resolution (MRES), ssppeecc would, under
     certain conditions, maintain incorrect values for those parameters.

Several ERSF TACO Updates
     The ESRF TACO support for CCD cameras will now assign ddeevv__ppuuttggeett(()) error
     numbers to the global EESSRRFF__EERRRR symbol, if it exists.  Segmentation faults
     that could occur with ssppeecc hardware debugging turned on when TACO
     ddeevv__ppuuttggeett(()) calls that returned strings returned null pointers without
     setting an error code are now prevented.  Also, the TACO serial support can
     now set baud rates higher than 19,200.

July 1, 2004 - RELEASE 5.05.03-6

MDrive Channel Numbering Fixed Again
     The intended fix included in ssppeecc release 5.03.02-1 for the IMS MDrive
     motor controller channel numbering for channels above number 9 turns out
     not to have been effective.  This ssppeecc release has the true fix.

June 25, 2004 - RELEASE 5.05.03-5

Fix For Joerger VSC8/16 mmoovvee__ccnntt Support
     The code for the Joerger VSC8/16 VME scalers has been fixed so that the
     hardware responds as expected when used with the mmoovvee__ccnntt command that
     gates scalers open for counting while a motor is moving.

Touch Up For Trinamic QUADpack/SIXpack Presence Test
     The presence test for the Trianmic QUADpack/SIXpack motor controllers no
     longer tries other motors on a particular controller card if the first
     motor's presence test determines the card is unresponsive.

June 23, 2004 - RELEASE 5.05.03-4

New ssoocckk__ppaarr(()) Option For UDP Sockets
     A new ""ccoonnnneecctt__uuddpp"" option to the ssoocckk__ppaarr(()) function will create a socket
     using the UDP protocol, rather than the default TCP.  See the _s_o_c_k_e_t_s help
     file for more information.

New DAC Motor Device
     The Measurement Computing PCI DAC 6702/6703 cards are now supported as DAC
     motors.

Update For Trinamic QUADpack/SIXpack Motor Controllers
     Fixes and new features are included for the very recently added Trinamic
     QUADpack/SIXpack motor controller support.  Problems with the base-rate and
     slew-rate units have been fixed, the ^^CC abort now works correctly, and the
     limit switches now function as they should.  Also, new miscellaneous motor
     parameters for setting the peak and hold current are implemented.  Type
     mmoottoorr__ppaarr((mmnnee,, ""??"")) for a list of supported motor parameters.

Preliminary Support For Encoders For Phytron Controllers
     Preliminary support for encoders is included for the Phytron IXE, OMC and
     TMC motor controllers.  Select IIXXEE__EE as the motor type and enter the
     encoder steps per degree on the optional motor-parameter screen to enable
     the feature.

Galil Support Now Available on Non-LLiinnuuxx Platforms
     A bug that prevented the support for Galil motor controllers over Ethernet
     and serial interfaces added in ssppeecc release 5.02.02-1 from being available
     on platforms other than LLiinnuuxx has been fixed.

May 29, 2004 - RELEASE 5.05.03-3

Memory Mapping Fixes
     Potential problems with the configuration of certain PCI cards supported by
     ssppeecc user-level code on LLiinnuuxx have been fixed.  Previously, the ssppeecc code
     did not always make adjustments to the memory-map system calls if the PCI
     base-address values were not on a memory-page boundary (although the need
     for re-alignment is apparently rare).  In addition, the code now does a
     better job of freeing mapped regions when hardware is detached during the
     rreeccoonnffiigg operation.

May 27, 2004 - RELEASE 5.05.03-2

Preliminary Support For Trinamic QUADpack/SIXpack
     This ssppeecc release includes preliminary support for the Trinamic QUADpack
     and SIXpack motor controllers.

Home-Search Update For Kohzu SC-2/4/800 Controllers
     The code for the Kohzu SC-2/4/800 motor controllers now recognizes the
     optional home slew-rate, base-rate and acceleration motor parameters.

May 7, 2004 - RELEASE 5.05.03-1

OMS MAXp PCI Motor Controller Supported
     ssppeecc now supports the new Oregon Micro Systems 8-channel PCI controller
     model MAXp.  Each channel of this card can be used for stepper motors with
     or without encoders or for servo motors.  See the _o_m_s help file for
     configuration details.

New Homing Procedure for OMS Controllers
     A new highly configurable home search facility is available for the OMS
     motor controllers.  See the _o_m_s help file for usage details.

May 7, 2004 - RELEASE 5.05.02-7

Fix For Using Single-Element Data Arrays
     A bug introduced in ssppeecc release 5.02.01, where references to the single
     element of a one-element data array in certain contexts would result in an
     ""IIlllleeggaall rreeffeerreennccee ttoo aarrrraayy"" error, has been fixed.

New Commands To Access Digital I/O On NI 6601/6002
     New ccoouunntteerr__ppaarr(()) options are available to configure, write and read the
     eight digital I/O lines on the National Instruments 6601/6602 PCI
     counter/timers.  See the _n_i_6_6_0_x help file for details.

Help With XIA HSC Serial Numbers
     Some users have reported the XIA HSC (Huber Slit Controller) serial numbers
     in firmware don't always match the numbers stamped on the cases.  The
     serial number must be entered in the ssppeecc ccoonnffiigg file, as ssppeecc must include
     the serial number in the command strings sent to the controllers.  ssppeecc now
     displays the serial numbers read from the connected slit controllers that
     don't match serial numbers in the ssppeecc ccoonnffiigg file.  That should help in
     diagnosing serial number problems.  See the _x_i_a_h_s_c help file for complete
     information.

April 29, 2004 - RELEASE 5.05.02-6

CAN Configuration Now Includes Baud Rate
     The configuration for field bus controllers now includes a parameter for
     the baud rate.

New Support For CANnes PCI CAN Controller
     ssppeecc now supports the Trinamic CANnes PCI CAN bus controller as a field bus
     controller type.

Update For Kohzu SC-2/4/800 Controllers
     The support for the Kohzu SC-2/4/800 motor controllers has been revised to
     use the existing value of the controller's system setting 29, ""FFeeeeddbbaacckk
     TTyyppee"" which controls whether position-maintenance mode is used when
     encoders are present.  The previous ssppeecc version forced the parameter to
     zero.  You must restart ssppeecc or type rreeccoonnffiigg for ssppeecc to note a change in
     value made using the controller's front panel.  Also, by default, ssppeecc
     performs backlash as a separate move.  However, if optional ""GGeenneerriicc
     PPaarraammeetteerr 11"" is set and is nonzero, ssppeecc will configure the controller to
     use its built-in backlash-correction feature.  The built-in backlash
     correction appears slower than using a separate move, so ssppeecc does not
     automatically select the built-in feature.

April 26, 2004 - RELEASE 5.05.02-5

Fix For National Instruments PCII/A GPIB Controllers
     Problems with the support for the old National Instruments PCII and PCII/A
     nec7210-based GPIB controllers added in ssppeecc release 5.05.01-4 have been
     addressed.

April 20, 2004 - RELEASE 5.05.02-4

Motor Mnemonic Length Enforced In Configuration Editor
     The eeddccoonnff configuration editor will now prevent the entry of motor
     mnemonics longer than the maximum seven characters accepted by ssppeecc.

Fix For Using Multiple National Instruments 6601/6602 Cards
     A bug, which prevented using more than one National Instruments 6601/6602
     counter/timer PCI card, has been fixed.

Fix For Updated Limit Behavior Of Huber SMC 9000
     ssppeecc now recognizes the Huber SMC 9000 motor controller firmware update
     from November 2001 that changed the controller limit behavior.  The old
     firmware would disable remote control when a limit switch was hit.  The
     updated firmware allows the computer to move a motor after it hits a limit,
     but a new command is required to clear the limit status.  This ssppeecc update
     will send that command when appropriate.

March 31, 2004 - RELEASE 5.05.02-3

Maximum Number Of Controllers In eeddccoonnff Increased
     The number of motor and counter devices that can be configured on the
     DDevices screen of the eeddccoonnff configuration editor has been increased from
     24 to 40 for each.

Server/Client Enhancements For "Watched" Variables
     Several improvements associated with ""wwaattcchheedd"" variables set by the ssppeecc
     client pprroopp__wwaattcchh(()) function are included.  Previously, the ssppeecc client
     wouldn't poll for asynchronous events, including events associated with
     changes to watched variables, unless the client was configured to use ssppeecc
     server motors or counters.  That problem has been fixed.  Also, redundant
     calls by the client to register watched variables on the server have been
     eliminated.  Finally, the server will now stop sending events associated
     with a watched variable when all clients have unregistered the variable.

Fix For ANKA RST Generic Access
     A bug, where ssppeecc would crash if an aannkkaa__ppuutt(()) or an aannkkaa__ggeett(()) command
     were used when no ANKA RST motors or counters were configured, has been
     fixed.

Fix For Amptek MCA 8000/8000A
     An adjustment to a timing loop for the Amptek MCA 8000/8000A has been made
     to accommodate an even faster PC.

Fix For Setting DAC Motor Limits
     A rounding problem, where ssppeecc would generate an error message indicating
     the high limit was being reset every time a DAC motor was moved when the
     limit was set beyond the maximum, has been fixed.

Prompt Aesthetics Tuned
     The placement of newlines in the vicinity of the ssppeecc prompt has been
     reengineered to present a more consistent appearance when using the lliibbeeddiitt
     command-line editing library, particularly around ^^CC interrupts and when
     running in server mode.

March 22, 2004 - RELEASE 5.05.02-2

Update For Macro Hardware __ccoonnffiigg Routines
     If the macro hardware __ccoonnffiigg(()) function explicitly sets an error return
     (by returning the string ""..eerrrroorr..""), ssppeecc will now mark the associated
     macro hardware controller (for the ""ccttrrll"" key) or motor or scaler channel
     (for the ""mmoott"" or ""ccnntt"" keys) as unresponsive.  If the controller is
     unresponsive, all associated channels are considered unusable.  ssppeecc won't
     attempt to access such channels, although that can be changed when the
     __ccoonnffiigg(()) function is called on the next rreeccoonnffiigg.

Fix For Obscure uunngglloobbaall and sshhaarreedd Bug
     Improvements in the behavior of the uunngglloobbaall command in ssppeecc release
     5.02.02 had the unintended consequence of undoing the global scope of an
     array with the same name subsequently declared as sshhaarreedd in the same
     statement block.  Now, a shared array will always have global scope.

New gglloobbaall aarrrraayy Syntax
     It is now possible to preface a data array declaration with the gglloobbaall
     keyword.  Array declarations in statement blocks default to global in any
     case, although, an uunngglloobbaall statement for the symbol within the same
     statement block would force a subsequent aarrrraayy declaration to result in a
     local-scope array.  The explicit gglloobbaall declaration gets around that
     problem.

March 13, 2004 - RELEASE 5.05.02-1

New Facility For Field Bus Interfaces
     This ssppeecc release contains the first support for field-bus interfaces.
     Currently, only one field-bus (CAN) and one controller (MEN M51) are
     supported, although additional protocols and controllers are likely to be
     implemented in the future.  Support for generic user-level access and for
     built-in field-bus hardware is included.

     The user-level access to the field-bus is through the new ffbbuuss__ggeett(()) and
     ffbbuuss__ppuutt(()) functions.  The first argument to these function is the unit
     number of the intended field-bus controller, where unit numbers are
     assigned in the ccoonnffiigg file and currently run from zero to three.
     Currently only CAN bus is implemented, with the user-level functions
     currently behaving as follows.  (Additional functionality is likely to be
     added in later releases.)

     The ffbbuuss__ggeett(()) function can take an optional second argument, namely the
     string ""ppoollll"", which means to return immediately if no message is
     available.  The function normally returns an unsigned long data array
     containing eight elements, which are filled with as many CAN packet
     elements as were provided by the CAN device.  The data is returned from a
     first-in, first-out (FIFO) buffer of (currently) 100 elements.  If the
     buffer is overrun, older elements are lost.  If a global variable named
     HHDDWW__EERRRR exists, it will be assigned a value zero if there is no error and
     data is available, a value three (TIMEOUT) if there is a timeout and a
     value of four (NONFATAL) if there is no data available with the ""ppoollll""
     argument.

     The ffbbuuss__ppuutt(()) function can take up to nine arguments after the unit
     number, which are used to create the CAN packet that is sent out on the
     interface.  The second argument is the CAN identifier.  The remaining
     arguments are the packet data.

     The built-in CAN support for motor controllers and other devices will use
     the same input buffer as the user-level functions.  CSS recommends that CAN
     devices accessed through the above user-level functions be on a separate
     CAN interface from the devices supported by the built-in C code.

Support For MEN M51 Quadruple CAN Interface
     ssppeecc now supports the MEN Mikro Electronik GmbH M-Bus model M51 Quadruple
     CAN interface.  The device is selected in the new FIELD section of the
     IInterfaces screen of the configuration editor.  Each of the four CAN
     interfaces must be configured separately.  (The address of each channel is
     offset by an additional 0x40 from the base address of the MEN module.)

Support For Mclennan PM595 CAN Motor Controller
     ssppeecc now supports the Mclennan PM595 CAN-interfaced motor controller.
     Although the controller is based on the CANopen protocol, ssppeecc communicates
     with the device as a register-based CAN device, keeping the controller in
     the CANopen ""pprree--ooppeerraattiioonnaall"" state and using service data object (SDO)
     transfers exclusively.  The homing method can be set with the optional
     ""hhoommee__mmeetthhoodd"" motor parameter.

New Rotary/Linear Optional Motor Parameter
     A new ""rroottaarryy"" optional motor parameter is available on the second optional
     parameter screen of the configuration editor and as an argument to the
     mmoottoorr__ppaarr(()) function.  The parameter is so far used in the support for just
     one motor controller (MicroMo MVP-2001, see below).  A nonzero value
     indicates a rotary stage.

Home Search Implemented For MVP-2001
     The home search facility is now implemented for the MicroMo MVP-2001 motor
     controller.  So far, these controllers have only appeared in ssppeecc
     applications in stages supplied by National Aperture, so the programming is
     geared for that hardware.  The home search only functions for the rotary
     stages, and the optional motor parameter ""rroottaarryy"" should be set to indicate
     a rotary stage is being used.  For the rotary stages, limits are disabled,
     but home searches are allowed.  For the linear stages, limits are enabled,
     but home searches are not possible.

More Fixes For lliibbeeddiitt With ssppeecc Server
     A problem with the lliibbeeddiitt rreeaaddlliinnee-compatibility code dealing with setting
     the tty modes after the ssppeecc server receives an asynchronous signal from a
     client (generated by the client when aborting moving or counting, for
     example), has been fixed.  The fix has not yet been submitted to the
     official lliibbeeddiitt maintainers, as it is currently somewhat of a hack.
     However, the fix meets all the needs of ssppeecc.

March 8, 2004 - RELEASE 5.05.01-8

Fix To Accommodate TANGO Threads
     Additional code has been added to accommodate linking ssppeecc with TANGO, a
     threaded object-oriented alternative to TACO, both of which are distributed
     computing environments developed at the ESRF.

March 2, 2004 - RELEASE 5.05.01-7

Plot Macros Now Automatically Grow Data Array
     The standard plot macros will now automatically resize the SSCCAANN__DD data
     array by increasing the number of rows by 1,024 if the number of points in
     a scan becomes greater than the number of rows currently available.  The
     initial default size for SSCCAANN__DD is 4,096 rows.

New sseettssccaannss Option For Configuring Data File Contents
     A new option is available in the sseettssccaannss macro to have all the
     geometry-related motor positions saved at each point in the data file for
     regular, mesh, arc and radial HKL scans.  Assigning a non-zero value to the
     new standard global variable __ssaavv__ggeeoo__mmoott accomplishes the same thing.  See
     the _s_e_t_s_c_a_n_s help file for more information.

Bug Fix For Misconfigured EPICS PV Scalers
     A bug, where ssppeecc would crash if EPICS process variable (PV) scalers were
     assigned channel numbers beyond the maximum configured, has been fixed.

February 26, 2004 - RELEASE 5.05.01-6

Update For ILL-2D Detector Support
     A new LLiinnuuxx kernel driver to support a 24-bit digital I/O PCI card
     interface to the 2D detector electronics (ESRF model N110 TDC) used with
     some neutron detectors at ILL is included in this ssppeecc release.  See the
     _I_L_L___2_d help file for more information.

February 23, 2004 - RELEASE 5.05.01-5

New wwaaiitt(()) Options For Asynchronous Connections
     It is now possible to wait until remote motors become fully connected and
     usable.  (Currently, the only such motors are accessed via EPICS and the
     ssppeecc server interfaces.)  Bit 3 in the argument to wwaaiitt(()) that checks if
     rreemmoottee__aassyynncc(()) replies have all arrived will now also include checks on
     connections to ssppeecc servers and ssppeecc server and EPICS motors.  See the
     updated _w_a_i_t help file for more information.

Fixes For lliibbeeddiitt With ssppeecc Server
     A flaw in the lliibbeeddiitt rreeaaddlliinnee-compatibility functions that produced extra
     prompt strings and left the terminal interface in the wrong mode after
     receiving remote commands from clients has been fixed.

Code For Tsuji CT16-01B Updated
     ssppeecc code for the Tsuji CT16-01B counter/timer has been updated for the
     device's version 1.31 firmware.

New Focus 8752 Picomotor Controllers Supported
     ssppeecc now supports the New Focus Model 8752 Intelligent Picomotor Ethernet
     controller in addition to the Model 8750 Intelligent Picomotor Network
     controller (using a serial interface), both to control the Model 8753
     Picomotor Drivers.

February 18, 2004 - RELEASE 5.05.01-4

GPIB Sharing Recently Broken, Now Fixed
     Modifications made for ssppeecc release 5.05.01 inadvertently disabled the
     feature to share control of GPIB controllers among multiple instances of
     ssppeecc.  The ability to share GPIB controllers is now restored.

Direct Support Added For National Instruments PCII/A GPIB Controllers
     ssppeecc now includes initial support for the old National Instruments PCII and
     PCII/A nec7210-based GPIB controllers using direct register access.  No
     kernel-level driver is used.

February 17, 2004 - RELEASE 5.05.01-3

New ""hhoommee__mmeetthhoodd"" Optional Motor Parameter
     A new ""hhoommee__mmeetthhoodd"" motor parameter is available on the first optional
     parameter screen of the configuration editor and as an argument to the
     mmoottoorr__ppaarr(()) function.  It is intended that this parameter will be used in a
     device-dependent manner to specify how to perform a home search.  For some
     motor controllers that have a long list of numbered methods (the Kohzu
     SC-2/4/800, for example), this parameter will select one of those methods.
     For other motor controllers, this parameter may contain a command string to
     send to the controller to perform a home search (such as the Phytron IXE).
     For many motor controllers, this parameter will not be used.

Phytron Support Updated For OMC/TMC Models and Home Method
     ssppeecc now includes support for the OMC/TMC Phytron motor controller models.
     Although there is a new entry to specify the Phytron OMC/TMC on the DDevices
     screen of the configuration editor, the controller type on the MMotor screen
     should be selected as IIXXEE.  In addition, the new ""hhoommee__mmeetthhoodd"" parameter
     can be used to specify the home-search string, rather than the first
     generic parameter (although that parameter will still be examined if
     ""hhoommee__mmeetthhoodd"" is not set).

Support For Kohzu SC-2/4/800 Motor Controllers
     Initial support for the Kohzu SC-200, SC-400 and SC-800 motor controllers
     over RS-232C and GPIB interfaces is included in this ssppeecc release.

Support For MicroMo MVP-2001 Motor Controller
     Initial support for the MicroMo MVP-2001 motor controllers (also branded as
     MicroMini by National Aperture) is included in this ssppeecc release.

Support For Physik Instrumente Model E710 Picomotor Controller
     Initial support for the Physik Instrumente Model E710 picomotor controllers
     over RS-232C and GPIB interfaces is included in this ssppeecc release.

Byte Swapping Fix For ESRF Sensicam Support
     ssppeecc now returns image data in the correct byte order on little-endian
     platforms (such as PCs) when reading data from the Sensicam CCD camera
     using the ESRF TACO device server.

February 3, 2004 - RELEASE 5.05.01-2

Fix For New Focus 8750/53 Support
     The recent modifications for the New Focus 8750/8753 picomotor controller
     in ssppeecc release 5.04.04-10 inadvertently caused the motor channel numbering
     to be off by one.  That problem has been fixed.  Also the new
     unit/module/channel motor configuration is now implemented for this
     controller.

February 2, 2004 - RELEASE 5.05.01-1

Fix For Saving Pseudomotor Positions
     A minor problem associated with pseudomotor positions has been fixed.
     Previously, the positions associated with calculational pseudomotors could
     be written to the sseettttiinnggss file incorrectly as zero immediately after
     executing a rreeccoonnffiigg command.  If ssppeecc was quit before motor positions were
     recalculated, the zeroes would remain in the sseettttiinnggss file, although the
     positions would be recalculated and saved in the sseettttiinnggss file correctly
     the next time ssppeecc needed them.

Fix For Serial Devices In Simulate Mode
     A minor problem, where if ssppeecc was started in simulate mode the sseerr__ggeett(())
     and sseerr__ppuutt(()) functions would generate errors, has been fixed.  The errors
     did not occur if simulate mode was turned on after ssppeecc was started
     normally.

January 18, 2004 - RELEASE 5.05.01

Somewhat Revised Installation Procedure
     The ssppeecc IInnssttaallll script no longer prompts for a system type - the system
     will be determined automatically.  The platform types currently recognized
     (as seen in the return value of the standard uunnaammee utility) are LLiinnuuxx
     (x86), SSuunnOOSS (Solaris 2), HHPP--UUXX (hp700) and DDaarrwwiinn (Mac OS X).  (Support
     for OS X is still experimental.)  Previously, the system type also included
     a prefix to indicate whether EPICS (eeppiiccss__) or TACO (eessrrff__) support was to
     be linked.  The choice of linking with TACO, TANGO or EPICS will now be
     made based on whether the new ttaaccoo__hhoommee, ttaannggoo__hhoommee or eeppiiccss__hhoommee
     parameters are set in the iinnssttaallll__ddaattaa file.

New Option To IInnssttaallll
     A new --ff ffiillee option to the ssppeecc IInnssttaallll script allows specification of a
     file for the default parameters other than the default file iinnssttaallll__ddaattaa in
     the current directory.

Enhancements For Command-Line Editing
     The optional capability to link ssppeecc with command-line editing libraries
     has been updated and enhanced.  Previously, the ssppeecc installation could be
     configured to link with a version 2.0 release of the GNU readline library.
     Now ssppeecc may be linked (at the user's option) with all current and previous
     releases of readline, namely versions 2.0, 2.1, 2.2, 2.2.1, 4.0, 4.1, 4.2,
     4.2a and 4.3.

     CSS no longer aggregates a readline distribution with the ssppeecc
     distribution, since the readline library is now included with most modern
     LLiinnuuxx distributions and, in any case, can be easily retrieved (from
     _f_t_p_:_/_/_f_t_p_._g_n_u_._o_r_g_/_g_n_u_/_r_e_a_d_l_i_n_e_/) and readily installed on any platform
     supported by ssppeecc.

     Also, an alternative command-line editing package is included with the ssppeecc
     distribution, namely the NetBSD libedit library.  While the readline
     library code is from the bbaasshh shell, the libedit library is rooted in the
     ttccsshh shell.  Although most command-line editing and history-recall features
     are identical in readline and libedit, there are some small differences
     which may lead users to prefer one over the other.  Either or neither can
     be used with ssppeecc.  The choice is made at installation time based on an
     option selected when running ssppeecc's IInnssttaallll script.  The default choice is
     lliibbeeddiitt, since that library is included with the ssppeecc distribution.

Support For EPICS 3.14
     ssppeecc now supports EPICS release 3.14.  The current ssppeecc distribution
     includes support for both EPICS 3.13 and 3.14, although only one or the
     other can be linked with at a time.  The path given as the ""EEPPIICCSS lliibbrraarryy
     ddiirreeccttoorryy"" to the IInnssttaallll program (saved as the eeppiiccss__hhoommee option in the
     iinnssttaallll__ddaattaa file) is examined to see whether it contains contains an EPICS
     3.13 or 3.14 distribution, and ssppeecc links with the appropriate ssppeecc and
     EPICS libraries.  The EPICS library directory parameter should be set to
     path name at the top of the standard EPICS distribution hierarchy, that is,
     the path should be a directory that contains a subdirectory named bbaassee.

changes                      spec 5.04 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 5.04

January 21, 2004 - RELEASE 5.04.04-10

Workaround For New Focus 8750/53 Firmware Bug
     A workaround for a bug in the recent firmware for the New Focus 8750/53
     motor controllers that prevented the existing ssppeecc code from working with
     these controllers is included in this ssppeecc release.  Motor controller
     firmware release 1.0.13 did not have the bug.  Firmware releases 1.3.1 and
     1.5.3 are known to have the bug, and ssppeecc assumes all releases in between
     do, too.

January 15, 2004 - RELEASE 5.04.04-9

Fix For New Unit/Module/Channel Motor Numbering
     The optional module numbering for motors that was introduced in release
     5.04.03-2 didn't allow motors to have the same unit and channel numbers but
     different module (crate) numbers.  That problem is now fixed.

uunniixx(()) Will Strip Initial Null Bytes From Output
     When the uunniixx(()) function is used to assign the output from the command
     given by the first argument into the string variable given by the second
     argument, initial null bytes in the command output will now be stripped
     away.

Support For MEN M97 Counter/Timer Modules
     ssppeecc now supports the MEN Mikro Electronik GmbH M-Bus model M97
     timer/counters.  The current support is based on the M97 module being
     installed in an MEN A201S 6U VMEbus Carrier Board.

January 12, 2004 - RELEASE 5.04.04-8

Support For MEN M8 VME To GPIB Controller
     ssppeecc now supports the MEN Mikro Electronik GmbH M-Bus model M8 GPIB
     controller.  The current support is based on the M8 module being installed
     in an MEN A201S 6U VMEbus Carrier Board.  Multiple M8 controllers can be
     used.

January 9, 2004 - RELEASE 5.04.04-7

Update For Struck SIS3820 Multi-Channel Scaler Update
     ssppeecc now works with updated firmware version 1.02 for the Struck SIS3820
     multichannel scaler.  These updated modules now have all the functionality
     required to use them as a timer/counters with ssppeecc.  Firmware 1.01 is no
     longer supported.  ssppeecc now automatically routes the internal 50 MHz time
     base to channel zero, if that channel is configured as the time base.
     Also, ssppeecc now keeps track of unlimited overflows in all channels and will
     restart the timer as necessary to accommodate arbitrarily long count times,
     whether counting to time or to monitor counts.

More Robust Code For Tsuji PM16C Over Ethernet
     ssppeecc now includes code to retry read commands when using the Tsuji PM16C
     motor controllers over the Ethernet interface.  ssppeecc will resend commands
     to read values up to four times if there are timeouts when waiting for a
     response from the motor controller.  In addition the Ethernet timeout value
     has been reduced from five to two seconds.  The reason for the change is
     due to reported timeouts when the controller is used on a busy network.

Another Fix For Mclennan PM608 Motor Controllers
     A bug, where the Mclennan PM608 motor positions were not tested for
     synchronization with positions stored on the computer, has been fixed.
     (The fix in release 5.04.04-2 was not completely effective.)

January 7, 2004 - RELEASE 5.04.04-6

Fix For Recently Introduced CAMAC SMC Bug
     A bug (introduced in release 5.02.02-7 and associated with changes made to
     accommodate server mode), that caused bogus motor positions to be returned
     for the CAMAC Joerger SMC motor controllers when used without associated
     counters, has been fixed.

January 7, 2004 - RELEASE 5.04.04-5

Real Fix For Catching Signals In Server Mode
     A bug in server mode only, where ssppeecc inappropriately blocked several
     signals (including the hang-up signal generated when a window running ssppeecc
     is closed), and which was reported to be fixed in release 5.04.04-2, but
     wasn't, is now really fixed.

January 6, 2004 - RELEASE 5.04.04-4

Fix For Struck SIS1100/3100 VME Controller
     A bug, where ssppeecc would crash after repeated rreeccoonnffiigg commands with the
     message ""NNoo mmoorree rroooomm ffoorr VVMMEE mmeemmoorryy mmaappss"" when using the Struck
     SIS1100/3100 VME Controller, has been fixed.

January 5, 2004 - RELEASE 5.04.04-3

""ppggmm"" Format Now Accepts 16-Bit Data
     The ""ppggmm"" file format for the ffmmtt__wwrriittee(()) and ffmmtt__rreeaadd(()) functions now
     supports 16-bit data, in addition to the existing support for 8-bit data.

Update to PC-DIG Frame Grabber Support
     The support for the Coreco Imaging (formerly ITI) PC-DIG frame grabber has
     been revised.  It is no longer necessary to configure a camera type in the
     AADDDDRR field of the configuration editor.  ssppeecc will now obtain the needed
     configuration parameters from the initialized iittiiffgg driver module.

January 4, 2004 - RELEASE 5.04.04-2

Fix For Catching Signals In Server Mode
     A bug in server mode only, where ssppeecc inappropriately blocked several
     signals (including the hang-up signal generated when a window running ssppeecc
     is closed), has been fixed.

Language Dependence Removed For External Shared Arrays On LLiinnuuxx
     ssppeecc now uses a different method for finding available existing shared
     arrays (needed for the eexxtteerrnn sshhaarreedd usage) that doesn't depend on the
     locale-dependent output of the iippccss command.  The new method is only
     available on LLiinnuuxx platforms, however.

     When using utilities built with prior versions of the ssppss shared-array
     library or when running on non-LLiinnuuxx platforms, the language locale can be
     set to English for a single command as follows:

        sshheellll>> LLAANNGG==eenn oonnzzee &&

     The above starts the oonnzzee 2D-image display utility as a background process
     with the LLAANNGG environment variable set to English.

Homing Implemented For IMS MDrive Motor Controllers
     ssppeecc now implements home searches for the IMS MDrive motor controllers.
     ssppeecc uses MDrive input pin three as the default home input.

Support For Tsuji CT16-01B Counter/Timer
     ssppeecc now supports the Tsuji Electronics Model CT16-01B 16-channel
     counter/timer over GPIB and RS-232C interfaces.

Support For Hasylab MCA 8701 VME Module
     ssppeecc now supports the Hasylab home-grown VME MCA known as model 8701.

Fix For Mclennan PM608 Motor Controllers
     A bug, where only the first channel of each Mclennan PM608 motor controller
     was tested for synchronization with positions stored on the computer, has
     been fixed.

Fix For Amptek Pocket MCA
     ssppeecc now automatically disables the security locking feature of the Amptek
     ""PPoocckkeett"" MCA 8000/8000A on startup.  Otherwise, if the security locking had
     been turned on elsewhere, ssppeecc would be unable to modify the device
     parameters or control the device.

November 20, 2003 - RELEASE 5.04.04-1

Tilde Expansion Now A Built-In Feature
     The tilde expansion feature for path names, where ~~ is expanded to the ssppeecc
     user's home directory path, and ~~nnaammee is expanded into nnaammee's home
     directory path, is now included in the base ssppeecc code.  Previously, the
     feature was only available when an optional command-line editing package
     (such as GNU readline) was linked in.

Increased Maximum Number of Motors
     A ssppeecc installation (at ESRF) has finally run up against the compiled-in
     limit of 160 motors.  To accommodate them, the maximum number of motors has
     been increased to 200.  (The next time the limit is reached, the ssppeecc code
     will be modified to allow an unlimited number of motors.)

New mmoottoorr__ppaarr((""mmoodduullee"")) Option
     A new ""mmoodduullee"" option to the mmoottoorr__ppaarr(()) function returns the configured
     module number of a motor.  Optional module numbers were introduced into the
     motor configuration in ssppeecc release 5.04.03-2.

New Home-Position Optional Motor Parameter
     A new parameter is available on the first optional motor-parameter
     configuration screen to configure the home position (in dial units) of the
     motor.  ssppeecc will use this parameter, if set, to assign the dial position
     automatically on home searches.  Motor controllers that currently have this
     feature implemented are the OMS models, the Newport MM4000/5/6 models, the
     Mclennan PM600/8 models and the ANKA Gamma RST driver.  The parameter is
     accessible via the ""hhoommee__ppoossiittiioonn"" option to the mmoottoorr__ppaarr(()) function.  If
     the home-position argument is given to the standard hhoommee macro or in the
     cchhgg__ddiiaall(()) function, that value will take precedence over the value in the
     ccoonnffiigg file.

Fix For Tsuji PM16C Ethernet Interface
     A timing issue with the Tsuji PMC16C motor controllers when used with the
     Ethernet interface, where the controller wouldn't respond quickly enough
     between closing and opening the connection (as occurs during rreeccoonnffiigg) has
     been accommodated by inserting a small delay in the ssppeecc code before the
     connection is reopened.

Updates To Mclennan Motor Support
     A number of updates to the Mclennan motor controller have been made,
     including the following: The PM608 model, which is a multiplexed version of
     the PM600, is now supported.  Home searches are now implemented for the
     PM600 series.  Also, the ssppeecc code should now work in both ""qquuiieett"" and
     ""vveerrbboossee"" modes (as set by configuration switches on the motor controller).
     Finally, the new unit/module/channel configuration can be used for the
     multiplexed PM381 and PM608 motors, where the module number corresponds to
     the controller address.

Updates To IMS MDrive Motor Support
     New ssppeecc code addresses the latest non-backwards compatible firmware
     (version 1.043) from IMS for their MDrive motor controllers.  Also, the
     commands for doing home and limit searches with the MDrive controllers are
     now included in this ssppeecc release.  Finally, the error messages returned by
     the controller when ssppeecc attempts to set already configured input switches
     to the convention for limit assignments (switch 1 for plus limit, switch 2
     for negative limit) are suppressed.  ssppeecc sends the commands to ensure the
     limit switches are available, although the software will still detect
     limits if the switches have already been programmed to another convention.

Data Group Fix
     An old bug that affected use of data groups in the functions ddaattaa__dduummpp(()),
     ddaattaa__ffiitt(()), ddaattaa__pplloott(()) and ddaattaa__ppiippee(()), where ssppeecc could experience a
     segmentation fault if the starting point argument was greater than zero,
     has been fixed.

Bug Fix For cchheellpp Utility On OSX
     A bug, where ssppeecc's stand-alone help formating utility, cchheellpp,
     inappropriately ran in interactive mode on Mac OSX platforms when its
     output had been redirected through through a pipe, has been fixed.

Fix For ANKA RST Gamma Simulate Mode
     Missing checks on whether ssppeecc was operating in simulate mode in calls of
     the aannkkaa__ppaarr(()) function have been added.

Fix For Detecting ESRF TACO Maxe Controller Failure
     ssppeecc now includes a check for for ESRF TACO Maxe controller failure.  If
     there are three consecutive failures of the ddeevv__ppuuttggeett(()) calls for a
     particular motor, ssppeecc will mark the motor channel as unusable.  The user
     must perform a rreeccoonnffiigg to reenable the motor (after fixing whatever caused
     the hardware failure).

ESRF Warning Message Restored
     A warning that motors did not reach the final position, which disappeared
     from ssppeecc when the Maxe support was modernized in release 5.02.03-4, has
     been restored.  Also, the warning can now appear for non-Maxe motors, but
     only for TACO-enabled ssppeecc installations.

October 26, 2003 - RELEASE 5.04.03-8

Bug Fix For rreeaadd__mmoottoorrss(()) Flags
     A bug, where setting bit 2 of the ffllaaggss argument to rreeaadd__mmoottoorrss(()) was
     supposed to indicate that position discrepancies should be resolved
     silently in favor of the hardware but didn't, has been fixed.

October 5, 2003 - RELEASE 5.04.03-7

Fix For Nested eevvaall(()) Calls With Macro Functions
     A bug, where the return values of macro functions in nested calls of eevvaall(())
     were sometimes lost, has been fixed.  This bug was discovered when a macro
     hardware __ppaarr(()) function was called from inside a macro hardware __ccmmdd(())
     function.

Improved Error Handling When Opening Socket Connections
     ssppeecc now uses a more sophisticated technique for opening socket
     connections.  Previously, if a host specified by IP address was
     unreachable, the internal ccoonnnneecctt(()) call would hang until interrupted with
     a ^^CC.  The new algorithm will time out after a default interval (currently
     four seconds) if the host cannot be reached.

Improved Testing Of Connections To ssppeecc Server
     When a ssppeecc client opens a connection to a ssppeecc server on startup or on a
     rreeccoonnffiigg, errors such as an unresolvable host name or an unreachable host
     will now generally produce an immediate error message, with no more
     attempts made to connect to that server until the next rreeccoonnffiigg.  If the
     host is up and reachable, but there is no ssppeecc server available at the
     designated port, the ssppeecc client will keep trying, as in previous versions.
     However, now a warning message will be printed on the first try.

Fix For Crash in ssppeecc Clients When One Server Platform Was Down
     A bug that could result in a crash during hardware initialization when a
     ssppeecc client was configured for ssppeecc servers on multiple platforms where the
     computer running one of the servers was down has been fixed.

Another Motor Position Rounding Fix
     The fixes in releases 5.02.03-5 and 5.03.01-3 that dealt with an obscure
     rounding bug and then with the unintended consequences of the first fix
     require one more fix.  Now, motor positions near zero can again be set as
     small as the step size, even if the step size is less than 1e-10.

Fix For a Particular Am9513 Counter/Timer
     Although ssppeecc doesn't officially support the Measurement Computing PCI
     CTR-05/10 Am9513 compatible counter/timer modules (because they contain a
     flaw which prevents counting to monitor to work), the cards can still be
     used with ssppeecc for counting to time.  For the CTR-10 model that contains
     two counter chips, ssppeecc now probes the correct addresses for the second
     counter chip.  Previously, the registers associated with the digital I/O
     were probed, which would disturb the contents of those registers.

Modifications Related To Command-Line Editing Link Options
     Internal names in ssppeecc that conflict with names used in some optional
     third-party external command-line editing packages have been changed to
     remove the conflicts.  Also, ssppeecc's built-in command-line history has been
     updated to handle automatic hardware polling during typing.

September 24, 2003 - RELEASE 5.04.03-6

New ccoouunntteerr__ppaarr(()) Option
     The command ccoouunntteerr__ppaarr((mmnnee,, ""mmoonniittoorr??""))  returns nonzero if the hardware
     counter channel associated with mmnnee can be assigned as the monitor preset
     channel using the command ccoouunntteerr((mmnnee,, ""mmoonniittoorr"")).  Currently,
     counter/timers with such a capability are the Kinetic Systems 3640 (CAMAC),
     the Joerger VSC16/8 (VME), the Struck SIS3820 (VME), the National
     Instruments 6601/2 (PCI), the MURR device (GPIB) and the EPICS scaler
     record.

Updated ccoouunntteerrss Macro
     The ccoouunntteerrss macro, used to assign the channels associated with the main
     detector counter and the monitor counter, will now use the ccoouunntteerr__ppaarr(())
     function to change the counter hardware monitor assignment for hardware
     that supports monitor channel assignment via software.

Support For Munich BR-tronik IPS Motor Controller
     ssppeecc now includes support for a motor controller called the BR-tronik IPS,
     designed, built and used at LMU Munich.

September 4, 2003 - RELEASE 5.04.03-5

Motor Offset Rounding Bug Revisited
     The fix of an obscure motor rounding bug in ssppeecc release 5.02.03-5 created
     another bug that was partially fixed in release 5.03.01-3, but not
     entirely.  The bug would, under certain circumstances, cause nonzero user
     angles with nonzero offsets to print with decimal parts on the order of
     1e-9 and angles at zero to print with decimal parts on the order of 1e-16.
     This release should complete the fix begun in the 5.03.01-3 release,

Support For SBS Model 946 Version 2 Driver on Sun
     The SBS 946 version 2 driver for Sun platforms for the SBS model 61x/62x
     VME controllers is now supported.

September 1, 2003 - RELEASE 5.04.03-4

Portability Issues Addressed
     Several code changes were needed to allow ssppeecc to compile using gcc version
     3.3.  Also, problems with state- and settings-file locking over NFS have
     been addressed.

August 27, 2003 - RELEASE 5.04.03-3

New rreemmoottee__ssttaatt(()) Client Function
     A new rreemmoottee__ssttaatt(()) function is available on the ssppeecc client to check
     whether a particular server is currently connected.  See the _s_e_r_v_e_r help
     file for additional information.

New ssttaattuuss//rreeaaddyy Server Property
     A new ""ssttaattuuss//rreeaaddyy"" property is available on the ssppeecc server that will
     return a value that indicates whether the server is ready to execute the
     next client command.  See the _s_e_r_v_e_r help file for additional information.

Bug Fix For Watched Variables in Server
     A bug introduced just before the server/client code was put into the
     official release, where ""wwaattcchheedd"" variables became unregistered in the
     server the first time they were modified, has been fixed.

Improved Hex Dump For Socket Debugging
     The optional hexadecimal debug format for socket I/O (selected with DDEEBBUUGG
     bits 0x400040) will now also show offsets and printable ASCII
     representations of the data, along the lines of conventional hex-dump
     utilities.

sshhooww__ssttaattee Utility Checks New Checksum
     The sshhooww__ssttaattee utility, available to display the contents of a user's state
     file, will now also do a test on the state-file checksum that was
     introduced in the previous ssppeecc release.

Improved Error Messages On Array Allocation Failure
     ssppeecc will now print the name and requested dimensions of arrays that are
     too big for the memory allocation calls.

Initial Support For Struck SIS3820 Scalers
     ssppeecc now includes support for the Struck SIS3820 multichannel scaler (MCS)
     VME module.  The initial support only covers use of the device as regular
     preset counters (of which there are 32 channels).  MCS support will come
     later.  The current SIS3820 firmware does not allow the counters to be read
     back while counting, but that feature is expected to become available in a
     forthcoming SIS3820 firmware update.

Support For Compumotor OEM750 Motor Controllers
     The code that supports the Compumotor AX motor controller has been modified
     to allow it also to work with the Compumotor models OEM750, OEM650, OEM350
     and OEM010 motor controllers.  Select CCMMAAXX as the controller type and
     ""CCoommppuummoottoorr AAXX ((SSeerriiaall))"" as the device type for all such motors.

August 18, 2003 - RELEASE 5.04.03-2

Server/Client Updates
     A number of updates are included for the new server/client features
     introduced in release 5.04.03:

     +o Server port number assignment is now flexible.  A server can be assigned
       a single port number, a range of port numbers or left to use a built-in
       default port number range (6510-6530).  The ssppeecc invocation argument
       syntax for server mode has changed to reflect the new options.

     +o New hheelllloo commands are available for clients to discover servers.

     +o ssppeecc clients can specify a server on a particular host by either a port
       number or by a ssppeecc process name.

     +o A better job is done reestablishing input stream alignment on both server
       and client in the event nonconforming data is received.

     +o Improvements have been made to the locking among threads in the server,
       fixing some race conditions.

     +o The handling of associative arrays when passed to and from the server
       works better.

     +o Problems with byte swapping (when needed) in the server are fixed.

       See the revised _s_e_r_v_e_r help file for further information.

New Optional Module Number For Motor Unit/Channel
     To accommodate motor controllers that require more than two parameters
     (unit and channel) to specify motors, the eeddccoonnff configuration editor now
     allows either two or three slash-separated numbers.  If three numbers are
     given, the first is unit, the last is channel and the middle is the new
     parameter, which ssppeecc will refer to as module number.  The motor
     controllers in ssppeecc that currently require a module (or crate or rack or
     sub-unit) number (ACS SPI-8, DCX serial, ECB in multiplexed mode, Mclennan
     PM381, New Focus 8732/8750/8753 and XIA HSC) still use the overloaded
     channel number to pass the information, but will be modified to recognize
     the new module number feature in future releases.

Argument Change For Macro Hardware __ccoonnffiigg(()) Macros
     The arguments for the macro hardware __ccoonnffiigg(()) macros, when called for the
     individual motor and counter channels, have been changed to accommodate the
     new mmoodduullee number option.  The calling sequence is now pprreeffiixx__ccoonnffiigg((mmnnee,,
     ttyyppee,, uunniitt,, mmoodduullee,, cchhaann)).  See the _m_a_c___h_d_w help file for details.

Fix For eeddccoonnff Default VME Addresses
     The hardware configuration editor eeddccoonnff now correctly shows the default
     address when VME modules are selected on the DDevices screen.

Fixes For Socket-To-Serial Support
     The socket-to-serial support in ssppeecc, which allows any supported serial
     device to be used via compatible Ethernet-to-serial adapters, was missing
     some internal code which could prevent certain motor controllers
     (Compumotor AX and 3000, MAC Science MXC, Mclennan PM301, Newport
     MM2000/3000 in daisy-chain mode, PMC DCX-100, Rigaku RINT-2000 and XIA HSC)
     from working properly in socket-to-serial mode.  The missing code has been
     added.

Improved Detection of Corrupted State Files
     This ssppeecc release attempts to do a better job of detecting corrupted user
     state files, automatically doing a fresh start rather than crashing or
     quitting with an error message.  The state file is now written out with a
     checksum, which will be recalculated and compared before the file is used
     to restore the state.  Also, additional checks are done on the sanity of
     parameters as the file is read.  State files from prior ssppeecc releases will
     still be recognized, but state files saved with this version will not be
     usable by older ssppeecc releases.

pprrddeeff Source-File Comment Fixed
     An old bug, where the comment printed by pprrddeeff to show the source file for
     the macro incorrectly eliminated embedded //....// strings, has been fixed.
     Unnecessary ..//, //..//, and //....// are still eliminated and SSPPEECCDD is still
     substituted for the path of the ssppeecc auxiliary file directory, but all
     should now be done correctly.

Help Formatter Bug Fix
     A bug introduced in ssppeecc release 5.01.03, where the help formatter would
     break lines containing highlighted text before they were full, has been
     fixed.

New ssuuvv Geometry for ESRF D32 Beamline
     The initial adaptation in ssppeecc of a geometry called ssuuvv is included for the
     surface ultrahigh vacuum instrument at the ESRF D32 beamline.

July 22, 2003 - RELEASE 5.04.03-1

New Encoder Option for Mclennan PM600
     If the PPMM660000__EE controller type is selected in the ccoonnffiigg file for the
     Mclennan PM600 motor controller, ssppeecc will read the encoder position rather
     than the commanded position from the controller.

July 20, 2003 - RELEASE 5.04.03

New Server/Client Feature
     The ssppeecc server/client features, long in development, are now included with
     the standard ssppeecc release.  See the _s_e_r_v_e_r help file for details on the
     implementation.  Although the server/client features work well in many
     situations, there are probably still flaws that need further development to
     correct.  Please start gently with the current release.  Keep CSS appraised
     of any anomalies noticed or features that seem lacking.

changes                      spec 5.03 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 5.03

July 17, 2003 - RELEASE 5.03.02-1

Bug Fix For IMS MDrive Motor Numbering
     A bug in motor numbering for the IMS MDrive motors in party-line mode has
     been fixed.  The correspondence between ssppeecc ccoonnffiigg file motor channel
     numbers and physical motor address was intended to be channels 1, 2, ...,
     9, 10, 11, 12, ... correspond to physical motor addresses 1, 2, ..., 9, A,
     B, C, ...  The bug was that addresses for channels 10 and above were
     shifted by one, so that channel 10 corresponded to address B, etc.  The bug
     has been fixed, and the channel numbering is now as intended.  Sites that
     have configured MDrive motor channels 10 and above should edit the ccoonnffiigg
     file by hand or via the eeddccoonnff configuration editor and add one to those
     MDrive motor channels before running this new ssppeecc release.

July 3, 2003 - RELEASE 5.03.02

New File Argument Available for aarrrraayy__dduummpp(()) and ddaattaa__dduummpp(())
     An optional initial argument to the aarrrraayy__dduummpp(()) and ddaattaa__dduummpp(()) functions
     can now be used to specify an output file, which makes it unnecessary to
     use the oonn(()) and ooffff(()) functions or related macros when writing arrays (or
     data groups) to a file.

aarrrraayy__rreeaadd(()) Now Respects Array WWiissee-ness
     The aarrrraayy__rreeaadd(()) function will now assign values read from a file by rows
     or by columns, depending on whether the array argument is a row-wise or
     column-wise array.  Previously, aarrrraayy__rreeaadd(()) would only assign by rows.
     See the _a_r_r_a_y_s help file for more information.

""aauuttoo__cclleeaarr"" Implemented For Additional MCAs
     The ""aauuttoo__cclleeaarr"" option to mmccaa__ppaarr(()), which instructs ssppeecc to clear the MCA
     prior to starting, is now implemented for additional MCA models.  The MCA
     devices for which ""aauuttoo__cclleeaarr"" is newly implemented are the Nucleus PCA II,
     PCA-3, Multiport and Microfast; Fast Comtec MCD; MBraun PSD-50M; Silena
     7328 and 7329; Roentec XFlash MAX; Labo 2400; the EPICS MCA record and the
     TACO (ESRF) MCA device server.  Local macros that explicitly clear the MCA
     before each run should be revised to eliminate the extra overhead of
     clearing the device twice.  Devices for which the auto-clear mode had
     already been implemented are the XIA DXP, Ortec Trump MCA (ISA and PCI) and
     MCS (PCI), Seiko EG&G MCA 7700 and Amptek 8000 and 8000A.  Note, the
     ""aauuttoo__cclleeaarr"" mode is set at start up and after each hardware
     reconfiguration.

ww2211vv Geometry Update and Consolidation
     The ww2211vv geometry has been updated to include variations for the ESRF ID10B
     and ESRF D32 beamlines.  Also the geometry from ggeeoo__ggmmccii..cc has been folded
     into ggeeoo__ww2211vv..cc.  The geometry names ww2211vv, iidd1100bb, ggoonniioo and ggmmccii are
     recognized and select the different motor mnemonics and psuedomotors
     associated with each implementation of the otherwise similar goniometers.
     See the ggeeoo__ww2211vv..cc source file and the ww2211vv..ssrrcc macro file in the ssppeecc
     distribution for details.

Support For PMC DCX-PCI300 Motor Controller
     ssppeecc now supports the PMC model DCX-PCI300 motor controller, a PCI-bus
     motor controller card that can control up to eight motors.

Minor Newport MM4000/4005/4006 Update
     Possible loss of precision in communicating motor positions with the
     Newport MM4000/4005/4006 motor controllers has been addressed.  ssppeecc now
     uses nine-digit precision (previously it was six) when sending motor
     positions, and rounds (rather than truncating) the lowest order digit
     (after multiplying the user-units position by the configured step size)
     when reading positions.  It's not expected users will notice a difference.

June 12, 2003 - RELEASE 5.03.01-5

SCIPE Counters-Only Support
     The SCIPE detector device units can now be configured as either
     counter/timers or counters only, thus allowing multiple SCIPE servers to be
     included in the counter configuration.  (SSCCIIPPEE is a protocol for device
     control developed at the DND CAT at the Advanced Photon Source.)

June 4, 2003 - RELEASE 5.03.01-4

Improved Sleeping For Short Intervals
     The ssppeecc C code for sleep times less than ten milliseconds has been
     revised.  On most platforms where ssppeecc is used, the system calls that allow
     a process to sleep by releasing control of the processor have an effective
     resolution of ten milliseconds.  Previously, ssppeecc implemented sleeps for
     intervals smaller than 10 milliseconds only on LLiinnuuxx platforms using a
     user-level busy-wait loop.  The revised code still uses a busy-wait loop,
     but is a bit more accurate and is now available on all platforms, not just
     LLiinnuuxx.  Both user-level sleeps with the sslleeeepp(()) function and built-in
     sleeps, like those used while waiting for hardware to complete, use the new
     code.  Note, the default hardware poll interval, set with
     ssppeecc__ppaarr((""hhddww__ppoollll__iinntteerrvvaall"")), is ten milliseconds.  Because that is above
     the busy-wait threshold, the sleeps may take longer due to operating system
     latencies.  To minimize per-point dead time during scans (at the cost of
     increasing the CPU load imposed by ssppeecc), one can set the hardware poll
     interval to values less than the default ten milliseconds.

Use Of Calculational Pseudomotors Made More Robust
     For the calculational pseudomotors introduced in ssppeecc release 5.03.01, if
     the __ccaallcc(()) macro function called the built-in functions wwaaiitt(()) or
     rreeaadd__mmoottoorrss(()) either directly or indirectly through other macros, macro
     recursion would result.  It is inappropriate for the __ccaallcc(()) macro function
     to call those functions or any functions that cause hardware access.  Calls
     to wwaaiitt(()) or rreeaadd__mmoottoorrss(()) from the __ccaallcc(()) macro function are now blocked,
     and an error message will be printed when such calls are attempted.  See
     the _m_a_c___h_d_w help file for details.

Shared-Array Utility Code Now Included In the Distribution
     The file ssppss..cc is now included in the standard distribution.  The C code in
     that file provides functions for connecting to ssppeecc shared data arrays.
     See the code in that file and the ssppss__ddeebbuugg target in the mmaakkee..ddiisstt file
     for examples of how to use the interface.

Support for MEN M-41 VME Counter/Timer
     ssppeecc now supports the MEN Mikro Electronik GmbH M-Bus model M-41
     Counter/Timer.  The current support is based on the M-41 module being
     installed in an MEN A201S 6U VMEbus Carrier Board.  Only counting to time
     presets is supported for this hardware.  Also, if the scale factor for the
     time-base channel is set to 8e6 in the ccoonnffiigg file, ssppeecc will use the
     internal time base, which allows count times up to just over 2 seconds.
     For any other scale factor, ssppeecc will assume an external time base is
     provided with the scale factor indicating the rate.  Maximum count times
     are determined by how long it takes to overflow the 24-bit scaler with the
     given time base.

Update For Updated EPICS Motor Record With Encoders
     Changes in EPICS motor record release 4.5 required modifications in ssppeecc
     that affect use of EPICS motors with encoders.  Those modifications are
     included in this release.

Bug Fix For uunniixx(()) Function
     A bug, apparently introduced in release 5.01.02-9, where about twenty
     repeated calls of the uunniixx(()) function with two or more arguments inside a
     curly bracketed loop would result in the ""OOuutt ooff tteemmppoorraarryy cceellllss"" error
     message, has been fixed.

aarrrraayy__ffiitt(()) Reenabled
     An accidental disabling of the aarrrraayy__ffiitt(()) function in late 1996 has been
     reversed.

Bug Fix For Screw-Type ssiixxcc Geometry
     A bug, introduced in release 5.02.03-2, which broke use of the gamma
     pseudomotor for the screw-type six-circle configuration, has been fixed.

April 17, 2003 - RELEASE 5.03.01-3

EPICS and TACO ssppeecc Libraries Now Included With All Distributions
     The ssppeecc libraries needed for the EPICS and TACO environments (lliibbEEPPIICCSS..aa
     and lliibbEESSRRFF..aa, respectively) are now included with all ssppeecc distributions.

New ""iimmmmccaatt22"" Binary Output Format
     Another custom binary output format called ""iimmmmccaatt22"" is available for the
     ffmmtt__wwrriittee(()) function.  Although the details of the format may be of limited
     interest to general ssppeecc users, the method of implementing a custom output
     format as illustrated in the ffmmtt__iimmmmccaatt..cc source file may be of didactic
     value.

Recent Bug With Near-Zero Acceleration Fixed
     A bug, introduced in ssppeecc release 5.03.01, where an acceleration parameter
     set with mmoottoorr__ppaarr(()) to be between zero and one could result in a floating
     point fault and a core dump, has been fixed.

Follow Up Fix On Motor Position Rounding Bug
     The fix of an obscure motor rounding bug in ssppeecc release 5.02.03-5 had the
     unintended consequence of sometimes causing nonzero user angles with
     nonzero offsets to print with decimal parts on the order of 1e-9 and angles
     at zero to print with decimal parts on the order of 1e-16.  Those artifacts
     no longer appear.

April 6, 2003 - RELEASE 5.03.01-2

Fix For ffiillee__iinnffoo(()) Group Access Test
     Previously, when testing file read, write or execute access permissions,
     the ffiillee__iinnffoo(()) function compared only the group mode bits with the user's
     effective group ID, but did not examine the groups to which the user could
     belong, as configured in //eettcc//ggrroouupp.  The aacccceessss(()) system call is now used
     to check permissions rather than the mode bits, resulting in a more
     comprehensive group-access test.

Support For the National Instruments PCI 6601/6602 Counter/Timers
     The National Instruments PCI 6601/6602 counter/timers are now supported by
     ssppeecc.  These cards offer four and eight 32-bit counter channels,
     respectively.  Any channel can be designated as the preset timer.  See the
     _n_i_6_6_0_x help file for details.

Support For the Caen V260 VME Counters
     ssppeecc now supports the Caen V260 VME counters.  This module has sixteen
     24-bit counters.  ssppeecc will pair adjacent channels to form 48-bit counters
     if the number of counters on the DDevices screen of the configuration editor
     is eight or less.  Otherwise, up to 16 24-bit counters will be available.

Support For the Caen V462 VME Gate Generator
     ssppeecc now supports the Caen V462 VME gate generator as a timer.  This module
     is not recommended due to its limitations.  Its maximum count time is only
     ten seconds.  Also, in the event a count is interrupted with ^^CC or ssttoopp(()),
     the module can't be reprogrammed until the current gate time has elapsed.
     The module has two channels.  ssppeecc use channel 0 or 1 according to value in
     the NUM column on the DDevices screen of the configuration editor.

More Fixes For MDrive Motor Controller
     The IMS MDrive 17/23/34 motor controller support has been revised yet again
     to better handle encoders and stall detection.  To aid in tuning, the
     following generic optional motor parameters can be set from the
     configuration editor.  The values will be sent to the MDrive controllers as
     follows (the corresponding MDrive command is shown in parenthesis):

         Generic parameter 1 - Run current in percent (RC)
         Generic parameter 2 - Hold current in percent (HC)
         Generic parameter 3 - Hold current delay time in msec (HT)
         Generic parameter 4 - Settling time in msec (MT)

     Also, the standard optional motor parameter ""DDCC ffoolllloowwiinngg eerrrroorr"" can now be
     configured.  If set, its value will be sent as the stall factor (SF
     command).

March 16, 2003 - RELEASE 5.03.01-1

New Error Message When Constraints Disallow ppssiicc Angles
     If angle cut points or a sector choice rule out the calculated angles for a
     particular reciprocal space position for the ppssiicc geometry, ssppeecc now prints
     out an error message.  Previously, an error value was returned by the
     ccaallcc(()) function, but there was no error message from the C code.

New Timing Options For Compumotor SX Motor Controller
     New ""wwddeellaayy"" and ""rrddeellaayy"" options to mmoottoorr__ppaarr(()) allow configuring delays
     before commands are sent to or replies are read from the Compumotor SX
     motor controller.  Units for the delays are seconds.  Delays of 10 msec or
     so appear necessary on faster computers to communicate reliably with the
     motor controller.

Adjustments For Phytron Motor Controller
     As ssppeecc support for newer models of the Phytron motor controllers has been
     added over the years, some commands were included that did not work with
     older Phytron firmware.  Adjustments as to what commands are sent based on
     firmware version have been made, and the older Phytron models now work with
     the current ssppeecc release.

Fixes For MDrive Motor Controller
     The preliminary support for the IMS MDrive 17/23/34 motor controllers has
     been revised to cope with incompatible updates made by IMS to the
     controller firmware.

Driver For PIO device Updated For LLiinnuuxx 2.4 Kernels
     The ppiioo..cc driver used with the ILL 2D detector has been updated to work
     with version 2.4 LLiinnuuxx kernels.

March 16, 2003 - RELEASE 5.03.01

New Macro Hardware Facility
     A major new feature in this release of ssppeecc is macro hardware support.
     This feature combines features of the built-in C code for motor control and
     counter control with the flexibility of user-defined macro functions.  In
     addition, the macro motor support has special capabilities to ease the
     creation of calculational pseudomotors (that is, pseudomotors with
     positions that depend on real motors).  See the _m_a_c___h_d_w help file for
     implementation details.

Better Handling Of Recalcitrant Hardware
     When motors won't stop, the ssyynncc command will now clear ssppeecc's internal
     busy flags for the associated controller to avoid the endless waiting for
     the controller to indicate the motors have stopped.  The ssyynncc command will
     now also clear the internal busy flags for non-responsive timers.  Finally,
     ssppeecc is now also more willing to quit when busy hardware is not responding.

Previous "Fix" To eeddccoonnff Step-Size Handling Reversed
     A change made in ssppeecc release 3.02.01 (Feb 1995) to the eeddccoonnff hardware
     configuration editor, where modifying the motor step-size parameter would
     change the dial position parameter, but leave the motor accumulator
     constant, has been reversed.  The dial position will now remain fixed, and
     the motor accumulator value will be adjusted when the step-size is changed.
     The reason for the code change is that a modification to the step size
     seems more likely to be made in the delicate situation where a motor or
     motor controller is replaced and the position of the motorized component
     should remain unchanged.  The case where the motor controller position
     register should remain constant seems less likely and less critical.  Users
     with strong feelings otherwise, please contact CSS.

New Facility to Support the ANKA RST Gamma Software
     ssppeecc now supports yet another control system that provides an interface to
     beamline control hardware via a unique protocol.  This system is in use at
     the ANKA synchrotron in Karlsruhe Germany, and is an industrial control
     software called Gamma from RST Industrie Automation GmbH.  Besides the new
     motor and counter/timer controller types, the interface has new user-level
     functions in ssppeecc.  The new functions are called aannkkaa__ppuutt(()), aannkkaa__ggeett(()) and
     aannkkaa__ppaarr(()), but are only visible if the Gamma hardware or connection
     parameters are configured.  See the _a_n_k_a help file for details.

New Configuration Option For Hardware-Related ssppeecc__ppaarr(()) Options
     Certain hardware-related ssppeecc__ppaarr(()) options can now be set in the ccoonnffiigg
     file.  See the _s_p_e_c___p_a_r help file for syntax details.

Support For Amptek Pocket MCA 8000/8000A
     ssppeecc now supports the Amptek Pocket MCA 8000/8000A over a serial interface.
     See the _a_m_p_t_e_k help file for details.

Support For New Focus Model 87XX Picomotor Controller
     ssppeecc now supports the New Focus Model 8750 and 8753 Picomotor controller
     modules over a serial interface.

changes                      spec 5.02 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 5.02

March 2, 2003 - RELEASE 5.02.04-9

Fix For Parsing Of vvmmee__xxxxxx(()) Options
     An old bug, where a single argument containing a comma-separated list of
     options for the vvmmee__ggeett(()), vvmmee__ppuutt(()), vvmmee__ggeett3322(()), vvmmee__ppuutt3322(()) and
     vvmmee__mmoovvee(()) functions wasn't parsed correctly, has been fixed.  Options
     contained in a comma-separated list of arguments were not a problem.

Fix For ESRF TACO MAXE Motor Limits
     ssppeecc now recognizes the case where a motor interfaced using the ESRF TACO
     MAXE device server has both limits active.  Previously, only the case where
     one limit was active was recognized.

February 21, 2003 - RELEASE 5.02.04-8

New aarrrraayy__oopp(()) Option
     The ""ssuumm"" and ""ssuummssqq"" options of aarrrraayy__oopp(()) can now take a third argument
     to specify a frame size for return values that are arrays of sums of
     elements.  See the _a_r_r_a_y_s help file for details.

Support For Struck SIS1100/3100 PCI to VME
     ssppeecc now supports the Struck model SIS1100/3100 PCI to VME bus coupler on
     LLiinnuuxx platforms.

Fix For Channel Numbering For PI C-804
     An off-by-one numbering problem for the the Physik Instrumente C-804 motor
     controller, introduced in ssppeecc release 5.01.01, has been fixed.

February 11, 2003 - RELEASE 5.02.04-7

Crash On Certain Array Errors Fixed
     A bug introduced in ssppeecc release 5.02.03, where the error messages that
     were to be displayed on certain array operations (divide by zero or an
     assignment of an array to a scaler) instead produced segmentation faults on
     certain platforms, has been fixed.

February 6, 2003 - RELEASE 5.02.04-6

New Debug Option For Socket I/O
     If the bit 0x400000 is added to the global DDEEBBUUGG level when bit 0x40
     (hardware debugging) is also set, the messages sent and received over
     sockets will be displayed in an all-hexadecimal format, rather than the
     normal ASCII with backslash escapes for non-printable characters.

Shared Memory Fix For HP Platforms
     One of the shared memory improvements in ssppeecc release 5.02.01-1 apparently
     resulted in a bug on HP platforms, in that shared memory segments created
     within one ssppeecc process would not be visible to other processes.  That
     problem has been corrected, although the automatic deletion of shared
     segments is back to its pre-release 5.02.01-1 level of robustness for HP
     platforms.

February 3, 2003 - RELEASE 5.02.04-5

Obscure eevvaall(()) Bug Fixed
     An obscure bug, where the usage eevvaall((""##"")) would cause ssppeecc to crash, has
     been fixed.

MCS Support For Seiko EG&G MCA 7700
     ssppeecc now supports multichannel scaling on the Seiko EG&G MCA 7700 device.
     New arguments for mmccaa__ppaarr(()) to support MCS mode are ""mmccss"" to set
     multichannel scaling mode, ""ddwweellll"" to set the dwell time (with a value of
     -1 setting external dwell), ""ppaasssseess"" to set the number of MCS passes and
     ""eellaappsseedd__ppaasssseess"" to read the numbers of MCS passes completed.

Retry Feature For EPICS Reads
     This version of ssppeecc will retry EPICS channel-access reads that fail with a
     timeout.  The new ""rreettrriieess"" argument to eeppiiccss__ppaarr(()) can be used to read or
     set the number of retries.  Although a process variable name must be
     provided to eeppiiccss__ppaarr(()), the setting is currently global to all process
     variables.  The default value is two, and the default is restored each time
     ssppeecc is run.  Messages will be printed when the channel access reads are
     retried.  Users are requested to inform CSS if retries prove successful (or
     not).

February 2, 2003 - RELEASE 5.02.04-4

Some Obscure Memory-Related Bugs Fixed
     A couple of problems that caused memory faults on some platforms, related
     to the display of help files with ssppeecc's built-in pager and the release of
     shared arrays when ssppeecc quits, have been fixed.

January 30, 2003 - RELEASE 5.02.04-3

Fix For eeddccoonnff Configuration Editor
     A bug in the eeddccoonnff hardware configuration editor, where a motor's
     unit/channel information would be lost when a motor was inserted or deleted
     and adjacent motor columns did not have unit/channel information turned on,
     has been fixed.

New Feature For the eeddccoonnff Configuration Editor
     When in the list menus of the eeddccoonnff hardware configuration editor, typing
     a letter will scroll to the first item in the menu that begins with that
     letter.  The letters are case insensitive.  However, the command characters
     jj and kk are still recognized as moves down and up, respectively.  However,
     typing JJ or KK will cause a jump to the items matching those letters.

January 27, 2003 - RELEASE 5.02.04-2

Fix For Four GPIB Controllers
     A bug that prevented GPIB controller unit four from being recognized has
     been fixed.

Word Access for ISA DAC Motors
     ISA digital-to-analog modules can now be configured for either byte or word
     access.  Previously, only byte access was used.  Also, see the new _d_a_c help
     file for a description of the DAC motor interface.

Fixes For Recent Update To ESRF TACO Maxe Motor Controller Support
     Problems with excessive hardware reads in the revised Maxe code included in
     ssppeecc release 5.02.03-4 have been fixed.

January 17, 2003 - RELEASE 5.02.04-1

nneewwffiillee Macro Fix
     The nneewwffiillee macro will now write the ##FF control line that contains the file
     name for new data files, no matter what the starting scan number is.
     Previously, the file name was only written for new files when the starting
     scan was number one.

Fix For Geometry-less Installations
     The installation procedure will now create a start-up command file for the
     ssppeecc-type geometry-less configurations that aren't named ssppeecc.  The
     start-up file will be named with the first four letters of the
     configuration name, appended with ..mmaacc and contain a call of the nnoo__hhkkll
     macro.

Updated MXC Hardware Support
     Support for the Bruker (formerly MAC Science) MXC motor controllers and
     counter/timers has been updated to work with another version of the
     controller.

ESRF UDP Transfer Size Increased
     The maximum data size for eessrrff__iioo(()) UDP transfers has been increased from
     8,192 to 32,768 bytes.

December 12, 2002 - RELEASE 5.02.04

Pseudomotor Improvements
     The sseett macro now works with pseudomotors.  For the kind of pseudomotor
     where the motor position is calculated from the positions of one or more
     real motors, such as with the kkaappppaa configurations of the ffoouurrcc or ppssiicc
     geometries, the cchhgg__ooffffsseett(()) function, as called by sseett, will now
     automatically adjust the offsets of the real motors on which the
     pseudomotor depends.  ssppeecc also now enforces the rule that for this type of
     pseudomotor the user and dial positions must be the same.  Thus, the
     cchhgg__ddiiaall(()) function, as used in the sseett__ddiiaall macro, will produce an error
     if an attempt is made to change the pseudomotor dial position.  Note, the
     definitions of the sseett and sseett__ddiiaall macros have been modified as part of
     the update.

December 5, 2002 - RELEASE 5.02.03-6

Fix For MM4005/4006 Limit Search
     A bug, where negative limit searches on Newport MM4005/4006 motors
     controllers didn't work, has been fixed.

November 22, 2002 - RELEASE 5.02.03-5

New Signal Handling On Exit
     ssppeecc's exit behavior on receiving the signals SIGTERM (the default signal
     sent with the kkiillll command) and SIGQUIT (the signal sent with a keyboard
     ^^\\, at least on most platforms) has been changed.  Previously, ssppeecc would
     wait for the current moving and counting to finish, or wait for an
     additional signal, such as a SIGINT from a keyboard ^^CC, that would stop the
     acquisition.  Now ssppeecc will halt the hardware activity when the first
     signal arrives.  Also, ssppeecc now catches SIGHUP (the hang-up signal, as sent
     by a window manager when the window manager exits) and halts hardware
     activity as with SIGQUIT and SIGTERM.  ssppeecc will save the user state file
     on SIGHUP, but still will not with SIGQUIT and SIGTERM.

Fix For eevvaall(())
     A bug, where an eevvaall(()) call of a macro function that contained a loop that
     called a macro function that had no return value and where that call would
     cause the loop to break after one iteration, has been fixed.

Fix For Motor Round Off
     An obscure bug with motor position rounding has been fixed.  With certain
     step size values, if the user-position offset was set to exactly one half
     step beyond the configured step size, under some conditions, such a motor
     would move a step when other motors were commanded to move.

November 20, 2002 - RELEASE 5.02.03-4

Motor Power Control For Tsuji Controllers
     If the optional motor parameter ""ggeenneerriicc ppaarraammeetteerr 11"" is set for a Tsuji
     PM16C-02/04 motor channel, ssppeecc will issue commands to turn the motor hold
     current off when the motor is not moving.  The parameter value is the delay
     time (in seconds) both between the time the power is turned on and the move
     is started and between the end of the move and the time the power is turned
     off.  A value of zero will skip the delay.  If the field in the
     configuration editor is blank (type ^^DD to blank the field), then the motor
     hold current will remain on all the time.

New Version for ESRF TACO Maxe Motor Controllers
     The code to support the ESRF TACO Maxe motor controllers has been
     reorganized as part of a modernization effort.  Functionality should remain
     as before, but if anomalies are noticed, please contact your ssppeecc
     administrator or CSS HQ.

November 18, 2002 - RELEASE 5.02.03-3

Fix For xx1111ffiilltt Fonts
     ssppeecc now accepts a parameter of either cc (character cell) or mm (monospace)
     in the ssppaacciinngg field of the X Logical Font Descriptor (XLFD) string.
     Previously, only mm was accepted (unless overwritten by specific font
     choices using an XXddeeffaauullttss resource file or a pplloott__ccnnttll(()) call).

October 26, 2002 - RELEASE 5.02.03-2

Support For ppssiicc Azimuthal Detector Rotation
     ssppeecc will now calculate detector rotation in the ppssiicc geometry according to
     the E. Vlieg 2+3 diffractometer configuration.  See the _p_s_i_c help file for
     more information.

Support For Parallel-Rail 3-Axis Four-Circle Geometry
     The ffoouurrcc geometry code now includes preliminary support for a new
     configuration that has monochromator, sample circles, analyzer and detector
     circles mounted on four parallel rails, perpendicular to the incident beam.
     See the ggeeoo__ffoouurrcc..cc and mmaaccrrooss//ffoouurrcc..ssrrcc files for additional information.

Updated Geometry Code
     The remaining geometry code has been revised to use the current ssppeecc
     convention of returning an error rather than resetting to command level
     when a calculation fails.  The affected geometries in this revision are
     ggmmccii, ss22dd22, ssuurrff, ttwwoocc, ww2211hh and ww2211vv.  (The other geometries were updated
     in prior releases.)  Also, the standard macros bbrr, mmkk, ccaa and ccaall have been
     revised to exit if the function call embedded in the ccaallccAA macro (to
     calculate motor positions given the HHKKLL of the scattering vector) fails.

Support For Velmex VXM Motor Controllers
     ssppeecc now supports the Velmex, Inc. VXM-1 and VXM-2 motor controllers over a
     serial interface.

Support For IMS MDrive Motor Controllers
     ssppeecc contains preliminary support for Intelligent Motion Systems, Inc.
     MDrive 17/23/34 motor controllers over a serial interface.

Upgrade to Gomm Controllers
     The code for the Uni-Erlangen Gomm motor and counter controllers now
     supports controllers on more than one serial line.

October 20, 2002 - RELEASE 5.02.03-1

Fix and Enhancement For Rigaku Controllers
     ssppeecc now works properly with a variant firmware version in a Rigaku RINT or
     D/MAX type motor controller.  Rigaku version numbers are unknown.  The
     manifestation of the problem was that motor positions weren't read
     correctly during or just after a move.  That problem is fixed.  Also,
     Rigaku firmware has never allowed a remote program to read motor positions
     while motors are moving.  ssppeecc will now estimate the current position based
     on motor speed and acceleration and display the estimated position during
     updated moves.

October 13, 2002 - RELEASE 5.02.03

Fix For aarrrraayy__dduummpp(()) and aarrrraayy__ppiippee(())
     A bug introduced in release 5.01.01 (as an unintended consequence of
     another fix), which limited the output of aarrrraayy__dduummpp(()) and aarrrraayy__ppiippee(()) to
     64 columns of the array argument, has been fixed.

Improved ^^CC Responsiveness During Array Printing
     A ^^CC interrupt during output of a large data array with the pprriinntt command
     will now more likely stop the output.

New mmoottoorr__ppaarr(()) Options To Set Limits
     The new options ""llooww__lliimmiitt"" and ""hhiigghh__lliimmiitt"" are available to set and
     retrieve motor limits.  The sseett__lliimm(()) and ggeett__lliimm(()) built-in functions
     continue to be available.

Fix For Very Large Arrays
     A recently introduced bug, where a negative data array dimension in an
     aarrrraayy declaration would be interpreted as a very large number rather than
     produce an error, has been fixed.

New Command Character in eeddccoonnff
     The double quote character "" is now recognized by the configuration editor
     eeddccoonnff as equivalent to the single quote character '' as a command to begin
     string-entry mode.

September 30, 2002 - RELEASE 5.02.02-12

Fix For Compumotor 3000 and 4000 Motor Controllers
     A bug, where ssppeecc could segmentation fault when trying to use the old
     Compumotor CM3000 or CM4000 motor controllers with recent versions of the
     National Instruments GPIB driver, has been fixed.

September 20, 2002 - RELEASE 5.02.02-11

Fix For Detecting EPICS Motor Configuration Error
     A bug, where ssppeecc could segmentation fault when EPICS motors were
     configured on the Motor screen of the configuration editor but the number
     of motors on the Devices screen was zero, has been fixed.

Fix For Setting TACO Serial Line Parity
     A bug, where ssppeecc didn't adjust the number of data bits from eight to seven
     on the TACO serial line driver when setting parity to even or odd, has been
     fixed.

September 6, 2002 - RELEASE 5.02.02-10

Bug In Serial and Socket EOS-mode Reads Fixed
     A bug introduced in release 5.02.02 (May 20, 2002), where when reading
     serial devices in end-of-string (EOS) mode, a false EOS match was sometimes
     reported, has been fixed.  The bug affected both built-in hardware code and
     user-level sseerr__ggeett(()) and ssoocckk__ggeett(()) functions.

September 2, 2002 - RELEASE 5.02.02-9

Plot Ranging Bug Fixed
     A bug, where the high-resolution plotting in ssppeecc would hang on certain
     platforms or display peculiar axis labels on others if all the data points
     for the xx or yy axis were an identical very large number (such as 1e38), has
     been fixed.

Newport MM4000/4005/4006 Updates
     A number of fixes and updates have been made for the Newport
     MM4000/4005/4006 motor controller support.  For the 4005/4006, the commands
     (unavailable on the 4000) to set the base rate, the home base rate and the
     home acceleration are now implemented.  Also, it is now possible to set the
     dial (home) position to an arbitrary value on all three models.  An
     alternate home command (generally ""OORR22""), rather than the default ""OORR11"" can
     be selected by entering the command as Generic Parameter 1 on the second
     optional motor parameter screen of the configuration editor.  Also, limit
     searches are now properly implemented on the 4005 and 4006 models (although
     unavailable on the 4000 model).  In addition, problems with doing a move
     after hitting a hard limit have been fixed.  Finally, the settle-time
     feature is now supported with these controllers.

August 21, 2002 - RELEASE 5.02.02-8

Shared Memory Fix For Solaris Platforms
     One of the shared memory improvements in ssppeecc release 5.02.01-1 resulted in
     a bug on Solaris platforms, in that shared memory segments created within
     one ssppeecc process would not be visible to other processes.  That problem has
     been corrected, although for Solaris platforms only, the automatic deletion
     of shared segments is back to its pre-release 5.02.01-1 level of
     robustness.

August 11, 2002 - RELEASE 5.02.02-7

MCA Interface Additions
     A new MMCCAASS global variable is available that is set to the total number of
     configured MCA devices.  The mmccaa__sseell(()) function can return one line of
     information about a particular MCA using the syntax mmccaa__sseell((nn,, ""??"")), where
     nn is the MCA device number.

Update to Roentec MCA Support
     A couple of features have been added to the Roentec XFlash MAX MCA support.
     The device can now be configured to run at any baud rate.  Previously, the
     reset command sent by ssppeecc would reset the baud rate to 38400.  A new
     mmccaa__ppaarr(()) option ""bbiinn"" can be used to set the number of channels averaged
     together within the device during the data read out.  For hardware
     configurations that support live-time presets and readouts, the standard
     live-time and dead-time mmccaa__ppaarr(()) commands are now available.

Support For Ortec MCS-PCI Multichannel Scaler
     ssppeecc now supports the Ortec MCS-PCI multichannel scaler module.  See the
     _m_c_s_p_c_i help file for details.

Help Display Bugs Fix
     A bug introduced in release 5.01.03, where display of a long help file
     using either the ggeetthheellpp(()) function or the cchheellpp shell utility would cause
     a segmentation fault on some platforms, has been fixed.  Also, the bb
     command to move backwards a page when using the built-in pager was left out
     of that release, but is now restored.

July 23, 2002 - RELEASE 5.02.02-6

Fix For Macro Functions Returning Arrays
     A bug remaining from the release 5.02.02-2 fixes for data arrays used with
     macro functions has been fixed.  Specifically, a macro function can now
     return a data array declared as a local in the macro function without
     causing a segmentation fault or bad values in the returned array.

Fix For Plot Macro Setup
     A bug in the plot macros, where the SSCCAANN__DD data array would not be
     configured correctly if the symbol did not already exist as a
     two-dimensional array, has been fixed.

July 16, 2002 - RELEASE 5.02.02-5

Extern Shared Array Fix
     A bug, where declaring an eexxtteerrnn sshhaarreedd aarrrraayy more than once for the same
     array would result in a segmentation fault, has been fixed.

July 10, 2002 - RELEASE 5.02.02-4

Fix For IMS Controllers
     A bug introduced in ssppeecc release 5.01.03 that broke party-line mode for IMS
     motor controllers has been fixed.

July 3, 2002 - RELEASE 5.02.02-3

Support For Ortec 996 Counter/Timer
     The Ortec 996 one-channel counter/timer is now supported in ssppeecc as either
     a single channel counter or a single channel counter with blind timer.  See
     the _o_r_t_e_c help file for details.

Fix For Setting EPICS Timeout
     It is now possible to set the timeout value for an EPICS process variable
     using eeppiiccss__ppaarr(()) before connecting to the variable in the remote IOC.
     Previously, the timeout could be set only after the connection was made,
     which would be impossible if the default timeout was too short to make the
     connection.

Fix For Setting TACO Timeout
     An old bug that affected setting the RPC timeout for TACO (ESRF) device
     server connections has been fixed.  The bug had little impact except when
     attempting to set a timeout of less than one second.

June 21, 2002 - RELEASE 5.02.02-2

Fixes For Macro Functions With Data Arrays
     Bugs in recent ssppeecc releases involving memory leaks and memory corruption
     errors when passing data arrays to macro functions as arguments or from
     macro functions as return values appear to be fixed.  Also, behavior when
     passing subarrays as macro function arguments is now well defined.  A
     subarray will be passed by value.  That is, new memory will be allocated
     for the data, and modifications to the data won't change the array in the
     calling function.

Support For OMS Servo-Motor Controllers
     ssppeecc now includes preliminary support for OMS servo-motor controllers.
     Select motor type OOMMSS__SS in the ccoonnffiigg editor.  The optional DC-motor
     parameters for proportional, derivative and integral gain (KP, KD and KI)
     are implemented.  Selecting the servo-motor type automatically enables
     encoder capability.

June 2, 2002 - RELEASE 5.02.02-1

New Ignore-Simulate Mode For Sockets
     To accommodate the client-server macros, sockets can now be made immune to
     simulate mode with the new ""iiggnnoorree__ssiimm"" option to ssoocckk__ppaarr(()).  See the
     _s_o_c_k_e_t_s help file for usage.  The macros in sseerrvveerr..mmaacc have been modified
     to use this new mode.

May 20, 2002 - RELEASE 5.02.02

Memory Leaks Fixed
     A number of small memory leaks have been fixed.  A leak that occurred when
     command file input was interrupted by an error or ^^CC has been fixed.  A
     leak that occurred when a macro function was used and then redefined within
     a statement block has been fixed.  A leak that occurred when a data
     subarray was passed to a macro function as an argument has been fixed.

Improvements To the uunngglloobbaall Command
     Several improvements and fixes have made in the behavior of uunngglloobbaall
     command.  Use of uunngglloobbaall within a statement block will now clear the
     current values of symbols and mark them as unset.  Use of uunngglloobbaall on a
     ccoonnssttaanntt symbol within a statement block will remove the ccoonnssttaanntt
     attribute.  Use of uunngglloobbaall in a macro function on a data array passed as
     an argument will clear the values in the array to zero, but will not remove
     the array.

cclloonnee(()) Improvement
     The cclloonnee(()) function can now be used to redefine an existing macro.

Looping Bug In eevvaall(()) Fixed
     A bug that caused an endless stream of error messages when the eevvaall(())
     function was passed an unterminated string has been fixed.

General Improvements To eevvaall(())
     A significant code rearrangement to create separate data structures for
     each eevvaall(()) invocation should increase the robustness of the function.

Fix Of ffoorr ((vvaarr iinn aarrrr)) Syntax
     A bug, where the ffoorr ((vvaarr iinn aarrrr[[nnuumm]])) syntax didn't properly loop through
     the elements of the two-dimensional associative array when nnuumm was a number
     constant, has been fixed.

Array Alignment Extended
     The automatic array alignment to put the start of data on memory page
     boundaries for arrays used with iimmaaggee__ggeett(()) and iimmaaggee__ppuutt(()) has been
     extended.  Now all data arrays greater than 0.5 Mbyte will be aligned to a
     page boundary when they are created.

Expanded Galil Motor Controller Support
     ssppeecc now supports the Galil Optima series motor controllers, including the
     DMC-2x00 models, over ethernet and serial interfaces.

Fix For Four VME Controllers
     A bug that prevented VME controller unit four from being recognized has
     been fixed.

Multiple Driver-less SBS PCI Controllers Implemented
     ssppeecc can now support multiple (up to four) SBS 616/617/618 PCI-to-VME bus
     adapters in ""ddrriivveerrlleessss"" mode on LLiinnuuxx platforms In this mode, ssppeecc
     controls the PCI card directly, rather than going through the kernel driver
     supplied by SBS.

Support For XIA X10P Parallel Port MCA
     ssppeecc now supports the XIA model X10P parallel Port MCA on LLiinnuuxx platforms.

Update To New XIA Libraries
     This release of ssppeecc requires linking with the current release (0.0.6) of
     the XIA libraries to use the DXP4C, DXP4C2X and the X10P modules.

May 2, 2002 - RELEASE 5.02.01-1

New Optional Scaler Parameter Screen
     The configuration editor now includes a new screen to configure optional
     scaler parameters.  The optional screen is accessed with the command ss from
     the main Scaler screen.  Currently, the only optional scaler parameter used
     is for the new EPICS process-variable counters.

New EPICS Process-Variable Counters
     Arbitrary EPICS process-variables may now be configured as counters.  Their
     values will be read with the ggeettccoouunnttss command, called by the standard
     counting macros, with the EPICS channel access get commands.  No other
     commands are issued.  The process-variable name will be formed from the
     prefix given on the Controllers screen of the configuration editor and the
     string entered as miscellaneous parameter 1 from the new optional Scaler
     parameter screen.

April 29, 2002 - RELEASE 5.02.01

Memory Alignment For iimmaaggee__ggeett(()) and iimmaaggee__ppuutt(()) Data Arrays
     In order to accommodate image acquisition devices that transfer data
     directly to memory and that require the data to be aligned on memory page
     boundaries (memory addresses that are multiples of 4096), data arrays used
     with the iimmaaggee__ggeett(()) and iimmaaggee__ppuutt(()) functions will now be automatically
     aligned on memory page boundaries (in most cases).

Shared Array Updates
     A number of updates and improvements have been made to the shared array
     facility:

     +o The size of the header of the shared segment has been increased to put
       the start of the data array on a page boundary to accommodate acquisition
       hardware that requires page-aligned data.

     +o The new start-up option --oo oolldd__sshhaarreedd==11 will tell ssppeecc to create shared
       segments using the old-size headers to accommodate applications that have
       not yet been recompiled for the new header size.

     +o The eexxtteerrnn sshhaarreedd array feature can be used with both old and new header
       sizes, even when using the oolldd__sshhaarreedd option above.

     +o Shared segments will automatically disappear when the last attached
       process detaches or exits, even if ssppeecc exits abnormally.  Previously,
       ssppeecc only removed the segment when exiting normally.

     +o If ssppeecc creates a shared array, exits while another process is attached
       and then restarts with the previous state file, ssppeecc will reconnect to
       the existing array.  In prior releases, ssppeecc would always create a new
       segment.

New State File
     The state file format needed modification to accommodate the
     array-alignment feature, making the current state file incompatible with
     previous releases.  The current ssppeecc version can read state files from
     previous versions, but will write state files that will not be readable by
     previous ssppeecc versions.

Support For Alternate ttwwoocc Configuration
     The ggeeoo__ttwwoocc..cc code has been modified to support an alternate configuration
     where the tthh and tttthh rotations are coupled.

changes                      spec 5.01 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 5.01

April 20, 2002 - RELEASE 5.01.03

Updated Help Viewer
     The ssppeecc help viewer has been updated.  The viewer can now jump to keyword
     locations given by line numbers in the SSPPEECCDD/help/.links file.  Also, new
     commands to move forward and back by single lines and by half a screen are
     availble when the viewer is used directly (rather than sending output
     through a pager).

Addition To Standard Scan Header
     The default __hheeaadd macro now also writes the contents of the UUBB[[]] and QQ[[]]
     arrays in the scan headers prefixed by ##GG33 and ##GG44 respectively.  The
     obsolete MM[[]] array, previously written prefixed by ##GG22, has been
     eliminated.  Also, the output format for all ##GG parameters has been changed
     in the __hheeaadd__ppaarr from %%gg to %%..1100gg macro, which increases the number of
     significant figures from six to ten.

Small Fix For kkaappppaa Code
     A bug in the kkaappppaa geometry code where the cut points for the cchhii and pphhii
     angles were not applied to the calculations of the angles has been fixed.

Support For Alternate zzaaxxiiss Configuration
     The ggeeoo__zzaaxxiiss..cc code has been modified to support an alternate
     configuration that includes a refraction correction on AALLPPHHAA and BBEETTAA.  The
     correction only occurs if the new geometry parameter AALLPPHHAA__CC (defined as
     QQ[[2211]]) is nonzero.

Alternative EPICS Motor Naming Convention
     An alternative to the motor naming convention used at APS for the EPICS
     motor record process variables is now available.  See the _e_p_i_c_s help file
     for details.

Support For Socket-based Serial Interface
     ssppeecc now supports Ethernet-to-serial devices such as the ATOP Technologies
     TigerLink.  Only the device-independent sending and receiving of serial
     data over sockets is implemented.  Configuration of baud rate, parity and
     other parameters must be taken care of outside of ssppeecc.  To configure such
     a device, select SSOOCCKKEETT in the AADDDDRR (for controllers) or TTYYPPEE (for a
     generic user-level serial interface) fields and enter the host name and
     port number separated by a colon in the DDEEVVIICCEE field.

Support For VME DAC Motors
     The DAC motor support now includes VME DAC modules that use A16 addressing
     to set a single DAC 12- or 16-bit output register.

Support For ACS MCB-4B Motor Controller
     The new Advanced Control Systems MCB-4B motor controller with RS-232C
     interface is now supported.

Support For Ortec Trump-PCI MCA
     ssppeecc now supports the Ortec Trump-PCI MCA on LLiinnuuxx platforms.

Upgrade For Orsim MCA-7700 and Ortec Trump MCA
     The support for the Orsim MCA-7700 and Ortec Trump MCA now implements
     counting to a peak preset.  Use the new ""ppeeaakk__mmooddee"" mmccaa__ppaarr(()) option to
     select.  Also, some problems with setting and clearing the
     region-of-interest (ROI) have been fixed.  In addition, a new ""aauuttoo__cclleeaarr""
     mmccaa__ppaarr(()) option is available.  When set, the MCA will be cleared before
     starting.  The auto-clear mode is on by default.

Preliminary Support For Roentec MCA
     The Roentec XFlash MAX MCA is now supported.  This MCA uses a serial
     interface.

Upgrade For IMS Motor Controllers
     ssppeecc now supports the Intelligent Motion Systems (IMS) motor controllers in
     non-party-line mode.  Previously, only the daisy-chained party-line mode
     was implemented.

Fix For Riso ECB Motor Controllers
     A buffer overflow bug that resulted in segmentation faults with the RISO
     ECB motor controllers on some platforms has been fixed.

Fix For GPIB Devices
     A buffer overflow bug that could causes segmentation faults with ssppeecc's
     built-in support for a few GPIB devices on some platforms has been fixed.

March 22, 2002 - RELEASE 5.01.02-9

Kappa Geometry Installation Bug Fixed
     A bug, where the kkaappppaa geometry wouldn't be installed correctly if the
     ffoouurrcc geometry wasn't also installed, has been fixed.

sseettpplloott Revised
     The sseettpplloott macro has been revised to eliminate confusing prompts.

eessrrff__iioo(()) Associative Array Bug Fixed
     A bug, where eessrrff__iioo(()) would fail to correctly pass the elements of an
     associative array returned by a macro function, has been fixed.

February 26, 2002 - RELEASE 5.01.02-8

New Serial Configuration Options
     All serial devices can now be configured for the additional baud rates
     57600, 115200, 230400 and 460800.  Generic serial devices can now be
     configured for hardware flow control.

Multiple EPICS Scaler Modules Supported
     ssppeecc now allows configuration of EPICS generic scalers as either
     counter/timer units or as a counter-only units.  Only one module can be
     counter/timer, as ssppeecc only allow one master timer.  Additional modules
     must be configured as counters only.

New Doc String Syntax
     As a prelude to new documentation tools for macros and command files, ssppeecc
     now recognizes a special character sequence to delimit extended comment
     text.  Now, everything between pairs of triple double quotes """""" is a
     comment.  The comment block can span lines, but not files.  Unlike comments
     that begin with a pound sign ##, the doc string comments will not be saved
     with a macro if input as part of the macro definition.

Bug With Shared Arrays and Unglobal Fixed
     A bug, where using the sshhaarreedd aarrrraayy, gglloobbaall and uunngglloobbaall declarations in a
     statement block could lead to a segmentation fault, as in

        {{ sshhaarreedd aarrrraayy ddaattaa[[110000]];;  uunngglloobbaall ddaattaa;;  gglloobbaall ddaattaa }}

     has been fixed.

February 5, 2002 - RELEASE 5.01.02-7

xx1111ffiilltt Enhancements
     A number of enhancements have been made to the X11 plotting.  The xx1111ffiilltt
     window will now respond to a close operation from the window manager, as
     might be initiated by a title-bar button or window-ops menu item.  A static
     detached copy of the window can be created by simultaneously pressing the
     control key and any mouse button while the mouse cursor is over an active
     plot window.  Also, a new pplloott__ccnnttll((""ccmmdd==nnuummbb"")) command provides access to
     a number of special operations, including creating a detached window.  See
     the _x_1_1 help file for more information.

February 3, 2002 - RELEASE 5.01.02-6

Fixes For ppssiicc Geometry
     A bug in the ppssiicc geometry code, where the azimuthal reference vector was
     calculated incorrectly when specified by angles (ssiiggmmaa and ttaauu) rather than
     components, has been fixed.  Another bug, which disallowed user-entered
     azimuthal references vectors where the sum of the squares of the components
     was less than one, has been fixed.  Also, the sectors calculations now
     check that the allowed sectors don't violate nnaazz-fixed or qqaazz-fixed
     conditions.  Also, for kappa-mode ppssiicc, the sectors code will display the
     motor positions for the real motors (kkeettaa, kkaapp and kkpphhii) rather than the
     pseudo motors (eettaa, cchhii and pphhii) by default.  Both and real pseudo motors
     will be displayed for each sector in verbose format (SShhoowwSSeecctt 22 along with
     the corresponding values for oommeeggaa, qqaazz and nnaazz.

January 28, 2002 - RELEASE 5.01.02-5

Clarification Of Array Behavior
     The recent enhancements that included implementation of the relational (<,
     <=, ==, !=, >, >=) and Boolean (!, &&, ||) operators for data arrays gave
     ambiguous results in several cases, particularly when comparing an array
     with a scaler.  Such a comparison now unambiguously produces a scaler
     value.  The result is ttrruuee if and only if the relation is true for each
     element of the array and the scaler.  Otherwise, the result is ffaallssee.  In
     the case of Boolean operations, an array is considered ttrruuee if any element
     is nonzero.  If all elements are zero, the Boolean value of an array is
     ffaallssee.  In the case of string arrays, only single rows are allowed as
     Boolean operands, and an empty string or a  string representation of zero
     evaluates as ffaallssee, while anything else is considered ttrruuee.

Improved Version of xx1111ffiilltt
     The code in the xx1111ffiilltt program that draws the X graphics plot window for
     ssppeecc has been reorganized to better exclude unsuitable fonts - only fonts
     with registry iso8859-1 are now allowed.  In addition, the event handling
     has been reorganized such that only one process per window will ever be
     created.  Previously, for displays with no backing store, a second process
     was created for reasons not to be explained here.

January 24, 2002 - RELEASE 5.01.02-4

Expansion of PC DAC Motor Support
     Support for selected PCI cards for use as DAC motors is now included.
     Currently, the Measurement Computing PCI-DDA08/16 and the CyberResearch
     CYDDA02/04/08HRP boards are supported in this manner.

January 20, 2002 - RELEASE 5.01.02-3

Refinement Of String Array Behavior
     Various aspects of the treatment of string arrays have been modified due to
     popular demand.  The pprriinntt command no longer indicates trailing null bytes
     for each row of a string array, but does continue to display embedded null
     bytes.  When assigning to a complete row of a string array, bytes in the
     row unfilled by the assignment will be set to zero.  Also, when assigning
     to a complete row, numbers are assigned as strings.

Addendum to Serial/Socket Timeout Behavior
     A fast poll for sseerr__ggeett(()) and ssoocckk__ggeett(()) has been implemented and is
     recognized by setting the timeout value to the minimum of 0.001 second, for
     example, as sseerr__ppaarr((00,, ""ttiimmeeoouutt"",, ..000011)).

Fix For OMS Motor Controller Limit Search
     A bug with OMS motor controller, where the end of the ""lliimm++"" and ""lliimm--""
     searches was not properly detected, has been fixed.

January 15, 2002 - RELEASE 5.01.02-2

Wizard Mode Fix
     A problem with wizard mode on Solaris platforms has been fixed.

January 10, 2002 - RELEASE 5.01.02-1

New Server Macros
     A new set of macros provides a simple interface to enable one instance of
     ssppeecc to send commands to another via the user-level socket functions.  The
     macros are distributed in the file sseerrvveerr..mmaacc in the mmaaccrrooss subdirectory of
     the ssppeecc distribution.  See comments in that file for details.

Fix For Socket Timeout and Close
     The behavior for sockets waiting for a connection in ""lliisstteenn"" mode with the
     timeout parameter set to zero has been fixed to block indefinitely rather
     than return immediately.  The ""cclloossee"" option to ssoocckk__ppaarr(()) will now close
     both of the sockets associated with a ""lliisstteenn""-mode socket.  Previously,
     ssoocckk__ppaarr(()) with ""cclloossee"" would need to be issued twice.

January 7, 2002 - RELEASE 5.01.02

New ffoouurrcc Parameter
     The four-circle C code module ggeeoo__ffoouurrcc..cc distributed with ssppeecc has long
     contained a couple of optionally compiled lines of code that affected the
     sector where the cchhii motor would be located in the oommeeggaa-zero and
     oommeeggaa-fixed modes.  A new geometry parameter gg__oommsseecctt along with a new
     macro sseettoommsseecctt have been added to the distribution that allow this sector
     option to be selected without recompiling the code.  The default value of
     zero for gg__oommsseecctt maintains the prior default behavior.  If gg__oommsseecctt is
     nonzero, the value for cchhii will be reflected about the xx-yy plane if QQ[xx] is
     negative, i.e., the transformation becomes cchhii = 180 - cchhii.

Improvements To the Serial and Socket Interface
     The code for the socket and and serial (RS-232C) interfaces has been
     reorganized and features have been added.  The sseerr__ggeett(())/ssoocckk__ggeett(()),
     sseerr__ppuutt(())/ssoocckk__ppuutt(()) and sseerr__ppaarr(())/ssoocckk__ppaarr(()) functions now have the same
     consistent syntax and behavior.  The buffer size for reads without a byte
     count is increased from 511 to 8191 bytes.  New commands to
     sseerr__ppaarr(())/ssoocckk__ppaarr(()) are available to check if there are left-over
     characters in the input queue and to flush the queue.  See the _s_e_r_i_a_l and
     _s_o_c_k_e_t_s help files for more information.

eeddccoonnff Box Outline Change
     A new --bb flag to the eeddccoonnff configuration editor forces the use of text
     characters to draw a box around menus and subwindows using standard ASCII
     characters.  Otherwise, special line-drawing characters available with some
     fonts will be used.  Previously, the ASCII characters were always used with
     xxtteerrmm windows.  Since some X fonts do provide the line-drawing characters,
     but since there is no way to detect that from the program, this new option
     is available.  A new EEDDCCOONNFF__BBOOXX__FFLLAAGG global variable is also included in
     the standard macros.  If nonzero, the configuration editor, eeddccoonnff, invoked
     by the ccoonnffiigg macro, will use the --bb flag.

eeddccoonnff Backup File Permissions Fixed
     A bug, where the read/write permissions of the backup ccoonnffiigg and sseettttiinnggss
     files were not always maintained by the configuration editor, eeddccoonnff, has
     been fixed.

December 15, 2001 - RELEASE 5.01.01-10

Associative Array Looping Bug Fixed
     A bug, where the usage

        ffoorr ((vvaarr iinn aarrrr))
            ddeelleettee aarrrr[[vvaarr]]

     resulted in occasional segmentation faults, has been fixed.

December 6, 2001 - RELEASE 5.01.01-9

Kappa Diffractometer ccaallccPP__ffrroommRR C Code Fixed
     A bug in the new feature that calculated pseudomotor positions from real
     motors for the kappa versions of the ffoouurrcc, ffiivveecc and ppssiicc geometries has
     been fixed.  The feature was accessed with the ccaallccPP__ffrroommRR macro.

SCIPE Code Fixed
     The recent overhaul of the internal socket code in ssppeecc broke the SCIPE
     support.  The SCIPE support has now been repaired.

December 5, 2001 - RELEASE 5.01.01-8

Preliminary Support For Newport ESP-300
     Preliminary support for the Newport ESP-300 motor controller is included in
     this ssppeecc release.  The controller is supported over both GPIB and RS-232C
     interfaces.

November 22, 2001 - RELEASE 5.01.01-7

cclloonnee(()) Bug Fix
     An unfortunate programming lapse, which resulted in a segmentation fault on
     some platforms when using the new cclloonnee(()) function to make a copy of a
     macro, has been corrected.

November 17, 2001 - RELEASE 5.01.01-6

ffoouurrcc Bug Fixed
     A bug in the ffoouurrcc geometry code for locating the cut point for the tttthh
     motor has been fixed.  On LLiinnuuxx and HHPP platforms, the bug resulted in the
     cut point always being treated as zero.  On SSoollaarriiss platforms, the bug
     resulted in impossibly large values for the tttthh motor.  The bug was in all
     previous ssppeecc release 5 versions.

Technoland C-KP 402 Counter Bugs Fixed
     Two bugs found in the new code for the CAMAC Technoland C-KP 402 Counter
     have been fixed.  The first bug limited the 48-bit counters to 32 bits.
     The second bug prevented the last two channels of the eight available
     channels from being accessed.

Preliminary Support For the MBraun PSD-50m MCA
     ssppeecc now supports the old MBraun PSD-50m MCA.  This MCA uses an RS-232C
     interface.

Support For Keithley KPCI 3140 As Counters Only
     ssppeecc now supports the Keithley KPCI-3140 PCI counter card, but only as four
     32-bit counters.  The card cannot be used with ssppeecc as a timer or preset
     counter.

November 6, 2001 - RELEASE 5.01.01-5

Plotting Bug Fixed
     A bug introduced in release 5.01.01-1 that would often make it impossible
     to get plots of the data has been fixed.

New Time Scan Macros
     Macros to scan detectors over time are now included with the standard ssppeecc
     macros.  The new macros are called ttiimmeessccaann, which scans continuously and
     llooooppssccaann, which scans for a finite number of points.  See the macro
     definitions for details.  These macros are from the _E_S_R_F collection.

Bug Fix in hhoommee Macro
     A bug in the hhoommee macro introduced in release 4.05.10-3, which would
     produce syntax errors when the macro was used with the optional ""++"" or ""--""
     arguments, has been fixed.

PCI Timer/Counter Found and Supported
     An Am9513 type PCI counter has been found that does not suffer from the
     flaw contained in the Measurement Computing PCI-CTR05.  This release of
     ssppeecc supports the ICS Advent PCIDCC5/10/20-P timer/counter cards.  See the
     vendor's pages at _w_w_w_._i_c_s_a_d_v_e_n_t_._c_o_m for more information.

Driver For PCA-II Updated For LLiinnuuxx 2.4 Kernels
     The CSS ppccaa..cc driver for the obsolete Nucleus PCA-II MCA card has been
     updated to work with LLiinnuuxx 2.4 series kernels.

October 29, 2001 - RELEASE 5.01.01-4

Overhaul Of User-Level Socket Access
     New ssoocckk__ggeett(()) and ssoocckk__ppuutt(()) built-in functions have been added to replace
     the ""rreeaadd"" and ""sseenndd"" options to ssoocckk__iioo(()).  A new ssoocckk__ppaarr(()) function
     replaces the other uses of ssoocckk__iioo(()).  (Use of ssoocckk__iioo(()) is still
     supported, but is now deprecated.)  See the _s_o_c_k_e_t_s help file for details.

New Names For sseerr__ggeett(()) and ggppiibb__ggeett(()) Options
     The options ""sshhoorrtt"", ""sshhoorrtt__sswwaapp"", ""lloonngg"" and ""lloonngg__sswwaapp"" are now
     recognized as synonyms for ""iinntt22"", ""iinntt22__sswwaapp"", ""iinntt44"" and ""iinntt44__sswwaapp"" in
     the sseerr__ggeett(()) and ggppiibb__ggeett(()) functions.

October 29, 2001 - RELEASE 5.01.01-3

VME A24 Address Space Supported
     ssppeecc now supports the A24 addressing mode through the vvmmee__ggeett(()), vvmmee__ppuutt(())
     and vvmmee__mmoovvee(()) functions.  The optional modifier argument must include the
     string ""AA2244"".

Bug Fix For Serial Devices With Hardware Handshake
     A old bug, where ssppeecc would hang when closing unresponsive serial devices
     configured for hardware handshake, has been fixed.

Bug Fix For Crash On Macro Function Syntax Error
     A bug, where ssppeecc could crash when executing a macro function that had a
     syntax error involving the macro function argument, has been fixed.

October 16, 2001 - RELEASE 5.01.01-2

Fix For Indirection Operator @@
     The code for handling array elements as arguments to the indirection
     operator @@, as in {{ aa == ""xx[[1100]]"";; @@aa == 11 }} has been fixed.  Previously, the
     operator only worked correctly with existing elements of existing
     associative arrays.  Other cases produced segmentation faults.  Elements of
     associative arrays are now handled correctly, whether existing or not.
     Elements of data arrays are not yet supported, but use produces an error
     message, not a core dump.

October 3, 2001 - RELEASE 5.01.01-1

Fix For MCA ssoofftt__pprreesseett Mode
     Previously, when counting to a monitor preset with an MCA in ""ssoofftt__pprreesseett""
     mode, the MCA would not stop at the end of the count period.  Now, when
     counting to monitor, the MCA is started and stopped via software commands
     just as if ""ssoofftt__pprreesseett"" mode was disabled.

Fix For Several Timers
     A missing bit of C code that would halt all counters and acquisition
     devices when an EPICS, SCIPE, ESRF CAEN 560 or MURR timer stopped has been
     added.  Previously, although the counters associated with the particular
     timer would be stopped, unrelated counters were not.

New mmccaa__ppaarr(()) Options
     New ""cchhaannss"" and ""mmaaxx__cchhaannss"" options to mmccaa__ppaarr(()) return the current number
     of channels and the maximum number of channels available, respectively.

October 2, 2001 - RELEASE 5.01.01

Modifications and Fixes For User-Level Serial Access
     The user-level generic access to RS-232C devices through the functions
     sseerr__ggeett(()), sseerr__ppuutt(()) and sseerr__ppaarr(()) has been modified and enhanced.  The
     sseerr__ggeett(()) function can now take a data-array argument, which allows reading
     binary data, including null bytes.  All forms of sseerr__ggeett(()) now use the
     current ""ttiimmeeoouutt"" value, which defaults to two seconds, but can be modified
     with sseerr__ppaarr(()).  Previously, sseerr__ggeett(()) with just the device address
     argument would not timeout.  Also, leftover characters (up to 512) from a
     sseerr__ggeett(()) that has been satisfied with a byte count or an end-of-string
     match are now retained for the next sseerr__ggeett(()).  There is a new ""fflluusshh""
     option to sseerr__ppaarr(()) to flush any buffered characters.  See the _s_e_r_i_a_l help
     file for details.

Enhancements For User-Level GPIB Access
     The ggppiibb__ggeett(()) function can now take a data-array argument, which allows
     reading binary data, including null bytes.  See the _g_p_i_b help file for
     details.

Preliminary Support For Physik Instrumente C-860
     Preliminary support for the Physik Instrumente C-860 ""MMeerrccuurryy"" single axis
     DC-motor controller is included.  Several of these controllers can be
     daisy-chained over an RS-232C interface.

Data Array Enhancements
     Previous restrictions on the usage of the string-array data type have been
     removed.  In most situations, a string array is handled the same as a byte
     array.  Exceptions to that rule include the treatment of string arrays by
     the pprriinntt command, where the arrays are written as strings rather than a
     list of numbers, and the ssssccaannff(()) function, where a scanned number can be
     stored as a string in a string array.  Most functions that accept strings
     as arguments will now also accept a single row of a string array.

     Also, the ""rrooww__wwiissee"" and ""ccooll__wwiissee"" arguments to aarrrraayy__oopp(()) now return the
     correct values for arrays where the mode hasn't been set explicitly.

Hardware Locking Fixed On Solaris and HP Platforms
     Hardware locking now works again on Solaris and HP platforms.  It had been
     ineffective on those platforms since release 4.04.01 about three years ago.

iinnppuutt((--11)) Bug On Solaris Platforms Fixed
     An old bug, where the iinnppuutt((--11)) function didn't work correctly on Solaris
     platforms (the function returned the EOF character, rather than 0 if no
     input was available), has been fixed.

rrddeeff Of Macro Function Bug Fixed
     A bug, where using rrddeeff to define a macro function that has no arguments
     resulted in an ordinary macro being created, has been fixed.

ccpplloott__pplloott Macro Update For Release 5
     An oversight, where the ccpplloott__pplloott macro didn't work correctly with the new
     data-array based plotting macros in ssppeecc release 5, has been corrected.

PCI Detection Bug Fixed
     A bug, where ssppeecc would not find the last PCI card in a LLiinnuuxx system, has
     been fixed.

Debugging Bug Fixed
     A bug in the run-time context debugging display (level 0x40000), which
     could sometimes produce a segmentation fault, has been fixed.

Overhaul Of Alternate SBS (Bit3) VME Support
     The release of the SBS (Bit3) LLiinnuuxx driver model 1003 v1.0 for the
     616/617/618 PCI-VME adapters has made the CSS kernel-level driver bbiitt33..cc
     obsolete.  However, at this time the SBS model 1003 driver is not ported to
     LLiinnuuxx 2.4 kernels, such as are installed with Red Hat 7.1 LLiinnuuxx.  Rather
     than update the old CSS bbiitt33..cc driver, ssppeecc now offers support for the SBS
     PCI cards using user-level code only, independent of kernel version.  The
     new code allows access to any part of the A32 address space, unlike the old
     CSS driver-based code, which had to be configured to use a particular 4
     Mbyte window.  The CSS user-level code is adequate for register-based VME
     devices such as the OMS motor controllers and the Joerger scalers, but does
     not support DMA transfers.  The old CSS bbiitt33 driver and the //ddeevv//bbiitt33
     device node can be eliminated from the system when this new release of ssppeecc
     is installed.

ZZ--AAxxiiss Code Updated
     The zz--aaxxiiss geometry code has been updated to use the current conventions.
     Among other changes, singularities in the calculations and other errors no
     longer cause the code to reset to command level.  Instead, the ccaallcc(())
     functions (included in the definitions of ccaallccAA and ccaallccHHKKLL) return nonzero
     when there is an error.  In addition, there are now cut-point parameters
     for each geometry motor.

changes                      spec 5.00 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 5.00

September 4, 2001 - RELEASE 5.00.04-8

DAC-Motor Bug Fix
     A bug introduced with ssppeecc release 5 that caused a segmentation fault when
     DAC motors were configured has been fixed.

August 15, 2001 - RELEASE 5.00.04-7

Support for Mclennan PM600 Motor Controller
     This ssppeecc release includes preliminary support for the Mclennan PM600 motor
     controller.

August 14, 2001 - RELEASE 5.00.04-6

Fix For SBS (Bit 3) VME On LLiinnuuxx
     A problem, where an unexpected new ""ffeeaattuurree"" in the revision 1.0 SBS Model
     1003 driver for LLiinnuuxx prevented ssppeecc from working properly with A32 devices
     has been fixed.

August 7, 2001 - RELEASE 5.00.04-5

Revised ffiivveecc and ssiixxcc Geometry Code
     The ssiixxcc geometry code has been revised to use the current ssppeecc conventions
     of returning an error rather than resetting to command level when a
     calculation fails.  Also, cut points are now available for all geometry
     motors.  The ffiivveecc geometry code has been revised quite a bit to use
     algebra equivalent to that used in the ssiixxcc calculations.  The revisions do
     appear to affect the angles calculated for the motors, which brings in to
     question whether the previous calculations were completely correct.  Also,
     the ffiivveecc implementation now allows two mirror-image configurations, just
     as in the ssiixxcc implementation.  The sseettccoonnffiigg macro selects the
     configuration.

Now possible To Use NI ENET-GPIB With GPIB PC Cards
     It is now possible to use the National Instruments ENET-GPIB simultaneously
     with the NI AT-GPIB and/or PCI-GPIB cards.  The method involves a bit of a
     hack to get around the name-space conflict that otherwise occurs.  See the
     new mmaakkeeCCIIBB file in the ssppeecc distribution for hacking details.

July 31, 2001 - RELEASE 5.00.04-4

Fixes For EPICS MCA Record Support
     CSS's first opportunity for testing the three-year-old ssppeecc support for the
     EPICS MCA record with real hardware revealed several coding bugs, which are
     now fixed.  CSS looks forward to comments from any users of this code.

July 29, 2001 - RELEASE 5.00.04-3

Support For Mclennan PM381 Multiplexor
     This ssppeecc release includes preliminary support for the Mclennan PM381
     multiplexor.  When the user requests moves by multiple motors connected to
     the multiplexor, ssppeecc automatically sends commands to move each motor in
     turn.

July 26, 2001 - RELEASE 5.00.04-2

SBS (Bit 3) VME On LLiinnuuxx Requires New SBS Driver
     This release of ssppeecc requires the new revision 1.0 of the SBS Model 1003
     (non-beta) driver when using the SBS Models 616, 617, 618 and 620
     PCI-to-VME adapters.  The earlier beta releases of the driver are
     incompatible with the new driver.

SBS (Bit 3) VME Support Updated
     ssppeecc's support for the SBS (Bit 3) VME drivers and adapters for Sun, HP and
     Linux platforms has been updated.

eeddccoonnff Update
     The eeddccoonnff configuration editor now asks for confirmation when inserting a
     motor using the ii command.

Fix For Kappa-Mode wwhh Display
     A bug in the ffoouurrcc and ffiivveecc kappa-mode geometries, where the motors
     displayed with wwhh and similar macros showed non-geometry motors under
     certain conditions, has been fixed.

July 19, 2001 - RELEASE 5.00.04-1

Internal Updates
     This release includes internal code reorganization that should have no
     impact on function or behavior.

June 24, 2001 - RELEASE 5.00.04

String Array Enhancements
     The functions aarrrraayy__pplloott(()), aarrrraayy__ppiippee(()) and aarrrraayy__dduummpp(()) can now take
     string-type data arrays as arguments.  For these functions, each byte of
     the string array will be treated as a signed eight-bit integer.  Also, the
     pprriinntt command now translates unprintable bytes in a string-type data array
     to backslash-escaped strings.  Previously, the raw bytes were output, which
     could corrupt the text display.

Kappa Support Added To ffiivveecc Geometry
     The five-circle geometry (ffiivveecc) now includes support for the kkaappppaa
     configuration of the diffractometer.  The implementation is similar to the
     kkaappppaa variations for the ffoouurrcc and ppssiicc geometries.

New Option For eeppiiccss__ggeett(())
     The eeppiiccss__ggeett(()) function can now take an optional third argument to specify
     the number of elements to read into the array named by the second argument.
     Previously, if the second argument was an array, and the EPICS process
     variable was an array type, ssppeecc would transfer the entire array.

Consistency Fix For ppssiicc Macros
     The order of the geometry motor arguments for the ccuuttss macro had the nnuu and
     mmuu motors in reverse order from the convention used elsewhere in the ppssiicc
     macros.  The order is now consistently nnuu, then mmuu.

Small Fix For Energy Macros
     The code in the eenneerrggyy..mmaacc macros has been changed to be more precise with
     respect to decoding the monochromator type from the motor mnemonics.
     Previously, having both a mmoonnoo and mmoonnuu mnemonic with a single-motor
     monochromator would cause errors.

Support For Mclennan PM301 Motor Controllers
     This ssppeecc release includes preliminary support for the Mclennan PM301 motor
     controller.

Fix For XIA DXP Real-Time Value
     This version corrects an error in the recently added support for the XIA
     DXP 4C2X module.  The factor-of-two error in the values returned for the
     ""rreeaall"" and ""ddeeaadd"" arguments to the mmccaa__ppaarr(()) function has been fixed.

Bug Fix For Multiple OMS PCI Cards
     A bug in the new code to support the OMS PCI motor controller card, where
     only one card could be detected, has been fixed.

June 1, 2001 - RELEASE 5.00.03-4

Retry Added For NI GPIB "Not CIC" Error
     ssppeecc will now automatically perform one retry of operations which were
     unsuccessful due to a ""nnoott CCIICC"" (not controller-in-charge) error for
     National Instruments GPIB controllers.  These errors occur mainly when a
     second process initializes a connection to the GPIB-ENET (ethernet)
     controller.  Previous behavior on this error was for functions such as
     ggppiibb__ggeett(()) or ggppiibb__ppuutt(()) to return -1 on the first try after getting a ""nnoott
     CCIICC"" error.

Several Memory Errors Fixed
     Several minor memory access errors uncovered using third-party memory
     consistency testing software have been fixed.  These errors are not known
     to be associated with any observed ssppeecc failures.  The memory access
     problems occurred during initialization of the data group storage, display
     of help files, removal of ccddeeff-type macros and initialization of the VDL
     ESRF counter parameters saved in the state file.

Fix For Help Pager Options
     An error, where the command line the standard macros assigned to the PPAAGGEERR
     variable previously included the --ww flag for versions of the lleessss utility
     greater than 337, has been corrected.  That option caused the first line of
     text after a scroll or new page to be highlighted.

ESRF CCD Updates
     This release includes updates to the ESRF CCD support

May 17, 2001 - RELEASE 5.00.03-3

Bug Fix For Associative Array Scope Declarations
     A bug, where in a scope statement such as

        gglloobbaall  tt11[[]],, tt22[[]],, tt33[[]]

     that has a list of names that explicitly designates associative array type
     and only the last name in the series would be made global, has been fixed.
     The bug also affected such a list following the llooccaall keyword.

May 16, 2001 - RELEASE 5.00.03-2

Bug Fix For eevvaall(()) Execution
     A bug with the evaluation of the commands in an eevvaall(()) string has been
     fixed.  The problem occurred in the case where the eevvaall(()) argument
     contained a curly-bracket delimited statement block that included a macro
     function that did not use an explicit rreettuurrnn.  If that macro function was
     followed by additional statements in the statement block, those subsequent
     statements didn't get executed.

Bug Fix For eevvaall(()) Return Values
     A bug with the return value of the eevvaall(()) function has been fixed.  In the
     case where the eevvaall(()) argument was a macro function, eevvaall(()) did not return
     the macro function return value.

Bug Fix For Long Strings
     A bug in the ssppeecc release 5 rewritten lexical analyzer, where input strings
     longer than 8K (such as a very long macro definition) might cause a
     segmentation fault, has been fixed.

Bug Fix For pprrddeeff Of Long Macros
     A bug from release 5.00.03, where pprrddeeff with a macro larger than 8K would
     cause a segmentation fault, has been fixed.

Bug Fix For OMS PC58
     A bug, where the ccoonnffiigg file information for the Oregon Micro Systems model
     PC58 motor controller could not be read, has been fixed.

Bug Fix For ACS SPI-8 Fix
     The fix in ssppeecc release 4.05.10-9 to send the command to enable limit
     switches had the wrong start character in the command string.  The correct
     start character is now sent.

May 8, 2001 - RELEASE 5.00.03-1

Initial Support For Delta-Tau PMAC Motor Controller
     This release of ssppeecc contains preliminary support for the Delta-Tau PMAC
     motor controller.

More Fixes For ACS SPI-8
     The code for the Advanced Control Systems SPI-8 motor controller does
     better checking on whether replies from the controller are formatted
     properly.  ssppeecc also now has a provision for adding small delays during
     communication with the controller using the mmoottoorr__ppaarr(()) function.  The
     commands ""mmddeellaayy"", ""wwddeellaayy"" and ""rrddeellaayy"" are used to set delays after
     sending the move command, before writing a message and before reading a
     reply, respectively.  The default value for ""mmddeellaayy"" is 0.1 sec, while the
     default values for ""wwddeellaayy"" and ""rrddeellaayy"" are zero.  The values for the
     delays apply to all motor channels associated with all SPI-8 controllers.

April 10, 2001 - RELEASE 5.00.03

New ggeettssvvaall(()) Function
     A new ggeettssvvaall(()) function is available.  This function has the same syntax
     as the existing ggeettvvaall(()), but unlike ggeettvvaall(()), which converts octal or
     hexadecimal input (number strings that begin with 0, 0x or 0X) to the
     corresponding decimal value, the ggeettssvvaall(()) function returns the literal
     string as entered.

Standard Macros Now Use ggeettssvvaall(()) Where Appropriate
     The standard macros have been modified to use the new ggeettssvvaall(()) function
     where appropriate, such as for entering file names.  Also, all instances of
     the obsolete ggeettvvaarr macro have been replaced with ggeettvvaall(()) or ggeettssvvaall(()).

New cclloonnee(()) Function
     A new function named cclloonnee(()) is available to duplicate an existing object.
     It currently only works for macros.  Also, currently a clone of a ccddeeff
     chained macro becomes an ordinary macro.  Usage is cclloonnee((ddeesstt,, ssrrcc))..

Fix For Signal Handling
     Signal handling in ssppeecc has undergone many changes over the history of the
     program, as the type of hardware has changed from mostly interrupt-driven
     to mainly polled, and also as the kernel system calls for handling signals
     have evolved.  Somewhere during these changes, the signal blocking ssppeecc did
     during certain critical code got broke.  In particular, typing a ^^CC to
     abort motors with some GPIB motor controllers would cause the controller to
     hang.  This version restores proper signal blocking and the problems with
     ^^CC should be improved.

Fix For Single Array Element In Binary Array Operations
     When two data arrays of different dimension are subject to a binary
     operator, ssppeecc performs the operation on the elements the arrays have in
     common.  That has been true even when one of the arrays was only a single
     element.  With this release, an array or subarray of only one element is
     treated as a scaler when used with a binary operator and another array.

Release 4 State Files Readable
     This version of ssppeecc Release 5 can now handle state files from Release 4.
     Previous versions would force a fresh start.  A fresh start is normally
     recommended, though, in order to read in the new standard macro files.

Better Memory Accounting
     The memory accounting displayed with the mmeemmssttaatt command has been adjusted
     to better take into account the overhead used by the C library mmaalllloocc(())
     routines.  Note, though, ssppeecc still cannot account for every byte used as
     overhead by the C library functions, but this release does appear to do a
     better job at estimating.

Support for OMS PCIx Motor Controller
     ssppeecc now supports the Oregon Micro Systems PCIx motor controller.  Up to
     eight of these four-motor cards can be used with a PCI bus computer
     (currently on lliinnuuxx only).

Support For Oriel 18133
     ssppeecc now has a configuration option for the Oriel 18133 Encoder Mike
     Controllers over a PC board (ISA) interface.

Fix For ACS SPI-8
     The Advanced Control System SPI-8 motor controller has the limit switches
     disabled by default, and previously ssppeecc did not send a command to enable
     the limits.  ssppeecc now does send the LLEE command during hardware
     initialization to enable limits.  The mmoottoorr__ppaarr(()) option ""nnoolliimmiittss"" with
     argument of 0 or 1 will enable or disable limits, respectively, for a
     particular motor.

March 1, 2001 - RELEASE 5.00.02-4-BETA

New Version Of XIA DXP Vendor Code Required
     ssppeecc must now be linked with the new version of the XIA vendor libraries to
     use their DXP digital MCA CAMAC models.  However, both the older 4C and the
     newer 4C2X models are supported.  See the _d_x_p help file for details.

Preliminary Support For CAMAC Technoland C-KP 402 Counter
     Initial support for the Techonoland Model C-KP-402 fast 8-channel 48-bit
     CAMAC counter module is included in this ssppeecc release.

February 21, 2001 - RELEASE 5.00.02-3-BETA

Old Bug with ESRF TACO MAXE Fixed
     An old bug in the code for the ESRF TACO MAXE device server, where a
     DEVFAULT state in the server would cause ssppeecc to core dump or exhibit other
     anomalous behavior, has been fixed.

MURR Motor Controller Support Expanded
     The code to support the motor controllers built and used at the University
     of Missouri Research Reactor (MURR) has been updated to work with very old
     versions of the motor controller (prior to firmware release 2.30).

February 16, 2001 - RELEASE 5.00.02-2-BETA

Renamed Global Symbol In pplloottaarrrraayy..mmaacc
     The ""llaasstt--ddaattaa--ppooiinntt"" symbol in the macro file pplloottaarrrraayy..mmaacc is back to
     being named LLDDTT from its short-lived name LLDDPP.  This change is to avoid
     headaches at ESRF, where the symbol has been named LLDDTT for the last several
     years.  This value of this symbol is the index of the current data point of
     the current scan in the scan data array SSCCAANN__DD.  See the pplloottaarrrraayy..mmaacc file
     for details.

February 13, 2001 - RELEASE 5.00.02-1-BETA

Sub-Array Fix For VME and Image Functions
     ssppeecc now handles all sub-arrays properly for the vvmmee__mmoovvee(()), iimmaaggee__ggeett(())
     and iimmaaggee__ppuutt(()) built-in functions.  Previously, certain subarrys, such as
     a complete row that wasn't the first row, would be interpreted as the first
     row.

Crash On Usage Errors Fixed
     A bug in the initial Release 5 distribution, where using the wrong number
     of arguments in a built-in ssppeecc function resulted in a segmentation fault
     rather than a usage message, has been fixed.

Fix For Updating Accelerations Parameters
     An old bug, where ssppeecc did not send a new acceleration parameter to a motor
     controller when the motor speed was changed using mmoottoorr__ppaarr(()) for motor
     controllers where the acceleration parameter is a function of the motor
     speed, has been fixed.

Fix For ACS SPI-8 Motor Controller
     A bug, where the acceleration parameter sent to the Advanced Control System
     Model SPI-8 motor controller was not calculated correctly, has been fixed.

Delays Available For MM-3000 Motor Controller
     The mmoottoorr__ppaarr(()) options ""wwddeellaayy"" and ""rrddeellaayy"" are now available for the
     Newport MM-3000 motor controllers.  The values for each specify delay times
     to insert before sending and reading messages, respectively.  Presently,
     they are only used with the GPIB interface.  On fast PCs, the communication
     is too fast for the motor controller to keep up.

RELEASE 5

     Welcome to the first installment of ssppeecc Release 5.  Most of the
     modifications for this first release are internal and won't be visible to
     the user.  These changes are to accommodate new features - most are still
     under development, though.  Some of the changes, however, are currently
     usable.

     One powerful new feature now available is the eevvaall(()) function.  This
     function parses and executes its string argument, and can be used within an
     executing statement block.  Calls of eevvaall(()) can even be nested.  This
     function opens up many possibilities for new and interesting macros.

     One feature for which the ground work has been laid, but is not quite ready
     for general use, is the built-in PPyytthhoonn interpreter.  PPyytthhoonn is an
     interpretive language with a relatively clean syntax and many capabilities,
     including some that should eventually allow ssppeecc to work with a tightly
     coupled graphic user interface (for those users who want such a thing).
     See _w_w_w_._p_y_t_h_o_n_._o_r_g for Python information.

     Another feature still in the works is ssppeecc server mode.  This mode of
     operation will allow ssppeecc to function as a pure hardware controller, with
     other instances of ssppeecc or other software programs running as clients.

February 1, 2001 - RELEASE 5.00.02-Beta

INTRODUCTION
New eevvaall(()) Function
     The new eevvaall(()) function takes as argument a string which contains input for
     the ssppeecc parser.  The string is parsed and executed.  If the string is an
     expression, its value is returned.  If the string is a statement or
     statement list, ttrruuee (nonzero) is returned if there were no errors
     executing the statement(s) and ffaallssee (zero) is returned if there was an
     error.  Note, errors encountered during execution of the eevvaall(()) string do
     not reset ssppeecc to the command level.  Instead, the errors simply cause
     eevvaall(()) to return an error, allowing execution of the calling statement
     block to continue.

Switch To C-Library mmaalllloocc(())
     ssppeecc continually allocates and frees memory - usually in small amounts -
     while collecting and parsing input and while executing commands.
     Historically, ssppeecc used its own memory allocation routine, as early C
     library implementations would lead to excessive memory fragmentation.  The
     C library allocation routines are much better these days (particularly, the
     GNU mmaalllloocc(()) routines), and release 5 of ssppeecc now uses those.

     As a result of the switch in memory allocation, the format of the
     information printed by the mmeemmssttaatt built-in command has changed.  ssppeecc
     still keeps track of how it is allocating memory in categories such as
     parse tree, symbols, macros, etc., but the total allocation statistics are
     now obtained from the C library.  In particular, a ""nnoott ttrraacckkeedd"" value
     counts memory allocated by non-ssppeecc code linked with ssppeecc, such as C
     library functions or other vendor libraries.

     On lliinnuuxx platforms, the C library memory allocation has the great advantage
     that requests for big chunks of memory are allocated using the mmmmaapp(())
     system call, which allows the memory to be returned the operating system
     when freed.  Normally, programs only grow in size and can't return memory.

No More lleexx
     The lexical analyzer portion of ssppeecc has been coded directly in C to remove
     ssppeecc's dependence on the original UNIX lleexx utility, and to provide greater
     flexibility for future code development.  Users shouldn't notice any
     difference in behavior.

Using Modified yyaacccc Parser
     ssppeecc is now using a customized version of the yyaacccc parser generator to
     generate a reentrant parser to accommodate a threaded version of ssppeecc.
     Users shouldn't notice any difference in standard behavior.

ffoouurrcc and kkaappppaa Geometries Combined and Revised
     Several changes have been made to the organization and behavior of the
     four-circle and kappa geometry code.  First, the kappa-geometry C code and
     macros have been merged with the four-circle code and macros.  Second,
     errors in the calculations now cause the calling ccaallcc(()) functions to return
     an error value of -1 rather than resetting to command level.  Third, cut
     points have been introduced for all the motors associated with the
     diffractometer.  Finally, a variation of the four circle manufactured by
     Picker (model 3645, perhaps others) where the motions of the cchhii and pphhii
     motors are mechanically linked, is available.  See the ggeeoo__ffoouurrcc..cc file for
     details.

Memory Fix For Nested and Recursive Macro Functions
     A problem with unbounded memory growth with nested and recursive macro
     functions has been fixed.

Array Plot Macros Now the Default
     Although the file mmaaccrrooss//pplloottaarrrraayy..mmaacc, which contains new versions of the
     plotting macros, has been included with the ssppeecc distribution for more than
     a year, not until this release have those macros been installed as the
     default plotting macros.  These new macros define all the standard plotting
     macros to use data arrays rather than data groups for storing and plotting
     data.  There should be no problems using these macros with the standard
     scan macros, but users who have developed local macros with direct
     manipulation of data groups may need to make some changes.  If that proves
     difficult, the old plotting macros that use data groups are included in
     mmaaccrrooss//pplloott..mmaacc, and can be used instead.

changes                      spec 4.05 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 4.05

RELEASE 4.05.10-4

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.10-4 as of November 6, 2000.

PCA-3/PCA-Multiport MCS-Mode Fix
     A bug, dating from the original 1993 version of the code, where the
     number-of-passes preset in multi-channel scaling (MCS) mode was not set
     correctly, has been fixed.

RELEASE 4.05.10-3

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.10-3 as of October 29, 2000.

New Home Option For cchhgg__ddiiaall(())
     The cchhgg__ddiiaall(()) function for motors now takes an optional third argument
     when used with the home-search options.  If present, the value of the third
     argument is used to set the motor's dial position when the home or limit
     position is reached.  (A home-search is initiated on motors that support
     them when the second argument to cchhgg__ddiiaall(()) is ""hhoommee"", ""hhoommee++"", ""hhoommee--"",
     ""lliimm++"" or ""lliimm--"".)  The hhoommee macro now also takes an optional third
     argument, which, if present, is the dial position to use with cchhgg__ddiiaall(()).

Home Commands Implmented For OMS Controllers
     ssppeecc now implements home commands for the Oregon Microsystems motor
     controllers.  See the _o_m_s help file for details.

RELEASE 4.05.10-2

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.10-2 as of October 25, 2000.

New Binary Output Options For sseerr__ppuutt(()) and ggppiibb__ppuutt(())
     The sseerr__ppuutt(()) and ggppiibb__ppuutt(()) functions can now take a data array as the
     second argument.  The binary values in the array will be output.  By
     default, the entire array (or subarray, if specified) will be sent.  An
     optional third argument can be used to specify the number of array elements
     to send.  For short and long integer arrays, the data will be sent using
     native byte order.  The ""sswwaapp"" option of the aarrrraayy__oopp(()) function can be
     used to change the byte order, if necessary.  For the typical string-valued
     second arguments, an optional third argument would specify how many bytes
     to write.

New String-To-Data-Array Assignment Implemented
     It is now possible to assign strings to any type of data array.  The ASCII
     value of each character in the string is assigned to successive elements of
     the array.  Only as many characters of the string as will fit in one row of
     the array will be assigned.  The null byte at the end of the string is not
     assigned.

New Options For iimmaaggee__ppaarr(()) and Fix For iimmaaggee__ggeett(())
     Three new options are available for iimmaaggee__ppaarr(()).  The ""iinnffoo"" option prints
     the native data type, the number of rows and columns, the current binning
     values and the current region-of-interest values.  The ""bbiinn"" option can be
     used to set row- and column-binning to the same value.  When used to get a
     value, it returns the current binning if row- and column-binning are the
     same, or -1 if they are different.  The ""rrooii"" option can be used to set all
     four region-of-interest values in one call.  The values should be given in
     the order:  beginning row, ending row, beginning column, ending column.
     Also, an oversight in the code for iimmaaggee__ggeett(()) that prevented sub-array
     arguments to work properly has been remedied.

Small Problem Fixed For Ortec Counters
     A problem with the Ortec NIM-bin counters, where the ""ddiissppllaayy"" option of
     ccoouunntteerr__ppaarr(()) (used to read the number of the channel being displayed)
     could cause a segmentation fault when used with certain versions of the
     National Instrument GPIB driver, has been corrected.

RELEASE 4.05.10-1

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.10-1 as of September 28, 2000.

Fix To Restore Tty State When ssppeecc Is Killed
     If ssppeecc is linked with the rreeaaddlliinnee library, then the rreeaaddlliinnee input
     routine changes the tty modes, including turning off echo.  Previously,
     ssppeecc did not restore the tty state changed by rreeaaddlliinnee when killed via a
     SSIIGGQQUUIITT or SSIIGGTTEERRMM signal sent by another process.  That problem has been
     fixed.

More Multiplexors Allowed With CAMAC E500 Motor Controller
     Support for the homemade multiplexor used with the CAMAC E500 motor
     controllers has been modified to allow up to three of the 16-motor
     multiplexors to be run from the same E500 channel.  Contact CSS for
     details.

RELEASE 4.05.10

     These notes summarize the cumulative changes made for ssppeecc release 4.05.10
     as of September 27, 2000.

Support For Burleigh 6200ULN Inchworm Controller
     The Burleigh 6200ULN Inchworm motor controller is now supported over the
     Burleigh 671 ISA PC-card interface.  See the _b_u_r_l_e_i_g_h help file for
     details.

New eemm__iioo(()) Function For SPring-8
     The new built-in function eemm__iioo(()) is available when ssppeecc is linked with the
     SPring-8 EEqquuiippmmeenntt MMaannaaggeerr RPC-based hardware support.  See the new
     _e_q_u_i_p_m_a_n help file for details.

Support For NI GPIB-ENET on LLiinnuuxx
     ssppeecc now supports configuration of the National Instruments GPIB-ENET
     hardware on The NI software and the LLiinnuuxx system must first be configured
     correctly.  ssppeecc must also be linked with the cciibb..oo file included with the
     NI distribution.

Support For FAST ComTec MCD/PC Board MCA
     Initial support for the FAST ComTec MCD/PC Board MCA is now included with
     ssppeecc.  The MCA communicates using a PC parallel port.

Bug Fix For Rigaku Controllers
     A bug in the code for the Rigaku RINT-2000 motor controllers, where moves
     of the AC/DC motors used to control the sample changers, slits, etc.,
     caused problems such as read timeouts on subsequent commands, has been
     fixed.

RELEASE 4.05.09-6

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.09-6 as of August 27, 2000.

New Calculations For kkaappppaa and ppssiicc Geometries
     A ccaallcc(()) function is now available in the kkaappppaa and ppssiicc geometries to
     calculate pseudomotor positions from real motor positions and vice versa.
     The macro ccaallccPP__ffrroommRR is defined as ccaallcc((88,, 00)) and fills in the pseudomotor
     positions AA[[]] array with angles calculated from the real motors values in
     AA[[]].  The macro ccaallccRR__ffrroommPP is defined as ccaallcc((88,, 11)) and calculates real
     motor positions from the pseudomotor positions.

New Error Behavior For kkaappppaa Geometry
     The kkaappppaa geometry code has been revised to no longer return to the main
     prompt in the event of an error associated with the reciprocal space
     calculations.  Instead, the ccaallcc(()) functions underlying the definitions of
     ccaallccHHKKLL, ccaallccAA, etc., return a nonzero value on errors.  The code for the
     other geometries will be modified similarly in the near future.

RELEASE 4.05.09-5

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.09-5 as of August 6, 2000.

Support For the JVL Motor Controller
     The JVL Industri Elektronik (Denmark) Model SMI20-B stepper motor indexer
     is now supported.

Tsuji Motor Controller Support Expanded
     ssppeecc now supports the Tsuji Electronics (Japan) new model PM16C-04 motor
     controller.  In addition, the ethernet interface, available on both the -02
     and -04 models, is now also supported (in addition to the already supported
     GPIB and RS-232C interfaces).

Phytron Motor Controller Initialization Changed
     ssppeecc now uses a more robust scheme for insuring the Phytron parameters are
     set correctly.

RELEASE 4.05.09-4

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.09-4 as of July 6, 2000.

Old eeddccoonnff Bug Fixed
     An old and rarely seen bug that caused the configuration editor eeddccoonnff to
     core dump upon failure of a terminal data-base library call has been fixed.

RELEASE 4.05.09-3

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.09-3 as of July 5, 2000.

New Option For Motor sslloopp Parameter
     Normally, if the optional motor parameter sslloopp is set, ssppeecc silently
     resolves discrepancies between the hardware motor reading and ssppeecc in favor
     of the hardware.  Now, if the sslloopp parameter is set to a negative number of
     steps, ssppeecc resolves discrepancies smaller than the absolute number of
     steps in favor of ssppeecc's position by modifying the hardware position
     register.

RELEASE 4.05.09-2

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.09-2 as of June 16, 2000.

Internal Bookkeeping Bug Fixed With aarrrraayy__oopp((""sswwaapp""))
     An old bug where twenty calls of aarrrraayy__oopp(()) with the ""sswwaapp"" argument within
     the same statement block would result in an ""OOuutt ooff tteemmppoorraarryy cceellllss""
     message has been fixed.

RELEASE 4.05.09-1

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.09-1 as of June 13, 2000.

Compumotor SX Controller Support Updated
     The ssppeecc code for the Compumotor SX Indexer has been updated to work
     properly with encoderless motor configurations.

RELEASE 4.05.09

     These notes summarize the cumulative changes made for ssppeecc release 4.05.09
     as of June 7, 2000.

The ggppiibb__ggeett(()) Function Can Read More
     The ggppiibb__ggeett(()) function can now read up to 8,192 bytes.  The previous limit
     was 512 bytes.

Associative Arrays Can Now Be Assigned
     ssppeecc now allows associative arrays to be assigned to and to be returned by
     macro functions.  When an existing associative array is assigned to, all
     previous elements of the array are deleted.

The ddccbb(()) Function Is Upgraded To 32 Bits
     The little-used ddccbb(()) function that returns the decimal equivalent of its
     binary-coded-decimal argument now handles 32-bit arguments.  Prior behavior
     was to limit arguments to 24 bits, dating from the old CAMAC days.

ESRF CCD Support Updated
     This ssppeecc release includes the current ESRF CCD camera built-in support.

RELEASE 4.05.08-7

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.08-7 as of May 10, 2000.

New ccddeeff'ed uusseerr__FFhheeaaddeerr and uusseerr__PPhheeaaddeerr Macros
     New macros called uusseerr__FFhheeaaddeerr and uusseerr__PPhheeaaddeerr are included in the
     standard __hheeaadd macro.  They are designed as hooks for users to insert
     commands to print to the data file and printer, respectively.  Unlike the
     traditional FFhheeaaddeerr and PPhheeaaddeerr macros, these new macros are to be
     maintained using the chained-macro function ccddeeff(()), so that portions of the
     definitions can be selectively added and removed.

Motor and Counter Mnemonics Checked
     Previously, neither the ssppeecc executable nor the eeddccoonnff hardware
     configuration editor checked whether motor and counter mnemonics contained
     disallowed characters.  Mnemonics containing disallowed characters are now
     rejected.

NT-2400 Bug Fix
     An old bug in the code for the LEC NT-2400 motor controller, where the
     ccoonnffiigg file backlash parameter was used as the base-rate parameter, has
     been fixed.

New Command to Set DXP Gate Behavior
     The external gate on the the XIA DXP modules can now be enabled.  See the
     _d_x_p help file for details.

Sleeping Message Cleared in do_sleep
     The ddoo__sslleeeepp macro now clears the last ""SSlleeeeppiinngg 11"" message from the screen
     after the sleep has finished.

RELEASE 4.05.08-6

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.08-6 as of April 19, 2000.

PPAAGGEERR Detection Fixed (Again)
     Another bug that prevented proper detection of the version of lleessss and
     subsequent assignment of the proper string to the PPAAGGEERR variable has been
     fixed.  Symptoms appeared on platforms with version 332 or earlier of the
     lleessss utility.

RELEASE 4.05.08-5

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.08-5 as of April 15, 2000.

Minor Improvements For ssoocckk__iioo(())
     ssppeecc now sets the SSOO__KKEEEEPPAALLIIVVEE socket option on all sockets created by
     ssoocckk__iioo(()).  Also, the host name part of the hhoossttnnaammee::ppoorrtt argument no
     longer has to be an actual host name for a socket opened in ""lliisstteenn"" mode.
     The host name part can now be any string and is used only to identify the
     connection for subsequent ssoocckk__iioo(()) calls.  Also, for sockets opened in
     ""lliisstteenn"" mode, ssppeecc now sets the SSOO__RREEUUSSEEAADDDDRR socket option, which does
     away with the several minute delay often observed to be needed before a
     socket could be reopened for listening after a ssppeecc restart.

RELEASE 4.05.08-4

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.08-4 as of April 13, 2000.

Fixes For Multiple VME Controllers
     On-site testing revealed a few minor bugs that prevented a second VME
     controller from completely working correctly.  Those bugs have been fixed.

RELEASE 4.05.08-3

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.08-3 as of April 3, 2000.

Local Associative Array Bug Fixed
     A problem with local associative arrays declared within macro functions
     that are called more than once within a statement block has been fixed.
     Previously, the commands pprriinntt, ffoorr ((vvaarr iinn aarrrr)) and iiff ((vvaarr iinn aarrrr)) would
     show any associative array elements previously referred to in prior calls
     to the macro during execution of the surrounding statement blocks.
     Although the elements shouldn't have been recalled at all, they would be
     recalled with a number value of zero, or a string value of the null string.
     Now any previously used array elements will not be included in the array
     commands above, unless, of course, they have been set within the current
     macro function invocation.

ssoocckk__iioo(()) Bug Fixed
     A bug introduced in ssppeecc release 4.05.05, where the implicit newline
     end-of-string character was often not recognized during a ssoocckk__iioo(()) ""rreeaadd"",
     has been fixed.

POLL Option For Software Timer For Buggy Sun
     The software timer on Solaris platforms in ssppeecc versions built using
     threads has a new implementation to work around operating system bugs.  The
     software timer can now be configured as IINNTTRR or PPOOLLLL mode in the
     configuration editor.  When in IINNTTRR mode on Solaris with threads, only
     integral counts times are allowed.  In PPOOLLLL mode, any count time is
     allowed, but accuracy in count times is sacrificed.  Note, PPOOLLLL mode can be
     selected on any platform, but should not be, due to the accuracy problem.

Small eeddccoonnff Bug Fixed
     An old and insignificant bug in the configuration editor, where the display
     of the user position with non-zero offset did not update correctly on the
     screen when the step-size parameter was changed, has been fixed.

ESRF TACO MAXE Bug Fixed
     A small bug in the code for the ESRF TACO MAXE device server for motors
     with encoders, where the values were truncated rather than rounded to
     integers when converting from encoder reading to motor position, has been
     fixed.

RELEASE 4.05.08-2

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.08-2 as of March 30, 2000.

Support For SPring-8 EEqquuiippmmeenntt MMaannaaggeerr RPC-based Counters
     Prelimiary support for the counter/timers built and used at the SPring-8
     synchrotron in Japan is now included in ssppeecc.

RELEASE 4.05.08-1

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.08-1 as of March 17, 2000.

ssoocckk__iioo(()) Fix For HP Platform
     A bug, which prevented the ""lliisstteenn"" mode of the ssoocckk__iioo(()) function from
     working on HP platforms, has been fixed.

RELEASE 4.05.08

     These notes summarize the cumulative changes made for ssppeecc release 4.05.08
     as of March 9, 2000.

Fixed Some Old Input Parsing Problems
     A very old problem related to using a backslash \\ to continue a line or to
     escape a space or tab character on input has been fixed.  The problem only
     occurred when typing arguments to a macro, where the macro definition
     referred to the arguments by argument number ($$11, $$22, etc.).

ppssiicc Geometry Fixes
     Several more numerical problems in the calculations for certain ppssiicc
     geometry modes have been fixed.

Bit-3 LLiinnuuxx Drivers Now Supported
     ssppeecc now supports use of the SBS Bit-3 PCI-to-VME adapters on LLiinnuuxx using
     the drivers provided by SBS Bit-3.  Note, currently the SBS driver is known
     to work only on Red Hat 6.0 and 6.1 systems.

Phytron IXE-A Motor Controllers Supported
     The Phytron IXE-A motor controllers work very similarly to the IXE-C
     controllers that ssppeecc already supports.  However, the IXE-A controllers
     require a multiplier factor for time-related quantities, such as motor
     speed and acceleration.  ssppeecc now includes that factor.  The controller
     type is detected automatically from the version string returned by the
     instrument.

Home Search Added For Tsuji PMC-16C Controllers
     ssppeecc now supports home search on the Tsuji PMC-16C Motor controllers.

Recently Introduced OMS VME-58 Bug Fixed
     A bug, introduced in the recent VME modification for ssppeecc release 4.05.06-2
     and that made the Oregon Micro Systems VME-58 unusable, has been fixed.

RELEASE 4.05.07-1

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.07-1 as of February 25, 2000.

KS-3929 SCSI-To-CAMAC Now Supported On LLiinnuuxx
     The Kinetic Systems 3929 SCSI-to-CAMAC controller is now supported on LLiinnuuxx
     platforms.

Clarified Error Message With I/O Port Access
     Previously, if no I/O ports were configured, access with the ppoorrtt__ggeett(()) and
     ppoorrtt__ppuutt(()) functions would neither access the given port nor produce an
     error message.  ssppeecc now prints the missing error message.

RELEASE 4.05.07

     These notes summarize the cumulative changes made for ssppeecc release 4.05.07
     as of February 23, 2000.

wwiizz__ppaasssswwdd Improved
     The wwiizz__ppaasssswwdd utility, used to make changes to the ssppeecc__wwiizz password, now
     prints an error message and exits immediately if the user doesn't have
     permission to write the SSPPEECCDD//passwd file.  Also, the super user no longer
     needs to enter the current ssppeecc__wwiizz password in order to change it.

Warning In ggeetthheellpp(()) When PPAAGGEERR Is Bad
     If the program assigned to the PPAAGGEERR variable returns an error code, ssppeecc
     now prints an explanatory error message that suggests what the the user
     should do to view the ssppeecc help files.

LLiinnuuxx Drivers Adapted For Greater Range Of Kernel Versions
     The ssppeecc kernel-level drivers for LLiinnuuxx now compile and install on a wider
     range of kernel versions.  Note, for most installations, the LLiinnuuxx
     kernel-level drivers aren't required, as ssppeecc offers user-level support for
     the specific hardware involved.

Support For Compumotor AX Motor Controllers
     The old Compumotor AX motor controller is now supported.

Support For PMC Corporation DCX-100 Motor Controllers
     The PMC Corporation DCX-100 motor controllers are supported in a number of
     configurations as both PC boards and as RS-232C devices.  These boards are
     used as OEM components in motor controllers made by Dynaoptic Motion.

Support For Pacific Scientific MA-6420 Motor Controllers
     The Pacific Scientific model MA-6420 motor controller is now supported over
     the RS-232C interface.

Support For SCIPE Detectors
     The SCIPE detectors, as used at the APS DND CAT, are now supported.

RELEASE 4.05.06-3

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.06-3 as of February 4, 2000.

Bug In Presence Test For SBS Bit-3 On HP and Sun
     A bug, associated with the new feature which allows multiple VME
     controllers and that prevented ssppeecc from working with the SBS Bit-3 drivers
     on HP and Sun platforms, has been fixed.

Bug With Joerger VME Scaler Fixed
     Another bug, associated with the recent VME changes and that resulted in a
     segmentation fault when counting using the Joerger VSC16/8 VME scaler, has
     been fixed.

RELEASE 4.05.06-2

     These notes summarize the cumulative changes made for ssppeecc release
     4.05.06-2 as of January 18, 2000.

Bug In ssssccaannff(()) Function Fixed
     An old bug in ssppeecc's ssssccaannff(()) function, where the ""OOuutt ooff tteemmppoorraarryy cceellllss""
     error message would appear if too many data-array items were given as
     arguments, has been fixed.

RELEASE 4.05.06

     These notes summarize the cumulative changes made for ssppeecc release 4.05.06
     as of January 5, 2000.

Multiple VME Controllers Allowed
     It is now possible to have more than one VME controller in use
     simultaneously.  In the configuration editor, use ^F and ^B to display
     additional entries on the interfaces screen for the up-to-four controllers.
     The default controller is controller zero.  To specify VME addresses for
     motor controllers and counters that use the additional VME controllers,
     enter the address in the configuration as the controller number followed by
     a colon and the module address, as in 22::00xxffcc0000 for a module using VME
     controller number 2 at address 0xfc00.  For the user-level functions
     vvmmee__ggeett(()), vvmmee__ppuutt(()) and vvmmee__mmoovvee(()) use the same notation as above for
     entering the controller unit number.  Note, though, the address arguments
     will have to be passed as strings, as in vvmmee__ppuutt((""22::00xxFFEE0000"",, 00xx1122)).  Note
     also, the CSS bbiitt33..oo driver used on LLiinnuuxx systems still only supports one
     616/7/8 module.  CSS awaits the imminent release of the SBS Bit-3 driver
     for LLiinnuuxx, which will support multiple modules.

Support For the Orsim MCA 7700 Included
     Initial support for the Seiko EG&G Ortec model Orsim MCA 7700 is included
     with this release of ssppeecc.  Both the ethernet and GPIB interfaces on the
     MCA are supported.

Support For Meteor Frame Grabber On LLiinnuuxx Updated
     The support for the Matrox Meteor PCI frame grabber card has been improved.
     See the _m_e_t_e_o_r help file for details of the current functionality.

Updates For XIA DXP MCA CAMAC Modules
     The code for the XIA DXP MCA CAMAC modules has been updated.  ssppeecc now
     includes the XIA library functions in the ssppeecc distribution.  It is no
     longer necessary to enter the names of the XIA object files during
     installation.  Several bugs in the XIA library have been fixed, allowing
     new DXP configuration files to be loaded without restarting ssppeecc.  See the
     _d_x_p help file for information.

Presence Test For Jorway 73A Improved
     The presence test for the Jorway 73A SCSI-to-CAMAC module previously gave
     false positives.  That behavior has been corrected.

Workaround For EPICS Motor Record RREESS Not Posting
     Previously, ssppeecc had been monitoring the RREESS process variable, intending to
     handle motors with and without encoders in a simple way.  That was
     ineffective as changes to RREESS are in fact not posted by the EPICS motor
     record.  ssppeecc now instead monitors both MMRREESS and EERREESS and fetches the new
     RREESS value when either of the two change.

Typo In ppssiicc..ssrrcc Fixed
     The definitions for the FF__QQAAZZ and FF__NNAAZZ macros were reversed and have been
     corrected.

Old Bug With sslleeeepp(()) Fixed
     A bug, where the deprecated use of sslleeeepp(()) with a negative integer argument
     (for the number of clock ticks) resulted in a pause for the time specified
     by the argument, followed by a pause of random (perhaps very long)
     duration, has been fixed.  Use of negative arguments is still deprecated -
     use fractional arguments to specify sleep times of sub-second precision.

Bug With PPAAGGEERR Detection Fixed
     The check in the start-up command files that assigns a default value to the
     new PPAAGGEERR variable introduced in ssppeecc release 4.05.02 contained a number of
     errors, making the check useless.  The commands have been fixed.

Bug Fix For Wizard Mode
     A bug introduced in release 4.05.04, where the ssppeecc__ppaarr((""ssppeeccwwiizz"",, 11))
     function that prompts for the ssppeecc wizard password was broken, has been
     fixed.

Bug Fix For ccaa__ccnnttll(())
     A bug, where the ccaa__ccnnttll(()) function was completely ineffective in sending
     the ""iinniitt"" (or ""ZZ"") and ""cclleeaarr"" (or ""CC"") commands, has been fixed.  The bug
     has been present since ccaa__ccnnttll(()) was introduced in ssppeecc release 3.02.01
     (ca. 1995).

RELEASE 4.05.05

     These notes summarize the cumulative changes made for ssppeecc release 4.05.05
     as of November 8, 1999.

Number Of Motors Increased From 99 to 160
     The built-in limit on the number of configured motors has been increased
     from 99 to 160.  Note, this limit is not a fundamental constraint.  If
     there are sites that require more than 160, please contact CSS - the limit
     can be easily raised.  Eventually, the artificial limit on the number of
     motors will be removed altogether.

New EOS Option For Socket Reads
     The ""rreeaadd"" mode of the ssoocckk__iioo(()) function now accepts an optional
     end-of-string (EOS) argument.  If present, characters will be read from the
     socket until either characters that match the EOS arrive or the read
     timeout expires.  See the _s_o_c_k___i_o help file for details.

Minor Bug Fix For Riso ECB Controller
     A bug, where the message displayed on ECB-motor hardware errors was
     slightly garbled, has been fixed.

RELEASE 4.05.04

     These notes summarize the cumulative changes made for ssppeecc release 4.05.04
     as of October 14, 1999.

Contents of AA[[]] and SS[[]] Restored On Start Up
     The contents of the motor position array AA[[]] and scaler value array SS[[]] are
     now restored from the state file on start up, as was the case prior to
     release 4.04.01.

Debug Level Changes Can Take Effect Within Statement Blocks
     Values assigned to the debug variable DDEEBBUUGG now take affect immediately.
     Previously, the level of the debugging messages would only reflect changes
     to DDEEBBUUGG after a return to the main interactive prompt.

Better Input Processing While Reading Strings From Keyboard
     The character processing done when the keyboard is read for the iinnppuutt(()),
     yyeessnnoo(()) and ggeettvvaall(()) functions now handles the special erase, kill and EOF
     characters consistently, with both backspace and delete recognized as erase
     characters.

Raw Mode Turned Off On Exit
     ssppeecc now makes sure terminal rraaww mode is turned off when exiting.
     Previously, if ssppeecc exited via a qquuiitt or tteerrmmiinnaattee signal while still in
     raw mode (as from an iinnppuutt((00)) call), raw mode did not get turned off.

$$$$ Recognized As Documented
     The ssppeecc manual has long documented that $$$$ would produce a single $$ in a
     macro.  That behavior is now implemented.

Behavior Of FFRREESSHH Variable Modified
     The FFRREESSHH variable introduced in release 4.04.05 is still nonzero while
     reading the start-up command files and executing the start-up macros if
     ssppeecc is starting fresh, but its value is reset to zero before the first
     main interactive prompt.  That insures the start-up macro files that do
     initializations using iiff ((FFRREESSHH)) will not do the initializations (possibly
     resetting parameter values already modified by the user) if the macro files
     are read a second time.

Optional Type Argument For eeppiiccss__ggeett(())
     The EPICS-related function eeppiiccss__ggeett(()) can now take a second argument to
     specify what type of data to retrieve via channel access.  Such a feature
     may be useful when a number value for a process variable of type EENNUUMM is
     needed, as otherwise the string value is returned.  See the _e_p_i_c_s help file
     for details.

Generic Serial Device Support Through EPICS Available
     ssppeecc now supports the EPICS generic serial record.  Thus, the EPICS serial
     record can be selected for use with ssppeecc's generic sseerr__ggeett(()) and sseerr__ppuutt(())
     functions.  In addition, any motor controller, timer/counter, etc. which
     runs over a serial interface for which ssppeecc already has built-in code can
     be configured to use the EPICS generic serial record.

RELEASE 4.05.03

     These notes summarize the cumulative changes made for ssppeecc release 4.05.03
     as of September 20, 1999.

Recent Bug in ppoorrtt__ggeett(())/ppoorrtt__ppuutt(()) Functions Fixed
     A bug, introduced in release 4.05.01, which resulted in segmentation
     violations if the functions ppoorrtt__ggeett(()), ppoorrtt__ggeett22(()), ppoorrtt__ppuutt(()) or
     ppoorrtt__ppuutt22(()) were called, has been fixed.

Some Minor Enhancements To Install Program
     The iinnssttaallll__ddaattaa file, which contains the site-dependent installation
     parameters, is now used as dependency for uu__hhddww..oo and uu__hhooookk..oo in the
     mmaakkee-file, to help insure that ssppeecc gets rebuilt when the installation
     specifications are changed.  Also, the ggeett__ooppttss program now accepts a ^^DD
     command to jump out of the specifications queries at any time.

Fixes For Stand-Alone Help Utility
     The stand-alone help utility cchheellpp will no longer change tty modes if the
     output is to a file or a pipe, and will no longer include the character
     sequences that indicate highlighted text if output is to a file.

The ggppsseett Comments No Longer Are Written To Screen
     The standard ggppsseett macro that documents changes to geometry parameters no
     longer prints messages to the screen, but does still write comments to the
     data file if one is opened and to the printer if one is configured.

Additional Standard Macro File For ssuurrff Geometries
     In order to allow multiple versions of the ssuurrff geometry to exist in the
     same installation directory, ssppeecc now recognizes an additional standard
     macro file with a name of the form ccoonnff//ccoonnff44..mmaacc (where ccoonnff is the name
     by which ssppeecc was invoked and ccoonnff44 is the first four letters of that name.

Further Developments For the ppssiicc Geometry
     Further work on the ppssiicc geometry includes the following: The cut points
     for all the diffractometer angles can now be set by the user.  A
     preliminary implementation of sector transformations is available.  Also,
     the first draft of the _p_s_i_c help file is included.

Support Non-encoder Version of IMS Motor Controller
     The initial version of the code for the Intelligent Motion Systems motor
     controllers assumed use of an encoder.  Users can now choose IIMMSS or IIMMSS__EE
     in the configuration editor to select whether particular motor channels
     have encoders available.  The difference in the code is whether the current
     position is read back from the IMS module with a zz or a ZZ command.

Workaround Implemented For OMS Firmware Limit Bug
     A workaround for an OMS motor controller firmware bug that prevented a
     clean recovery after hitting a limit switch is included.  After hitting a
     hardware limit, the first command ssppeecc would send to move to a position in
     the opposite direction did not always work.  The workaround is to
     explicitly send a command to move in the opposite direction, then to send
     the command to move to the specific position.

Support For a Channel Multiplexor With OMS Motor Controllers
     Preliminary support for a one-to-sixteen channel multiplexor is now
     included with the OMS motor controller support.  Contact CSS for
     implementation details.

Support For SPring-8 EEqquuiippmmeenntt MMaannaaggeerr RPC-based Motors
     A motor controller built and used at the SPring-8 synchrotron in Japan is
     now supported in ssppeecc.

New ssppeecc__ppaarr(()) Option To Set Default EPICS Timeouts
     The default timeout for the EPICS channel access ccaa__ppeenndd__iioo(()) call can now
     be set using ssppeecc__ppaarr(()).  See the _e_p_i_c_s and _s_p_e_c___p_a_r help files for
     details.

RELEASE 4.05.02

     These notes summarize the cumulative changes made for ssppeecc release 4.05.02
     as of July 11, 1999.

Modified __uuppddaatteeHHKKLL Macro
     The __uuppddaatteeHHKKLL macro, used by the uubbrr and uummkk macros to display the updated
     position of motors and reciprocal space position during moves, has been
     modified to print as many of the diffractometer motors as is possible to
     fit in the width of the screen.  Previously, no more than five motors were
     shown.

New uusseerr__ssccaann__ttaaiill Hook In Standard Macros
     The standard __ttaaiill macro, called at the end of each scan, now includes a
     call of uusseerr__ssccaann__ttaaiill, which local users can define to perform special
     actions at the end of scans.  By default, uusseerr__ssccaann__ttaaiill is defined as an
     empty macro using ccddeeff(()).

Fix For Certain GPIB Driver and Motor Controller Combinations
     A problem with internal buffer overruns with certain motor controllers when
     used with some GPIB drivers has been fixed.  Affected motor controllers
     include the Huber SMC 9000, the Newport/Microcontrole ITL09 and MM2500, the
     Advanced Control Systems MCB, the custom controller MMC-32 used at NSLS and
     the custom MURR controller used at the Missouri Research reactor.  The
     National Instruments GPIB driver version for LLiinnuuxx was confirmed to exhibit
     the behavior, although other drivers may behave similarly.  Symptoms of
     buffer overruns often appear as random crashes or unexpectedly flaky
     behavior in the software.

RELEASE 4.05.01

     These notes summarize the cumulative changes made for ssppeecc release 4.05.01
     as of June 13, 1999.

New Go-To Feature For Command Files
     The ddooffiillee(()) and qqddooffiillee(()) functions, used by the ddoo and qqddoo macros, now
     take an additional optional argument to specify a starting line in the
     command file.  If the argument is an integer, the number specifies at which
     line to start reading the file.  (Currently, only positive integers are
     allowed.)  If the argument is anything else, it is considered a search
     string, and text is read from the file starting at the first line
     containing that search string.  The metacharacters **, which matches any
     string, and ??, which matches any single character, are allowed in the
     search string.  Initial and trailing white space is ignored in the file.

New Option To Keep Going After An Error In a Command File
     You can now tell ssppeecc to keep reading and executing commands from a command
     file no matter what errors occur.  The new ""kkeeeepp__ggooiinngg"" option to
     ssppeecc__ppaarr(()), if set, will tell ssppeecc not to return to command level and the
     main interactive prompt on any type of error.  Instead, the next line from
     the current command file will be read.  Note, depending on where the error
     is in a file, reading subsequent lines may generate more errors,
     particularly if the error occurs inside a statement block.

New Error Recovery Options For GPIB and Other I/O
     It is now possible to arrange that various hardware errors will not cause
     ssppeecc to reset to command level.  If the variable HHDDWW__EERRRR exists, it will be
     assigned a hardware error number, currently defined as follows:

         1 - Generic error
         2 - GPIB no listener
         3 - Timeout
         4 - A non-fatal error
         5 - Function called with bad argument
         6 - Trying to access unconfigured hardware
         7 - Function called with bad address

     If the value of HHDDWW__EERRRR is -1 before the call to the user-level hardware
     access function, no reset to command level will take place for any errors.
     Otherwise, traditionally fatal errors (all errors other than timeouts or
     the explicitly ""nnoonn--ffaattaall"" errors) will still be fatal.  The following
     functions currently may set HHDDWW__EERRRR: ccaa__ggeett(()), ccaa__ppuutt(()), ggppiibb__ggeett(()),
     ggppiibb__ppuutt(()), ggppiibb__ppoollll(()), ggppiibb__ccnnttll(()), ppoorrtt__ggeett(()), ppoorrtt__ggeettww(()), ppoorrtt__ppuutt(()),
     ppoorrtt__ppuuttww(()), sseerr__ggeett(()) and sseerr__ppuutt(()).

New sshhooww__ssttaattee Utility
     A new utility called sshhooww__ssttaattee that can display the more interesting
     contents of the saved state files (command history, variable assignments
     and macro definitions) is available.  Note, the state file is only updated
     when a ssppeecc session is terminated or the user types the ssaavvssttaattee command.
     The utility is designed to be able to read state files from all platforms,
     regardless of native byte order.  Type sshhooww__ssttaattee -- to see usage options.

Backwards Compatibility For Previous State File Versions
     ssppeecc will now try to maintain a measure of compatibility with prior
     versions of the saved state files, such that updates to new releases of
     ssppeecc will less often require a fresh start.

New Option For Error-Log Files
     A new kind of log file is available that records typed commands, error
     messages and optional time stamps.  The file is intended to be useful to
     administrators trying to diagnose user problems.  A file opened for output
     named eelloogg or that ends in ..eelloogg is such a file.  Commands entered at the
     ssppeecc prompt are logged prefixed by a ##CC.  Error messages produced by the
     built-in C code, or generated by the new eepprriinntt or eepprriinnttff(()) built-in
     keywords (described below), are logged prefixed by a ##EE.  If time stamps
     are enabled (via the new ssppeecc__ppaarr(()) option described below), the UNIX epoch
     and the corresponding date string are logged (at the time-stamp interval)
     prefixed by a ##TT.

New eepprriinntt and eepprriinnttff(()) Built-In Commands
     A built-in command eepprriinntt and built-in function eepprriinnttff(()) are available
     that can be used with the new error-log files.  The behavior is exactly the
     same as pprriinntt and pprriinnttff(()), respectively, except that if an error-log file
     is open, the generated strings will also be written to that file, in
     addition to any other files or devices turned on for output, as usual.  The
     strings written to the error-log files will be prefixed with the ##EE
     characters.  If the error message is more than one line, only the first
     line will have the special prefix.

Macros Revised To Use eepprriinntt and eepprriinnttff(())
     Most (but not yet all) of the standard macros have been modified to use the
     new eepprriinntt and eepprriinnttff(()) output commands for printing error messages.
     There is no difference in behavior, except that if an error-log file is
     open and turned-on, the error messages will also be logged to that file.

New ""eelloogg__ttiimmeessttaammpp"" Option For ssppeecc__ppaarr(())
     The time interval for the optional time stamps for the new error-log file
     capability is set using the ssppeecc__ppaarr((""eelloogg__ttiimmeessttaammpp"",, vvaalluuee)) where the
     units of vvaalluuee are minutes.  The default value is 5 minutes.  Note, time
     stamps are only added before a command or error message is logged, so that
     the interval between time stamps can be greater than that specified if no
     commands are being typed or errors generated.

New aarrrraayy__oopp(()) Option To Tag Shared-Array Type
     Shared arrays can be tagged with a type that will be available to other
     processes accessing the array.  Usage is aarrrraayy__oopp((""ttaagg"",, aarrrr,, aarrgg)) where
     aarrrr is the array and aarrgg is ""mmccaa"", ""iimmaaggee"", ""ssccaann"" or ""iinnffoo"".  Use
     aarrrraayy__oopp((""uunnttaagg"",, aarrrr)) to remove the tag information.

New aarrrraayy__oopp(()) Option To Swap Bytes
     The command aarrrraayy__oopp((""sswwaapp"",, aarrrr)) will swap the bytes of the array aarrrr.
     The command can change big-endian short- or long-integer data to
     little-endian and vice versa.  For most built-in data collection, ssppeecc
     automatically swaps bytes as appropriate, but this new function is
     available for other cases that may come up.

New Option To Set Help File Pager Program
     ssppeecc will now examine the environment variables SSPPEECC__PPAAGGEERR and PPAAGGEERR, in
     turn, to obtain the name of a program to use for paging through ssppeecc help
     files.  Such a program can be an alternative to ssppeecc's built-in paging
     code, allowing searching and line-by-line perusal.  A new built-in variable
     PPAAGGEERR can be also be assigned to directly, overriding the environment
     variables.  If a version of lleessss greater than version 332 is installed on
     the ssppeecc platform, the standard macros will assign the PPAAGGEERR variable a
     string that invokes the lleessss utility with some special flags if the PPAAGGEERR
     variable is otherwise unset.

New mmoottoorr__ppaarr(()) Options To Retrieve ccoonnffiigg File Values
     New options to the mmoottoorr__ppaarr(()) function, ""ccoonnffiigg__sstteepp__ssiizzee"",
     ""ccoonnffiigg__aacccceelleerraattiioonn"", ""ccoonnffiigg__vveelloocciittyy"", ""ccoonnffiigg__bbaassee__rraattee"" and
     ""ccoonnffiigg__bbaacckkllaasshh"", return the values for the associated parameters as were
     originally read from the ccoonnffiigg file.  Such a feature might be useful for
     restoring these values after macros had made some changes for a particular
     scan.

Warning Message On Moving Motors With Wizard Powers Suppressed
     The warning printed when motors are moved using wizard powers has been
     turned into a debugging message printed when the warning-message debug
     level is turned on.

Warning Message On Output Left On Suppressed
     The warning messages about output files being left on after errors has been
     eliminated as it seemed to confuse some users.

Scan Header Warns If No Data File Open
     The scan header information printed to the screen with the standard macros
     now warns that no data files is open if the DDAATTAAFFIILLEE variable have either
     the value ""nnuullll"" or ""//ddeevv//nnuullll"".

Bug In Optional Read Mode For Motors Fixed
     A bug, where the new feature introduced with release 4.04.01 that allowed
     control of when motor position-register were read by ssppeecc by selecting a
     read mode on the optional motor configuration screen of the configuration
     editor didn't have actually have any effect, has been fixed.

Bug In Contents Display In ssccaannss..44..cc Fixed
     A recently introduced bug in the data file contents displayed with the
     ccoonntteennttss utility and the ssccaannss..44 CC--PPLLOOTT user function, where the month was
     off by one, has been fixed.

Improved External Signal Handling
     When the ssppeecc process is sent a SSIIGGIINNTT signal from another process while
     the ssppeecc process is waiting for user input in the rreeaaddlliinnee library
     routines, ssppeecc now does complete ^^CC-type processing.  Previously, moving,
     counting and other acquisition would be aborted, but the other ^^CC-type
     processing, such as executing cclleeaannuupp macros or closing output files would
     not be done.

LLiinnuuxx Drivers Updated For 2.2.x Kernels
     The four kernel drivers ppccaa..cc, bbiitt33..cc, ddsspp..cc and ppiioo..cc that are sometimes
     used with ssppeecc have been modified to be compatible with the LLiinnuuxx 2.2.x
     series kernels.

Fixes For Newport PM500 Motor Controller
     Some fixes in the code supporting the Newport PM500 motor controller are
     included.

New CCD Support in ESRF Distribution
     Some new CCD device support is included in the ESRF version of ssppeecc.

Fixes For ppssiicc Geometry
     A number of fixes in the geometry calculations for the new ppssiicc geometry
     are included.  More fixes are expected in the future.

Updates To ssuurrff Geometries
     A new CMC configuration is included for the ssuurrff geometry for the
     diffractometer to be installed at the CMC CAT at the APS.

New Support for Opaque Data Type In eessrrff__iioo(())
     The ""ooppaaqquuee"" data type is now supported by the eessrrff__iioo(()) function, but only
     in transferring data to ssppeecc and only to the data-type array variables.
     One must be sure to declare an array of the type appropriate to the data
     and also to arrange for byte swapping, if necessary.

Fix For ESRF TACO Device Initialization
     A one second delay has been added between successive ddeevv__ffrreeee(()) and
     ddeevv__iimmppoorrtt(()) library calls in ssppeecc's ESRF TACO support to workaround a bug
     in the OS/9 system that is not otherwise handled by the device server
     library or drivers.  The delay should fix the problem with the message ""CCaann
     nnoott iimmppoorrtt ddeevviiccee IIDD//ffoooo//00"" appearing on every other rreeccoonnffiigg.

changes                      spec 4.04 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 4.04

RELEASE 4.04.07

     These notes summarize the cumulative changes made for ssppeecc release 4.04.07
     as of April 19, 1999.

New Option To ssccaannss..44
     For scans that contain an MCA-type spectrum at each data point, the ssccaannss..44
     CC--PPLLOOTT user function (or the stand-alone ssccaannss utility) can now pick out
     individual spectra.  The syntax is the scan number, followed by the @@
     symbol, followed by the point number, where points are numbered starting
     from one.  For example, ffnn .. 33@@1122 will read the spectra of the 12th data
     point of scan 3.  Note, the spectra must follow the corresponding non-MCA
     data at each point and the option for reading MCA data must be selected.

Problem With Setting Dials On OMS Motor Controllers Fixed
     With some newer, faster PC computers, there was a problem changing the dial
     position with the OMS PC cards.  When ssppeecc sent a read-position command
     immediately after sending a load-position command, the new position was not
     yet available, resulting in an error message.  ssppeecc now delays ten
     milliseconds after loading the new dial position before sending any other
     commands, which cures the problem.

Initial Support For Encoders On OMS Motor Controllers
     The OOMMSS__EE controller choice in the configuration file will now make a
     difference.  If a motor channel is configured as having an encoder, ssppeecc
     will read the motor position using the RREE (read encoder) OMS command,
     rather than the RRPP (read position) command.  Additionally, the cchhgg__ddiiaall(())
     function (used by the sseett__ddiiaall macro) will update both the encoder and
     command register positions appropriately.  Note, the motor parameter for
     encoder step size must also be configured correctly.  (From the
     configuration editor motor screen, type mm twice to reach the screen where
     the parameter can be entered.)

EPICS changes
     Two changes were made in the EPICS support.  The eeppiiccss__ggeett(()) function now
     returns the string value for ENUM data types.  Previously, the
     short-integer value was returned.  Also, for the EPICS scaler support of
     the Joerger VSC16/8 VME scaler module, as an extra precaution, all scaler
     channels are initially disabled as a gate source each time the ccoonnffiigg file
     is read.

RELEASE 4.04.06

     These notes summarize the cumulative changes made for ssppeecc release 4.04.06
     as of April 4, 1999.

Problems With Truth Value Of the Null String Fixed
     In release 4.04.04, a fix for a bug concerning number/string comparisons
     that was a side effect of a fix in release 4.04.01 introduced yet another
     bug, this time concerning the evaluation of string expressions in
     conditional statements.  With this release, the behavior for the truth
     value of an expression is as follows: If the expression is a number or a
     string representation of a number, such as 00, 00xx00, 00..00ee--33, 00000000, etc., the
     value is ffaallssee (or zero).  Otherwise, the value is ttrruuee (or 1).  If the
     expression is a string and not a number, the value of the null string """" is
     ffaallssee (or zero), while anything else is ttrruuee (or 1).  A string that
     contains an initial number followed by characters that aren't part of the
     number is not considered to be a number.  Thus a string such as ""00xxyyzz""
     would evalate as a non-null string, i.e., ttrruuee.

Harmless History Numbering Bug Fixed
     A bug, where the main command prompt history number was not incremented
     immediately after execution of a macro that contained a macro function, has
     been fixed.

Bug With mmoottoorr__ppaarr(()) and ESRF Motors Fixed
     A bug, where ssppeecc might dump core if the command mmoottoorr__ppaarr((mmnnee,,
     ""ddeevviiccee__iidd"")) was run with an ESRF TACO motor that was not successfully
     imported from the device server, has been fixed.

Bit 3 Model 618 PCI-to-VME Adapter Now Detected
     The ssppeecc driver for the Bit 3 Model 616/617 PCI-to-VME Adapter boards now
     also recognizes the Model 618 Adapter, which has the same functionality but
     uses a fiber optic link to the VME crate.

RELEASE 4.04.05

     These notes summarize the cumulative changes made for ssppeecc release 4.04.05
     as of March 9, 1999.

Trailing Carriage Returns In Command Files Allowed
     Input files can now include trailing carriage returns, such as are added to
     each line of a text file created on a DOS-like operating systems.

Added an ss11dd22 Geometry
     A new geometry with two detector motions and one sample rotation is
     included.

Jorway 73A SCSI-CAMAC Controller Supported On Linux
     The Jorway 73A SCSI-CAMAC controller is now supported on linux using the
     generic SCSI driver facility.  Make sure the kernel file ssgg..cc is compiled
     with SSGG__BBIIGG__BBUUFFFF defined as 32768, that the byte-order jumper on the 73A is
     set to X1-X2 for big-endian, the SCSI terminator resistors on the 73A are
     removed if the 73A is not the last device and that the SCSI ID on the 73A
     doesn't conflict with any other device.  Use the command ccaatt
     //pprroocc//ssccssii//ssccssii to view the SCSI devices present.  The first device listed
     is associcated with //ddeevv//ssggaa, the second with //ddeevv//ssggbb, etc.

Improvements For ECB Controller
     ssppeecc now handles the multiplexed power supplies that are on the RISO ECB
     motor controllers properly.

Fixed Reversed Limit Sense On TSUJI Ccontrollers
     A bug, where ssppeecc had the sense of the clockwise and counter-clockwise
     limits for the TSUJI PM16C motor controller reversed, has been fixed.

RELEASE 4.04.04

     These notes summarize the cumulative changes made for ssppeecc release 4.04.04
     as of January 21, 1999.

Recently Introduced Bug Concerning Number/String Comparisons Fixed
     A side effect of the ""SSttrriinngg--VVaalluueedd SSyymmbboollss TThhaatt LLooookk LLiikkee NNuummbbeerrss WWoonn''tt
     GGeett CChhaannggeedd"" fix in release 4.04.01, which broke certain relational
     operations between numbers and string representations of numbers, has been
     fixed.

Problems In sspplliitt(()) Fixed
     The code for the sspplliitt(()) function has been rewritten to eliminate a not
     well-understood platform-dependent bug that caused nonsense function
     results.  In addition, the splitting behavior has been changed to conform
     to the results produced by the standard aawwkk utility.  In particular, empty
     fields are always counted when the delimiter is other than the default
     space character.

Assignment Bug Fixed
     A bug (introduced in release 4.03.01), where the assignment of the value of
     an element of an array passed as an argument to a macro function to a
     scaler within the macro function could cause a core dump, has been fixed.

RELEASE 4.04.03

     These notes summarize the cumulative changes made for ssppeecc release 4.04.03
     as of January 6, 1999.

Limit On TCP eessrrff__iioo(()) Transfers Removed
     A previous constraint of 8,192 bytes on the length of data array transfers
     to TACO device servers using the eessrrff__iioo(()) function has been removed.
     There is now no limit imposed.

Preliminary Support For RISO ECB Motor Controllers
     ssppeecc now includes support for the RISO ECB spectrometer interface system
     motor controllers.

Bug Fixed In Assigning Values To Associative Arrays In Macro Functions
     The new feature in release 4.04.01 where elements of global associative
     arrays accessed only for reading were not made part of the array introduced
     a couple of obscure (for most users) bugs.  A bug where values assigned to
     global associative arrays in macro functions did not ""ssttiicckk"" when the array
     name was passed as an argument to the macro function is fixed.

Added a ccaallccEE__llooccaall to ccaallccEE macro
     A macro named ccaallccEE__llooccaall is now called from the standard ccaallccEE macro after
     the new value for LLAAMMBBDDAA has been calculated.  By default, ccaallccEE__llooccaall is
     defined as a null macro, but can be defined by local sites as needed.

Provision For NI GPIB Driver On Linux
     To allow users to try the GPIB driver now offered by National Instruments
     on linux platforms, the linux versions of ssppeecc can now be linked with and
     configured for the NI-supplied cciibb..oo file that interfaces user programs to
     the NI-supplied driver.

Support For IMS Motor Controllers
     Preliminary support for the Intelligent Motor Systems IM4831IE motor
     controller is now included.

RELEASE 4.04.02

     These notes summarize the cumulative changes made for ssppeecc release 4.04.02
     as of November 24, 1998.

Recent Bug Introduced With ddaattaa__ppiippee(()) Fixed
     The improvements in the ddaattaa__ppiippee(()) function made in ssppeecc release 4.03.13
     last July mistakenly introduced a two-second time limit on the data-pipe
     process response.  That time limit has been removed.

Improved xxxxxx__ppaarr((...... ""ddeevviiccee__iidd"")) Implementation
     Information provided by mmoottoorr__ppaarr(()), ccoouunntteerr__ppaarr(()), mmccaa__ppaarr(()), mmccaa__ssppaarr(())
     and iimmaaggee__ppaarr(()) with the ""ddeevviiccee__iidd"" parameter is available for additional
     devices.

Old (Small) Memory Leak Fixed
     An old (and relatively insignificant) internal memory leak associated with
     deleting or redefining selected portions of chained (ccddeeff(())) macros has
     been fixed.

Fix To Restore Motor Velocity With EPICS Powder Mode Moves
     A bug that prevented the velocity parameter for EPICS motors to be restored
     to its normal value after powder-mode scans for the powder-mode motor has
     been fixed.

New --NN Start-Up Option
     Normally, ssppeecc uses the name by which it was invoked to establish the
     command prompt and the name of the directory in SSPPEECCDD in which the
     configuration-dependent files exist.  A new --NN mmyy__nnaammee start-up option is
     available to use mmyy__nnaammee instead.  This command also sets the geometry to
     mmyy__nnaammee.  Follow this option with the --gg option to choose a different name
     for the geometry.

Support For New Focus Picomotor Controllers
     The New Focus Model 8732 Picomotor controller is now supported by ssppeecc.

RELEASE 4.04.01

     These notes summarize the cumulative changes made for ssppeecc release 4.04.01
     as of November 8, 1998.

Built-In SS[[]] and AA[[]] Arrays Now Dynamically Sized
     The sizes of the built-in (associative) arrays for scalers SS[[]] and motors
     AA[[]] are now set to the number of counters and motors, respectively, as
     found in the ccoonnffiigg file.  Previously, the arrays were dimensioned to the
     maximum number of channels allowed.

Indirection Operator (@@) Now Works With Associative Array Elements
     The indirection operator @@ can now be used with associative array elements,
     as in

        SSPPEECC>> aa == ""aarrrr[[33]]""
        SSPPEECC>> aarrrr[[33]] == PPII
        SSPPEECC>> pprriinntt aa,, @@aa
        aarrrr[[33]] 33..1144115599

Associative Array Elements Accessed Read-Only Don't Become Global
     Previously, any reference to an array element of a global associative array
     would create a global instance of that array element, even if the reference
     was only to a value of an unset element.  Now, such references do not
     create a global instance of the array element.  The only way to make the
     element global is to assign it a value.

Allow Embedded Comments in ddaattaa__rreeaadd(()) and aarrrraayy__rreeaadd(()) Files
     The ddaattaa__rreeaadd(()) function, which reads data from files into data groups, and
     the aarrrraayy__rreeaadd(()) function, which reads data from files into data arrays,
     both now allow embedded comments in the text file input.  Previously, the
     comment character ## was only allowed at the beginning of a line.

""ttrraannssppoossee"" Option Added to aarrrraayy__oopp(())
     A new operation to transpose rows and columns of a data array is available
     with aarrrraayy__oopp((""ttrraannssppoossee"",, aarrrr))..

Can Now Attach to Existing Shared Memory Arrays
     It is now possible to hook up to an existing shared memory array created
     most likely by another instance of ssppeecc running on the same platform.  The
     syntax is

         eexxtteerrnn sshhaarreedd aarrrraayy [[ssppeecc::[[ppiidd::]]]]aarrrr

     where the optional parameter ssppeecc is the name of the ssppeecc version that
     created the array, the optional parameter ppiidd is the process ID of the
     version and aarrrr is the name of the array.  The first two arguments can be
     used in case more than one instance of the shared array exists.  Examples
     include:

        eexxtteerrnn sshhaarreedd aarrrraayy ddaattaa
        eexxtteerrnn sshhaarreedd aarrrraayy ffoouurrcc::ddaattaa
        eexxtteerrnn sshhaarreedd aarrrraayy ffoouurrcc::11223344::ddaattaa

String Subarrays Now pprriinntt Correctly
     The pprriinntt command now prints out subarrays of string-type data arrays
     correctly.  Previously, only complete rows would be printed.

Bug With Subarrays In Certain Array Operations Fixed
     A bug, where binary operations between arrays did not work properly with
     certain subarray syntax, has been fixed.  There was no problem when the
     operands were complete arrays.

Fixed Bug With ""ii__>>==__vvaalluuee"" In aarrrraayy__oopp(()) and ddaattaa__aannaall(())
     An old bug, where the ""ii__>>==__vvaalluuee"" operation didn't return the correct
     value for both the ddaattaa__aannaall(()) and aarrrraayy__oopp(()) functions, has been fixed.

String-Valued Symbols That Look Like Numbers Won't Get Changed
     Old behavior in ssppeecc, where referencing the number value of a string
     variable with a value such as ""002200"" would modify the string value to match
     the number value in decimal (16 in this case), has been changed.  The
     string values are no longer modified.

Hardware Lock File Changed
     The sseettttiinnggss file is now used to establish hardware locking, rather than
     the file named uusseerrffiilleess//hhddww__lloocckk, which is now no longer used.  This
     change makes hardware locking work properly with shared configurations.

     Also, if a second instance of ssppeecc is forced into simulate mode due to a
     hardware lock, if the first process exits releasing the lock the second
     process can gain control of the hardware (using rreeccoonnffiigg) without exiting.

Simulate Mode More Robust
     The coding for simulate mode has been tightened up.  It should now be quite
     robust in terms of avoiding hardware access over all the supported
     interfaces (GPIB, RS-232C, CAMAC, VME, PC I/O port and ethernet socket)
     from both the built-in C code for motor controllers, counter/timers,
     MCA-type and 2D-type image devices, and from the generic hardware access
     functions, such as ggppiibb__ppuutt(()), ppoorrtt__ggeett(()), etc.  Note, though, that in
     simulate mode, the mmoottoorr__ppaarr(()), ccoouunntteerr__ppaarr(()), mmccaa__ppaarr(()) and iimmaaggee__ppaarr(())
     functions can still change the software values for speeds, step-sizes,
     regions of interest, etc., so such values should be restored on leaving
     simulate mode.

New (Optional) Hardware Read Mode (For Most Motor Controllers)
     For most motor controllers, ssppeecc normally only reads the hardware registers
     when the position is known to have changed, as at the end of move.  The
     hardware read mode can now be configured on the second optional motor
     parameter screen of the configuration editor.

Another Try At Cleaning Up Orphaned xx1111ffiilltt Processes
     Another attempt at solving a not well understood problem where for certain
     users on certain platforms, the xx1111ffiilltt processes don't go away, is
     included.  The code now include a wwaattcchh--ddoogg timer that checks for the
     existence of the ssppeecc process that spawned it every five minutes, and exits
     if that process is gone.

Very Long Device Names Allowed In Configuration Editor
     The eeddccoonnff configuration editor now allows device names to be up to 64
     characters long.

Bugs in wwiizz__ppaasssswwdd Fixed
     Bugs in the wwiizz__ppaasssswwdd utility where the encrypted password would be
     missing or the SSPPEECCDD/passwd file would be empty have been fixed.

New ssuurrff Configuration For Kiel University
     A new flavor of the ssuurrff geometry, as used at Kiel University, is included
     in the ssppeecc distribution.

Further Development For Psi-Circle Geometry
     A first (tentative) release of the new geometry code for the ppssiicc geometry
     is included.

Cleanup Macros Cleaned Up In ddssccaann Macros and Others
     All references to cleanup macros in the standard macros have been rewritten
     to use the new cclleeaannuupp__oonnccee macro defined using the ccddeeff(()) chained-macro
     function.  The new versions are easier to read and make it safe to have
     multiple ddssccaann macros in the same statement block.

Various Modifications To Standard Macros
     Scan macros now automatically show as many counters as will fit on the
     screen.

     A new ffccoomm macro function replaces the ccoomm macro and is more efficient.

     A new wwaaiittaaccqq macro with associated uusseerr__wwaaiittaaccqq is included.

     A new uusseerr__sseettppooss is included in the standard sseett macro.

     A new uusseerr__ssccaann__lloooopp macro is included in the standard __lloooopp macro.

     A new uusseerr__cctt macro is included at the end of the standard cctt, uucctt and
     related macros.

Rigaku RINT-2000 Hardware Support
     Preliminary support for the Rigaku RINT-2000 type of instrument is
     included.  Motors and scalers are controlled through a single serial port.

Missing Error Messages On Import Errors With ESRF Device Servers Fixed
     A bug, where error messages from failure of the ESRF/TACO ddeevv__iimmppoorrtt(())
     function were not printed, has been fixed.

EPICS Scaler Changes
     The support for the reportedly obsolete Mizar 8310 scaler records, which
     was removed in ssppeecc release 4.03.08 has been restored, to accommodate users
     who still use that device.

     Also, the names in the ccoonnffiigg file for the EPICS scalers have been changed
     from EEPP__SSCCAALLEE and EEPP__MMIIZZAARR to EEPPIICCSS__SSCC and EEPPIICCSS__MMZZ for clarity.  The
     configuration editor will recognize the old names and automatically convert
     to the new names when it writes out the ccoonnffiigg file.

changes                      spec 4.04 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 4.03

RELEASE 4.03.14

     These notes summarize the cumulative changes made for ssppeecc release 4.03.14
     as of August 31, 1998.

More New Options For ssoocckk__iioo(())
     The ssoocckk__iioo(()) function now accepts a ""lliisstteenn"" option, which allows other
     programs or instances of ssppeecc to make a connection, such that strings can
     be sent and received between, for example, two instances of ssppeecc using the
     ""sseenndd"" and ""rreeaadd"" options to ssoocckk__iioo(()).  See the _s_o_c_k___i_o help file for
     details.

Made Certain Errors Non-Fatal
     The functions ccnntt__nnaammee(()), ccnntt__mmnnee(()), mmoottoorr__nnaammee(()) and mmoottoorr__mmnnee(()) now
     return -1 for invalid arguments rather than resetting to command level.

New ttww (tweak) Macro For Motors
     A new full-featured ttww macro is included.  It allows multiple motors to be
     tweaked simultaneously, and can count and display the results after each
     move.  See the _t_w help file for details.

Minor Changes To Standard Macros
     A number of changes to the standard macros - some cosmetic, some functional
     and some fixes - are included.

     New iiss__uussiinngg__mmoottoorr(()) and iiss__uussiinngg__ccoouunntteerr(()) macro functions test whether
     the corresponding channel is named ""uunnuusseedd"" or has been disabled with the
     ""ddiissaabbllee"" option to mmoottoorr__ppaarr(()) or ccoouunntteerr__ppaarr(()) The macro functions are
     now used to determine whether the corresponding channel should be listed in
     the various macros that display all the motor or counter channels, such as
     wwaa, sshhooww__ccnnttss, etc.

     The oonnpp, ooffffpp, oonndd, ooffffdd macros have a semicolon appended to get rid of
     certain misleading mmoorree>> prompts which occur when the last thing ssppeecc
     parses is an eellssee-less iiff.

     A new iiffpp macro contains tests to see if a PPRRIINNTTEERR device is configured.
     Many of the macros that write info to PPRRIINNTTEERR have been simplified using
     iiffpp and by using ffpprriinnttff((PPRRIINNTTEERR,, ......))  rather than oonnpp//ooffffpp.

     New uusseerr__pprreessccaann__hheeaadd and uusseerr__ppoossttssccaann__hheeaadd hooks are included in the
     standard __hheeaadd macro.

     A new aa55ssccaann macro (with 17 arguments) is included with the standard scans.

     The updated move macros have been reorganized.  A new __uuppddaattee(()) macro
     function replaces __uuppddaattee11 through __uuppddaattee66.  A new __uuppddaatteeHHKKLL macro
     replaces __uuppddaattee22hhkkll through __uuppddaattee55hhkkll.  Definitions for the old names in
     terms of the new macros are included for backwards compatibility.  In
     addition, the looping in the updated moving and counting macros has been
     rewritten to simplify the macro code.

Fix For ccoonntteennttss Utility
     The recently revised version of the ccoonntteennttss utility has been fixed so that
     the data output goes to ""ssttaannddaarrdd oouuttppuutt"" rather than ""ssttaannddaarrdd eerrrroorr"".

Fix For Princeton CCD
     The code for the Princeton Instruments CCD cameras using the ST-138
     interface with the SDV card on Sun computers has had one of the problems
     with timeouts fixed.

MCS mode for Nucleus PCA-3 and PCA-II
     The data returned in multichannel scaling mode (MCS) for the Nucleus PCA
     II, PCA-3 and PCA Multiport devices is changed a bit.  Previously, ssppeecc
     automatically discarded the first and last channels of the data when in MCS
     mode, as they apparently always contain garbage.  However, returning two
     less than the number of channels in the configured size is confusing to the
     user.  It is more appropriate for the user to discard channels or
     explicitly read only the good channels in the calls to mmccaa__ggeett(()).

Tsuji PM16C Bug Fix
     A bug, introduced with the last bug fix for the Tsuji PM16C motor
     controller and that made the device unusable in release 4.03.13, has now
     been fixed.

Support For New ACS SPI-8 Motor Controller
     Preliminary support for the new Advanced Control Systems SPI-8 motor
     controller is included.  Each motor controller can drive eight channels.  A
     number of controllers can be daisy chained off one serial port.  See the
     _A_C_S home page for more information on the controller.

Parallel I/O Driver For ILL 2D Detector
     A new kernel driver and hardware support code for a 2D detector used at ILL
     and interfaced to ssppeecc through a high-speed 16-bit digital input board is
     included for use on lliinnuuxx PC platforms.

RELEASE 4.03.13

     These notes summarize the cumulative changes made for ssppeecc release 4.03.13
     as of July 26, 1998.

New Options For ssyymmss Command
     The ssyymmss command now takes options to specify the type of variables
     displayed and the output format style.  The new --vv option formats the
     output so that the variables and their current values are displayed in the
     form of assignment statements.  If that output is saved to a command file,
     it could be read in later to restore the variables' values.  See the _s_y_m_s
     help file for details.

Multiple Concurrent ddaattaa__ppiippee(()) Processes Implemented
     Mmore than one ddaattaa__ppiippee(()) process can now be running at a time.  The new
     option ddaattaa__ppiippee((""??""))  lists the active processes.

Added New Cleanup Macros:  cclleeaannuupp__oonnccee and cclleeaannuupp__aallwwaayyss
     Two new built-in macro names are recognized.  If defined, a cclleeaannuupp__oonnccee
     macro will be executed on errors or ^^CC and then be undefined.  If defined,
     a cclleeaannuupp__aallwwaayyss macro will be executed on errors and ^^CC, but will not be
     removed.  Definitions for these macros will be constructed in the standard
     ssppeecc macros using the ccddeeff(()) (chained macro) function, in order to allow
     various clean-up actions be added and removed during the flow of block of
     statements.

Sort Limits For llssddeeff, pprrddeeff, ssyymmss Removed
     The ""ttoooo mmaannyy ssyymmbboollss ffoorr ssoorrtt"" message will no longer appear when the
     llssddeeff, pprrddeeff or ssyymmss commands are used when there is a long list of items.

Associative Array Elements Are Printed with pprriinntt
     The pprriinntt command will now print out all the elements of an associative
     array.

Fixed Communication Problem With Silena MCA
     Communication with the Silena MCA over a GPIB interface has been made a bit
     more robust.

Fixed Harmless Prompt Bug With eellssee-less iiff
     A bug, where the prompt would incorrectly be mmoorree>> (to indicate an unclosed
     curly bracket) has been fixed.  The behavior would occur under certain
     conditions that included having a curly bracket as the next input token
     after an eellssee-less iiff statement block.

Fixed Obscure Bug With uunniixx(()) Function
     A bug where ssppeecc would hang (ignoring the interrupt and quit keyboard
     signals) under a particular sequence of commands has been fixed.  The
     sequence required a call to the uunniixx(()) function using two arguments, where
     the shell command in the first argument didn't produce any output to place
     in the string given by the second argument.  That call needed to be
     followed by having either a graphics filter or data-pipe process started
     up, followed by another uunniixx(()) call.

eeddccoonnff Menu Scrolling Improved
     The ""ddrroopp--ddoowwnn"" menus in the eeddccoonnff configuration editor now wrap around
     smoothly when moving up from the top or down from the bottom of long lists.
     In addition, the ^^FF and ^^BB commands can be used to scroll a screenful at a
     time.  Also, when selecting an item within the menus, the normal up/down
     keys and arrow keys can be used.

Several ESRF Fixes and Features Added
     A number of fixes and additions involving ESRF hardware and device access
     are included.  The eessrrff__ddcc(()) function now works properly  with a leading
     ////hhoosstt in the device names.  The eessrrff__iioo(()) function now takes a single ""??""
     option that will list all the devices available on the current NNEETTHHOOSSTT.  An
     optional second argument can contain a pattern using the ** metacharacter to
     filter the devices listed.  See the _e_s_r_f help file for more information.
     Also, the ESRF local hardware development for the Frelon camera, Sensicam
     device server and MCA device server have been incorporated into this
     release.

Support For XIA HSC-1 Huber Slit Controllers
     Initial support for the X-Ray Instrumentation Associates HSC-1 Huber slit
     controller is included.  See the _x_i_a_h_s_c help file for details.

RELEASE 4.03.12

     These notes summarize the cumulative changes made for ssppeecc release 4.03.12
     as of June 15, 1998.

New ccoonnffiigg File Format For Geometry-Linked Scalers
     Now individual scaler channels can be associated with particular
     diffractometer geometries, just as with motors, when linked ccoonnffiigg files
     are used.  (See the _c_o_n_f_i_g___a_d_m help file.)  To implement this feature, the
     format for the scaler information in the ccoonnffiigg file has been changed in a
     non-backwards compatible manner.  Instead of single characters TT, MM or CC to
     indicate the function of the scaler, a hexadecimal number is used to
     contain that and other information.  Old versions of the ccoonnffiigg file will
     be automatically converted to the new format when new versions of ssppeecc or
     the configuration editor eeddccoonnff are run, but scaler information in ccoonnffiigg
     files with the new format will not be read properly by previous releases of
     ssppeecc and eeddccoonnff.

New Version of zz--aaxxiiss Geometry
     The old zzaaxxiiss geometry code has been replaced with new code that includes
     support for an orientation matrix, among other features.  See the
     ggeeoo__zzaaxxiiss..cc source code for the implementation.  The previous zzaaxxiiss code is
     in ggeeoo__zzaaxxiiss__oolldd..cc

Another ggaammmmaa Pseudomotor For the ssiixxcc Geometry
     A second type of pseudomotor configuration for the ggaammmmaa motion for the
     six-circle geometry is implemented.  This configuration uses a linear screw
     configuration to translate the ggaammmmaa motor in an arc as used at UNI-CAT at
     APS.

Scan-File ccoonntteennttss Utility Works Faster
     The ccoonntteennttss utility, which prints a table of contents of standard ssppeecc
     data files, has been sped up by using new built-in C code in the ssccaannss..cc
     and ssccaannss..44..cc files instead of the aawwkk script used previously.

Minor Updates To ssccaannss..44, Including a Bug Fix
     The ssccaannss utility and the CC--PPLLOOTT ssccaannss..44 user function have new options to
     print out scan file table of contents.  While the --pp option still prints
     out the short format contents, the new --PP option prints out the contents in
     a long format.  In addition, if the verbose flag is set using ++vv, the data
     file comments are also displayed.  Also, a very old bug that randomly
     (although rarely) caused ssccaannss..44 to crash when ffcclloossee(()) was called with an
     already-closed file pointer has been fixed.

Support For Two RTC-018 Modules
     ssppeecc now supports two RTC-018 CAMAC modules in use at the same time, with
     the first module used for counting to time presets and the second module
     used for counting to monitor presets.  Previously, with one module only,
     users needed to manually change the input source cable.  Note, the gates
     from the two RTC-018 modules need to be properly tied together when
     connected to scaler inhibit inputs.

New Ethernet-Based NT-2400 Hardware Support
     ssppeecc now offers preliminary support for the Laboratory Equipment
     Corporation NT-2400 ethernet-based hardware controller.  This device (from
     Japan) can include motor controllers, timer/counters and MCA modules.  See
     the _n_t_2_4_0_0 help file for details.

Fixed Crash With Too Many Motors In ccoonnffiigg File
     A bug where ssppeecc could crash if there were too many motors in the ccoonnffiigg
     file has been fixed.

Fixed Problem With Trailing Space In ccoonnffiigg File
     When using particular utilities other than ssppeecc's configuration editor
     eeddccoonnff to modify the ccoonnffiigg file, users found extra space characters got
     added to the end of each line, which ssppeecc inappropriately included in the
     motor and counter names.  The code has been fixed so that such trailing
     space is removed automatically.

New Options For ssoocckk__iioo(())
     A timeout can now be set for socket reads with the ssoocckk__iioo(()) function.  In
     addition, a byte count can be specified for a read in addition to the
     previous read-until-newline behavior.  See the _s_o_c_k___i_o help file for
     details.

New Busy-Wait Calibration On Startup (LLiinnuuxx Only, So Far)
     On startup on lliinnuuxx versions, ssppeecc does a calibration for a busy-wait loop,
     which is used to implement delays of less than a few tens of milliseconds.

Fixed Problem With Tsuji PM16C On Fast PCs
     Older versions  of the Tsuji PM16C motor controller have timing problems
     with GPIB on faster CPUs, such as 200+ MHz pentium with the lliinnuuxx GPIB
     driver.  ssppeecc now includes a timing patch that allows ssppeecc to work
     properly, at least on lliinnuuxx.

Fixed Bug With Software Timer
     A bug where use of the software timer with powder-mode scans would hang the
     scan has been fixed.

Fixed Bug With Princeton CCD on SDV Interface
     A bug in the timeout feature in ssppeecc that automatically restarts the
     Princeton CCD interface when a bug in Princeton hardware causes the
     interface to hang has been fixed to account for the added time taken when
     using kinetics mode.  The estimated time for normal acquisition is also
     obtained more reliably now.

Fixed Bug With More Than 24 CAMAC Scalers
     An old bug where ssppeecc would crash when the DSP QS-450, the KS 3640 or the
     KS 3610 CAMAC scaler modules were used with more than 24 channels
     configured has been fixed.

Fixed Bug Recognizing Certain Versions of PCA Multiport
     A bug where the version string returned by certain firmware versions of the
     PCA Multiport MCA was not recognized such that ssppeecc reported the device as
     unusable has been fixed.

Compiled Under HP-UX 11.0
     ssppeecc has now been built on HP-UX version 11.0 and awaits a site willing to
     give it a try.

RELEASE 4.03.11

     These notes summarize the cumulative changes made for ssppeecc release 4.03.11
     as of April 9, 1998.

CPU Usage When Idle Reduced
     The mechanism ssppeecc uses to allow automatic hardware polling while waiting
     for user input has been changed to reduce CPU usage when hardware is idle.
     The CPU usage in the previous versions was not significant except for sites
     that ran many instances of ssppeecc on the same platform.  In such an
     environment, frequent context switching among the processes kept the load
     average high.

Added Alpha Platform
     A new target for DEC Alpha platforms is included in the ssppeecc installation
     script.

SCIPE Actuator Support Included
     Preliminary support for the SSCCIIPPEE protocols over TCP/IP sockets for
     ""aaccttuuaattoorr"" devices is now included.  (SSCCIIPPEE is a simple protocol for device
     control developed at the DND CAT at the Advanced Photon Source.)

XIA DXP Module Support Included
     Preliminary support for the X-Ray Instrumentation Associates DXP MCA module
     is now included.

LeCroy 4434 CAMAC 32-Channel Scaler Supported
     The LeCroy 4434 CAMAC 32-channel Scaler is now supported by ssppeecc.

Fixed Block Mode For KS3929 On Solaris Platforms
     CAMAC block mode transfers on Solaris 2.x platforms using the CSS kernel
     driver for the Kinetic Systems 3929 SCSI-to-CAMAC controller now work
     properly.  The new version of the CSS driver needs to be installed.

Bug with HP E/ISA Errors Fixed
     A bug that could cause ssppeecc to hang when HP E/ISA ports were configured but
     couldn't be properly opened has been fixed.

Fixed Bug with EPICS Debugging
     A recently introduced bug that could result in core dumps if EPICS
     debugging was turned on has been fixed.

RELEASE 4.03.10

     These notes summarize the cumulative changes made for ssppeecc release 4.03.10
     as of March 16, 1998.

Improvements To the sshhoowwssccaannss Utility
     The sshhoowwssccaannss utility, which uses CC--PPLLOOTT to create 12-scans-per-page
     summary plots of ssppeecc data files, has been improved.  A new --nn flag turns
     off the default normalization of the data.  When normalization is on, the
     data is checked after normalization to make sure the ranges are plottable.
     Also, the xx-axis labels are now chosen more carefully.

OMS Motor Controller Code Updated
     This release contains a rewrite of the code for the OMS motor controllers.
     The code now supports the unit/channel configuration option in the
     configuration editor.  That means that each motor can be assigned to a
     particular controller unit and channel number, rather than being assigned
     consecutively.  Because the revised code uses different internal routines
     for the motor functions, the messages displayed to the user and order and
     format of commands sent to the controllers will be different than in the
     previous releases.

Ortec Timer Code Revised
     To accommodate changes in the Ortec 974/995 firmware, the handling of these
     Ortec timers has been modified.  In particular, ssppeecc no longer uses ""aallaarrmm
     mmooddee"" with GPIB interface timers, as the behavior associated with that mode
     differs among firmware versions.

Fixed Bugs In aarrrraayy__ppiippee
     Some bugs associated with using data array arguments  with the aarrrraayy__ppiippee(())
     function have been fixed.

RELEASE 4.03.09

     These notes summarize the cumulative changes made for ssppeecc release 4.03.09
     as of March 9, 1998.

Device Unit Number Configuration Easier
     The configuration editor now allows positioning the cursor in the
     unit-number field for MCA and CCD devices, for GPIB controllers and for
     generic serial devices.  Entering a number in that column will swap rows.

Allow More Than 99 Scalers or Motors Per Unit
     The configuration editor now allows entering values greater than 99 in the
     NNUUMM field for motor and counter devices.

New Warning If Software Timer Not Completely Configured
     The configuration editor now warns when exiting if the software timer is
     not configured on both the device screen and the scaler screen.

Fix a Possible Core Dump When xx1111ffiilltt Exits
     A core dump that occurred when the xx1111ffiilltt process exited under certain
     conditions has been fixed.

Improved Debugging Messages For EPICS
     The debugging information shown for EPICS (debug level 128) has been
     redone.

Fixed Max Number Of EPICS Scalers
     The code has been fixed to allow up to sixteen EPICS scalers per unit.
     Previously the limit was eight.

Preliminary Support For EPICS MCA
     Initial support for the standard EPICS MCA device support is included.

Preliminary Support For Jorway 73A SCSI-CAMAC On HP-700
     Initial support for the Jorway model 73A SCSI-to-CAMAC controller for
     HP-700 platforms (HPUX 9.x and 10.x) is included.

Preliminary PPssii-Circle Code
     A temporary version of geometry code for a new configuration of six-circle
     diffractometer is included.  The diffractometer uses two circles to orient
     the detector and four circles to orient the sample.  Huber calls this
     diffractometer a psi configuration.  Newport has a similar model, but with
     a kappa-geometry configuration for the sample circles.  The code will
     support both.  In the current version, the reciprocal-space-to-angles code
     is basically that from the traditional six-circle with suitable
     transformations for the different detector circle configuration.

Improved Signal Blocking Around GPIB Accesses
     The signal generated by a ^^CC at the keyboard is now blocked more robustly
     surrounding GPIB accesses.  In particular, a situation where the semaphore
     used to control access to the GPIB by multiple instances of ssppeecc would
     became misset after a ^^CC has been fixed.

Fixed Bug With Using Multiple Joerger VME Scalers
     A bug which prevented ssppeecc from working correctly with more than one
     Joerger VSC16/8 VME scaler module has been fixed.

Debug Warning On Nested or Recursive Macro Functions
     A message will be printed if the debug level is set to produce warnings
     (2048) and if a macro function is called recursively.

Error Message Now Printed If Nonexistent Function Called
     Entering ff((aarrgg)) where ff is neither a built-in function nor a macro function
     now generates a syntax error during parsing.  Previously, such a
     construction was treated as a valid instance of the ccaatteennaattiioonn operator.

RELEASE 4.03.08

     These notes summarize the cumulative changes made for ssppeecc release 4.03.08
     as of January 20, 1998.

KS 3388 CAMAC-To-GPIB Support Upgraded
     All the standard GPIB operations available with ssppeecc are now supported for
     the Kinetic Systems Model 338 GPIB-to-CAMAC controller.  Previously only
     the ggppiibb__ppuutt(()) and ASCII ggppiibb__ggeett(()) functions were available.

GPIB Secondary Address Supported
     ssppeecc now supports GPIB secondary addressing modes from the user-level GPIB
     functions such as ggppiibb__ppuutt(()), ggppiibb__ggeett(()), etc.  To use a secondary address,
     the address field must be a string of the form ""pprrii__sseecc"", where pprrii is the
     primary GPIB address and sseecc is the secondary GPIB address.

EPICS eeppiiccss__ggeett(()) For String Records Fixed
     A bug, introduced in ssppeecc release 4.03.04, that prevented the user-level
     eeppiiccss__ggeett(()) function from returning the value of a process variable having
     the type DDBBFF__SSTTRRIINNGG, has been fixed.

HP Targets Now Linked With lliibbddlldd
     ssppeecc for the HP 700 platforms now includes the flags --llddlldd in the link
     line.  The dynamic loader library is required for certain configurations,
     such as use of the SICL library on HP 10.2.

HP I/O Port Access Bug Fixed
     A bug, where special device nodes in //ddeevv//iiooppoorrttss// didn't get created
     automatically if the particular E/ISA device required a long list of port
     addresses, has been fixed.

RELEASE 4.03.07

     These notes summarize the cumulative changes made for ssppeecc release 4.03.07
     as of January 5, 1998.

ffiillee__iinnffoo(()) Usage Fixed
     The usage ffiillee__iinnffoo((ffiilleennaammee,, ""--ee"")) now returns nonzero if the file exists
     and zero if it does not, as the documentation states.  Previously, the
     return values were the opposite, which was not what was intended.

Check For Process Existence With ffiillee__iinnffoo(())
     The function ffiillee__iinnffoo((ppiidd,, ""aalliivvee"")) returns nonzero if the process
     associated with the process ID ppiidd exists and zero otherwise.

New rreeaadd__mmoottoorrss(()) Function
     A new built-in function called rreeaadd__mmoottoorrss(()) has been introduced.  It
     replaces both the ggeettaanngglleess and ggeettddiiaallss built-in commands.  For backwards
     compatibility, the standard macros now contain definitions for the two
     commands in terms of the new function.  The argument to rreeaadd__mmoottoorrss(()) is a
     bit flag with definitions as follows.  If bit 1 is set, the function
     returns dial values, otherwise user values are returned.  If bit 2 is set,
     a forced read of all hardware takes place.  (For efficiency, normally most
     motor controllers are not read if the position hasn't been changed by a
     move.)  If bit 3 is set and if there is a discrepancy between the software
     and hardware, the software will be silently corrected to match the
     hardware.  Note, the forced-read and ""ssiilleenntt--ssyynncc"" features are not yet
     implemented for all motor controllers.  Contact CSS for hardware-specific
     information.

Improvements For the @@ Operator
     It is now possible to create arrays with the @@ operator.  For example, one
     could create or refer to a series of arrays with code such as

        ffoorr ((ii==00;; ii<<1100;; ii++++)) {{
              ss == sspprriinnttff((""iimmaaggee__%%dd"",,ii))
              aarrrraayy @@ss[[225566]][[225566]]
        }}

New Debugging Modes
     A couple of (experimental) debugging modes are implemented to help diagnose
     runtime errors in macros and command files.  DDEEBBUUGG flag 0x20000 is similar
     to flag 2, which prints information about nodes during execution of the
     parse tree, but the new mode prints a somewhat more readable version.
     DDEEBBUUGG flag 0x40000 turns on a mode that attempts to print out the context
     around the input line that generates a run-time error.  This mode should
     not be used during normal operation, as it consumes extra memory and
     execution time to save all the needed information.

Motor-Listing Macros Updated
     Use of the obscure __mmoo__lloooopp macro in the standard macros has been
     eliminated.  A new sshhooww__mmoottoorr__iinnffoo(()) macro function that is more
     understandable is now used, and the macros that call it, such as wwaa, llmm,
     __hheeaadd, etc., have been revised.  Note, the __mmoo__lloooopp macro is still
     currently included in the standard macros to maintain compatibility with
     local macros that may call it.

New wwuu Motor Macro
     A new wwuu (where user) macro is included that is similar to the wwaa (where
     all) macro for displaying motor positions, but only prints the mnemonic and
     the user positions of the motors.

New wwiizz__ppaasssswwdd Utility
     To cope with shadow password files and missing ccrryypptt(()) library routines,
     ssppeecc now comes with its own wwiizz__ppaasssswwdd utility for setting the ssppeeccwwiizz
     password in the file SSPPEECCDD/ppaasssswwdd.

Bug In Saving Pseudomotor Positions Fixed
     Previously, when a move command only changed the positions of pseudomotors,
     the positions would not be saved to the sseettttiinnggss file until a real motor
     was moved or some other command that wrote out the motor settings was
     executed.  The problem was manifested when a rreeccoonnffiigg command (which reads
     the sseettttiinnggss file) was issued after moving a pseudomotor, at which time the
     position of the pseudomotor would revert to its previous value.

Raw iinnppuutt(()) From Pipes Possible
     When ssppeecc is invoked with the arguments --pp ppiidd ffdd, as is the case when
     running from a GUI front end, if ffdd (the input file descriptor) is zero,
     the raw tty modes available with the iinnppuutt(()) function and used with
     ggeetthheellpp(()) are now available.  Previously, the raw tty modes were not
     available at all when the --pp flag was used.

Number Of Queued Command Files Increased, Open Message Deferred
     Previously, the "Opened command file ..." message was printed and the file
     opened when the command file was put on the queue using the ddooffiillee(()) or
     qqddooffiillee(()) functions.  Now, the files are not opened until it is actually
     time to read them, and the "Opening ..." message isn't printed until the
     file is actually opened.  Also, the number of files that can be queued for
     input is raised from 8 to 64.  A new debugging level of 0x10000 will
     produce messages that show when input files are queued.

User Names No Longer Truncated For State File Name
     The names of the user state files (stored in the uusseerrffiilleess subdirectories
     of ssppeecc's auxiliary file directory) are now formed with the complete user
     name, rather than just the first six characters (except on the remaining
     supported platforms that only allow fourteen-character long file names).
     Thus users such as ooppiidd1188aa and ooppiidd1188bb will now have distinct state files.

OMS PC48 Supported
     The Oregon Micro System PC48 PC board motor controller is now supported.

RELEASE 4.03.06

     These notes summarize the cumulative changes made for ssppeecc release 4.03.06
     as of November 17, 1997.

More Significant Digits For Step Size
     The motor step size is now saved in the ccoonnffiigg file with up to twelve
     significant digits.  Previously, six was the maximum.  Note, the screen
     display still shows only six.

Support For PGM Binary File Format
     The ffmmtt__rreeaadd(()) and ffmmtt__wwrriittee(()) functions now recognize the ppggmm form of the
     ""ppoorrttaabbllee ppiixxmmaapp"" file format.  Usage might be:

        uubbyyttee aarrrraayy iimmaaggee[[448800]][[664400]]
        iimmaaggee__ggeett((00,, iimmaaggee))
        ffmmtt__wwrriittee((""iimmaaggee..ppggmm"",, ""ppggmm"",, iimmaaggee))

Fixed Bug in Not Finding Output Files When Restarting
     A bug, where under certain conditions ssppeecc would not find a data file if
     ssppeecc was started from a different directory than the one in which the data
     file was opened, has been fixed.

New ssuurrff Configuration For NSLS X22B Beamline
     A new flavor of the ssuurrff geometry, as used at the NSLS X22B beamline, is
     included in the ssppeecc distribution.

Implemented Standard Features For PCA-3 and Multiport MCAs
     The code for the Nucleus PCA-3 and Multiport MCA models now includes
     support for the new ssppeecc standard MCA features such as auto-run and
     soft-preset modes.  See the new _m_c_a help file for more information.

Support For Four-Chip Am9513 Counter Boards
     ssppeecc now supports up to four Am9513 chips on PC ISA-bus counter boards,
     such as the ComputerBoards CIO-CTR20.

Support For Phytron Motor Controllers
     ssppeecc now includes support for the Phytron IXE-alpha C motor controller
     boards.

Preliminary Support For Meteor Frame Grabber on LLiinnuuxx
     Preliminary support for the Meteor PCI frame grabber card is now included.
     The support is only available on lliinnuuxx platforms and requires that the
     lliinnuuxx driver for the board be installed.

Fixes For Oriel 18092
     Several code fixes are included for the Oriel Encoder Mike 18092 motor
     controller.

Fixed Bug Limiting EPICS Scaler Channels to Eight
     A bug, where the number of generic EPICS scalers per controller was limited
     to eight in the configuration editor, has been fixed.  Up to sixteen
     channels may now be configured.

RELEASE 4.03.05

     These notes summarize the cumulative changes made for ssppeecc release 4.03.05
     as of October 13, 1997.

Bug In ddaattaa__dduummpp(())/aarrrraayy__dduummpp(()) Fixed
     A bug in the parsing of the optional format arguments to the ddaattaa__dduummpp(())
     and aarrrraayy__dduummpp(()) functions that sometimes mixed up the field-width
     specification with the number of points-per-line specification has been
     fixed.

Bug In Data Group Size Check Fixed
     A bug where one of the constraints on data group size was not checked in
     the internal code has been fixed.  The constraint of 65,536 total points in
     a data group is actually less for certain values of the number-of-elements
     parameter.  The manifestation of the bug was that if a data group was
     configured which exceeded the lower constraint, it was possible to either
     create an excessively large data-points file in the uusseerrffiilleess area, or to
     have the data-group data scrambled.  The internal check on the size
     constraint has been fixed, and the syntax of ddaattaa__ggrrpp(()) has been expanded
     to aid in creating maximally sized data groups, as described next.

New Auto-Sizing Feature For ddaattaa__ggrrpp(())
     A new syntax option for the ddaattaa__ggrrpp(()) function is available.  If the
     number of points is zero, as many points as are allowed will be configured.
     If the number of points is negative, as many points as are allowed up to
     the absolute value of the argument will be configured.

New Option To ddaattaa__iinnffoo(())
     The new option ""pprreecciissiioonn"" will return the number of bytes per data group
     element.  The data type is set at installation time.  The return value will
     likely be four for float and eight for double.  Any number can be used for
     the data group argument.

RELEASE 4.03.04

     These notes summarize the cumulative changes made for ssppeecc release 4.03.04
     as of September 30, 1997.

Fix for Colors On X11 Plots
     The code for color allocation for the X11 plot windows has been improved so
     that if a chosen color can't be allocated (usually due to other processes
     hogging the display's color map) it's more likely the substituted color
     will maintain contrast between the foreground and background of the plot
     (unlike previously).  In addition, a message will be printed indicating
     that the selected color was unavailable.

Additions To eenneerrggyy..mmaacc
     A new monochromator type is now supported by the standard monochromator
     macros.  The new type is a three-motor monochromator such as is used at
     several APS beamlines, and is recognized by the motor mnemonics mmoonnoo, mmoonn__yy
     and mmoonn__zz.  See the comments in the mmaaccrrooss//eenneerrggyy..mmaacc file of the standard
     ssppeecc distribution for additional details.

     In addition, the monochromator settings are now stored in a file whose name
     is returned by the new standard macro function called mmoonnoo__sseettttiinnggss(()).  The
     default file is SSPPEECCDD/mmoonnoo__sseettttiinnggss.  (The old name for the file was
     SSPPEECCDD/gg__mmoo__dd..mmaacc.)  The local ssppeecc administrator can configure another name
     or location for the monochromator settings file by putting suitable
     definitions for the mmoonnoo__sseettttiinnggss(()) macro in the appropriate site-dependent
     macro file.  See the comments in mmaaccrrooss//eenneerrggyy..mmaacc for more information.

     Also, the sseettmmoonnoo macro has been rewritten to better handle the various
     permission issues associated with the monochromator settings file.  To
     prevent users from changing the settings, the file should exist but be
     unwritable by users.

Removed uusseerr__ggeettaanngglleess Correction From ssiixxcc Macros
     The following correction to the counts for the ssiixxcc geometry:

        ddeeff uusseerr__ggeettccoouunnttss ''SS[[ddeett]] //== ccooss((rraadd((AA[[ggaamm]]))))''

     is no longer included in the standard ssiixxcc macros.  If needed, the
     correction is more appropriately included in the SSPPEECCDD/sixc/conf.mac
     optional site macro file by the local ssppeecc administrator.

New Support For Tsuji Motor Controller
     ssppeecc now supports the Tsuji Electronics Co., Ltd. Model PM16C-02N
     16-Channel Stepping Motor Controller over GPIB and RS-232C interfaces.

New Support For Ortec Trump Multichannel Buffer
     ssppeecc now supports the Ortec Trump 2K/8K Multichannel Buffer ISA PC cards.

Block Mode Implemented For Solaris 2.x KS 3929 SCSI-CAMAC Driver
     The CSS driver for the Kinetic Systems 3929 SCSI-to-CAMAC module now
     supports block mode transfers.

Fixes For ITL-09/MM2500 Motor Controllers
     A bug introduced in release 4.02.02 where ssppeecc set the origin-search speeds
     to zero has been fixed.  ssppeecc now also programs the origin-search
     ""ttuurrnn--aarroouunndd"" time using the value configured for the home-acceleration
     parameter.

RELEASE 4.03.03

     These notes summarize the cumulative changes made for ssppeecc release 4.03.03
     as of August 13, 1997.

Preliminary Implementation Of New ssoocckk__iioo(()) Function
     The new ssoocckk__iioo(()) function for sending and reading messages over a UNIX
     socket has been added to ssppeecc.  See the _s_o_c_k___i_o help file for details.

Unused __uunniittss, UULL, UUNN References Removed
     The standard macros have had obsolete and unused references to the __uunniittss
     macro and the UULL and UUNN symbols removed.

RELEASE 4.03.02

     These notes summarize the cumulative changes made for ssppeecc release 4.03.02
     as of June 24, 1997.

Tilde (~~) Expansion Also Included For uunniixx(())
     The recently added tilde-expansion capability is now also included for the
     uunniixx(()) function.

Detector Counts Saved In rreefflleexx File
     A comment containing the value of SS[[DDEETT]] is now included with each
     reflection added to the rreefflleexx file used when fitting the orientation
     matrix.

UUBB Calculation In New ttwwoocc Code Fixed
     Inconsistencies in the UUBB code in the new ggeeoo__ttwwoocc..cc have been fixed.

Old Bug With %%cc Format in ssssccaannff(()) Fixed
     A very old bug, where the %%cc conversion in ssssccaannff(()) did not work at all,
     has been fixed.

Support For E/ISA Boards On HP 700 Substantially Cleaned Up
     Problems with ssppeecc's support for E/ISA boards on HP 700 platforms have been
     fixed.  In addition, the support is now available on HP-UX 10.20 platforms.
     All the ISA boards supported by ssppeecc should now be usable on the HP 700.
     See the _i_o_p_o_r_t_s help file and aauuxx//RREEAADDMMEE..hhpp file in the ssppeecc distribution
     for more information.

Made rraaww-mode Serial Interface Really Raw
     Previously, when setting rraaww mode for RS-232C ports, ssppeecc left software
     flow control enabled on certain platforms.  That prevented completely raw
     byte-stream I/O in applications that required it.  ssppeecc now makes the rraaww
     serial lines completely raw.

New Features For MCU-2 Motor Controller Support
     The unit/channel configuration feature is now implemented for the ACS MCU-2
     motor controllers.  In addition, motors can be configured as MMCCUU__OO, which
     means that ssppeecc will send instructions based on the old PROMS, which don't
     require a start character before each command.  Previously ssppeecc would first
     try to get a response with the start] character, then without.

New Support For The Nucleus MicroFast MCA PC Boards
     ssppeecc now supports the MicroFast MCA PC boards from The Nucleus.

New Support For The Ordela AIM Neutron Detector
     ssppeecc now supports the Ordela AIM/312 2D detector.

RELEASE 4.03.01

     These notes summarize the cumulative changes made for ssppeecc release 4.03.01
     as of June 11, 1997.

First Step in Changing Standard Macros From Data Groups To Arrays
     The standard scan macros now call the macro function ssccaann__ddaattaa(()) instead of
     the function ddaattaa__nnppuutt(()) to store the scan data.  This change is the
     beginning of the the transition from use of data groups to the new data
     arrays in the standard macros.  The pplloott..mmaacc file includes a definition of
     ssccaann__ddaattaa(()) that calls ddaattaa__nnppuutt(()).  Shortly, a new pplloott..mmaacc version will
     be included in the ssppeecc distribution that has the plotting macros also
     defined in terms of the data arrays.

New and Revised Standard Macros
     New oonnwwiizz and ooffffwwiizz macros aid in using ""wwiizzaarrdd"" mode.  The oonnwwiizz macro
     prompts for the wizard password and starts a timer that will turn the mode
     off in ten minutes.  An optional argument set the timer duration in
     seconds.  A negative argument prevents installation of the timer.

     The FFRREESSHH built-in variable is used instead of the test for the ""uunnsseett""
     attribute of many global symbols for deciding whether to assign default
     values when the standard macro files are read in.  A new uunnsseett macro
     function simplifies the test for the ""uunnsseett"" attribute in other instances.

     The new ffiillee__iinnffoo(()) function has replaced most of the uunniixx((""tteesstt ......""))
     calls.

Revisions Relating To Handling Of Orientation Matrix
     The built-in code and macros that deal with the orientation matrix, UUBB,
     have been modified a bit.  The changes should make running ssppeecc easier for
     users who enter values for UUBB manually.

     The ccaallccGG macro will now immediately calculate a new orientation matrix
     from the entered lattice parameters and the entered primary and secondary
     orientation reflections.  (Previously, the macro simply set an internal
     flag - actual recalculation of UUBB was deferred until the new values were
     needed.)

     Also, now only macros that change the values of the lattice parameters
     (sseettllaatt, sseettrrllaatt) or the orientation reflections (oorr00, sseettoorr00, oorr11, sseettoorr11,
     oorr__sswwaapp) include ccaallccGG.  (Previously, ccaallccGG was included in irrelevant
     macros.)

     A new macro UUSSEERR__UUBB, defined as ccaallcc((44,,11)), returns a value of 0 if UUBB was
     calculated the conventional way from the lattice constants and two
     orientation reflections using ccaallccGG, a value of 1 if any element of UUBB was
     assigned a value directly (if the value is different from that calculated
     by ccaallccGG), and a value of 2 if UUBB was calculated using the built-in
     least-squares refinement code.

     The ssaavvee macro now saves the UUBB values in the save file if UUSSEERR__UUBB is set.
     Otherwise a ccaallccGG is included at the end of the file, as before.

     The value of LLAAMMBBDDAA corresponding to each of the two orientation
     reflections is now saved with the ssaavvee macro and displayed with the ppaa
     macro to aid in record keeping (the value is not used in any calculations).

     The new macros sshhoowwUUBB for displaying the current values for the UUBB matrix
     and eenntteerrUUBB for typing in values for the UUBB matrix are included in the
     standard distribution.

     All the geometry source files that use the orientation matrix (ggeeoo__ffoouurrcc..cc,
     ggeeoo__ttwwoocc..cc, etc.) have been modified to accommodate the changes, as have
     the macro source files.

HKL Rounding Now Configurable
     The rather arbitrary and not universally appreciated ""ffeeaattuurree"" where ssppeecc
     rounded values for HH, KK, and LL (and other geometry values derived from
     motor positions) to five significant digits has been made optional.  By
     default, the rounding is now turned off.  It can be turned on using
     ssppeecc__ppaarr((""HHKKLL__rroouunnddiinngg"",, 11ee55)) where the argument indicates the magnitude of
     the rounding, i.e., one part in 1e5, for example.  Note, values with an
     absolute value less than 1e-10 are still rounded to zero whether or not the
     optional rounding is turned on.

New @@ Indirection Operator
     A new indirection operator has been introduced.  It allows reference to a
     variable whose name is the string value of another variable.  For example:

        SSPPEECC>> aa == ""bb""
        SSPPEECC>> bb == PPII
        SSPPEECC>> pprriinntt aa,, @@aa
        bb 33..1144115599

Relative Moves For ttttyy__mmoovvee(())
     Relative moves are allowed with ttttyy__mmoovvee(()) using syntax that requires
     adding +/-1000 to the number position arguments.  Both coordinates must
     specify either relative or absolute moves.  If one coordinate specifies a
     relative move, the absolute move in the other coordinate will be ignored.
     Please note, not all terminal types support relative moves.

New ""rreessiizzeedd??"" Option to ttttyy__ccnnttll(())
     A new ""rreessiizzeedd??""  option to the ttttyy__ccnnttll(()) updates the RROOWWSS and CCOOLLSS
     variables in the event the window size has changed and returns a nonzero
     value if the window size has changed since the last call to
     ttttyy__ccnnttll((""rreessiizzeedd??"")).

New Sequences For ttttyy__ccnnttll(()) and ttttyy__mmoovvee(())
     The new sequences \\[[uupp]], \\[[ddoo]], \\[[llee]] and \\[[nndd]] for up, down, left and
     right (non-destructive space) are recognized by ttttyy__ccnnttll(()) and the string
     argument of ttttyy__mmoovvee(()).

Enhanced uunniixx(()) To Put Command Output In A String
     The uunniixx(()) function can now take a second and third optional argument.  The
     second argument is the name of a variable in which to place the string
     output of the command in the first argument.  The maximum length of the
     string is 4096 bytes (including a null byte).  The optional third argument
     can be used to specify a larger size.

Array Updated Status Available For Non-Shared Arrays
     The aarrrraayy__oopp((""uuppddaatteedd??"",, aarrrr)) function will now work with all arrays, not
     just with shared memory arrays.  The function returns nonzero if the data
     in the array has been accessed for writing since the last check, otherwise
     returns zero.

Macro Functions Can Return Data Arrays
     Macro functions can now return a data array.  No new array storage is
     allocated.  The return value refers to the same storage as the array used
     in the macro function.

Can Use llooccaall and gglloobbaall To Make Associative Arrays
     By appending empty square brackets to the symbol names following the llooccaall
     and gglloobbaall keywords, the type of the symbol can be forced to be an
     associative array.  Such a feature is useful when using symbols as
     arguments to macro functions before their type has been established by
     usage.

CCooookkeedd Mode For Tty Automatically Restored
     ""CCooookkeedd"" mode is now automatically restored before the main prompt is
     issued after a call to iinnppuutt((--11)), which puts the tty into no-echo,
     wake-up-on-every-character mode.  Previously, a call to iinnppuutt((00)) or a
     ^^CC-type error reset was required.

Recognize Tilde (~~) Escapes In File Names
     If ssppeecc is linked with the optional GNU readline library during
     installation, tilde expansion will now be performed in the conventional
     manner.  The sequences ~~// and ~~aannyy__uusseerr// will be replaced by the full path
     names for the current user's and any user's home directory, when those
     characters are used in the arguments to the ooppeenn(()), cclloossee(()), oonn(()), ooffff(()),
     ddooffiillee(()), qqddooffiillee(()), ffiillee__iinnffoo(()) and cchhddiirr(()) functions.

ddeelleettee Command Works With 2D Associative Arrays
     The ddeelleettee command now accepts 2D associative-array element arguments.

New Test If GPIB Controller Is Responsive
     The function ggppiibb__ccnnttll((aaddddrr,, ""rreessppoonnssiivvee"")) will return a nonzero value if
     the GPIB controller (not device) associated with aaddddrr is present in ssppeecc's
     configuration file and responds to ssppeecc's presence test.

User-Editable Source Files For Binary File Read/Write
     The ssppeecc distribution now includes source files that allow users to create
     their own binary file formats for the new ffmmtt__rreeaadd(()) and ffmmtt__wwrriittee(())
     functions.  Note, though, the details of the interface are still evolving.
     Contact CSS for implementation details.

Fixes In ffmmtt__rreeaadd(()) and ffmmtt__wwrriittee(())
     A number of fixes are included for various bugs in the ffmmtt__rreeaadd(()) and
     ffmmtt__wwrriittee(()) functions.

Partial Fixes For String Arrays
     Bugs relating to the use of the new string arrays have been fixed.  Display
     of string arrays with the pprriinntt command has been fixed to print the
     elements properly even if the elements are not null-terminated.  Note,
     though, use of the string arrays is not yet completely robust.  If rows of
     the array do not end with a null byte, some ssppeecc functions that operate on
     the arrays may generate a memory fault.

Fixed Broken Feature That Warns Of Disappeared Files
     The feature added several years ago that would notify users of open output
     files that had been removed from the file system had been broken for some
     time, but is now working again.

Fix For aarrrraayy__pplloott(())
     The aarrrraayy__pplloott(()) function will now work properly with a one-element array.

Fix For wwhhaattiiss(())
     The wwhhaattiiss(()) function has been fixed to return the correct values for array
     elements, as in wwhhaattiiss((""GG[[00]]"")).  Recent releases of ssppeecc did not work
     correctly, which broke the test for UUNNSSEETT status in some of the standard
     macro files.

Fix For ggeettlliinnee(())
     The ggeettlliinnee(()) function has been fixed to reopen a file that has been
     removed and recreated between calls to ggeettlliinnee(()).

Parity Configurable For Specific Serial Devices
     Even or odd parity can now be configured for RS-232C motor controllers,
     counters, etc.  Previously only a no-parity mode was allowed.

LLiinnuuxx I/O Port Access Privilege Handling Revised
     ssppeecc now handles the problem of gaining I/O port access on lliinnuuxx in a
     different way, such that the kernel patch previously used is no longer
     needed.  However, ssppeecc must now be installed as a set-user-id root program.

Fix for X11 Fonts On Plots
     The xx1111ffiilltt program has been changed to ignore any X resource for a
     nonapplication-specific default font.  Only the ssppeecc..FFoonntt resource will be
     considered.  This fix solves the poor font size selection some users have
     experienced with ssppeecc's X11 plot windows.

Fixes For EPICS Motor Driver
     A couple of improvements have been made in the support for the EPICS motor
     driver.  The motor resolution is now read back using the proper numeric
     type, so it no longer depends on the setting of the precision variable.
     Also, the offset parameter that relates user and dial units is now
     correctly set in the EPICS data base.

Preliminary Implementation Of ESRF DC Motor Server
     Initial support for the new ESRF DC motor device server is included.

changes                      spec 4.02 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 4.02

RELEASE 4.02.04

     These notes summarize the cumulative changes made for ssppeecc release 4.02.04
     as of May 12, 1997.

New Tty Control In ttttyy__mmoovvee(()) and ttttyy__ffmmtt(())
     All the tty attribute-control strings available with the ttttyy__ccnnttll(())
     function can now be included in special character sequences (as in \\[[mmdd]]
     and \\[[mmee]] to start and end bold mode, for example) in the strings passed to
     the ttttyy__mmoovvee(()) and ttttyy__ffmmtt(()) functions.

New eenndd__mmaacc Built-In Macro
     If a macro named eenndd__mmaacc is defined, its contents will be executed when
     ssppeecc exits in normal fashion.  The eenndd__mmaacc macro will not be run if ssppeecc is
     killed or exits due to a fatal error.  If there is an error while executing
     the commands in eenndd__mmaacc, ssppeecc will exit anyway, and the eenndd__mmaacc macro will
     remain defined.

2D Associative Arrays Enhanced
     The following syntax using 2D associative arrays is now available:

        tteesstt[[""iinnddeexx11""]][[""vvaall00""]] == ""ddaattaa00""
        tteesstt[[""iinnddeexx11""]][[""vvaall22""]] == ""ddaattaa22""
        tteesstt[[""iinnddeexx22""]][[""vvaall11""]] == ""ddaattaa11""
        tteesstt[[""iinnddeexx22""]][[""vvaall33""]] == ""ddaattaa33""

        ffoorr ((ii iinn tteesstt[[""iinnddeexx11""]]))
                pprriinntt ii,, tteesstt[[""iinnddeexx11""]][[ii]]

        iiff ((""vvaall22"" iinn tteesstt[[""iinnddeexx11""]]))
                pprriinntt ""yyeess""

GPIB and CAMAC Sharing Fixed
     The HP SICL GPIB controller can now be configured as a shared controller.
     GPIB problems that occurred when the KS 3929 SCSI-to-CAMAC controller was
     configured as shared but the GPIB controller was not have been fixed.

Fixed Motion Bug With Large Backlash and Move Magnitudes
     A very old bug, where motor backlash movements didn't get done when the
     product of the backlash magnitude and the move magnitude exceeded the
     maximum value for a long integer, has been fixed.

Code For Princeton Instruments ST116 PDA Fixed
     Support for the ST116 PDA has been updated to work with ssppeecc release 4.
     The mmccaa__ggeett(()) routine now returns the number of points read, as is the
     current convention.  The status byte sent by the instrument at the end of
     the data stream and formerly returned by mmccaa__ggeett(()) is now available using
     mmccaa__ppaarr((""ssttaattuuss__bbyyttee"")).

Command Completion Tuned
     ssppeecc now does context-dependent command completion for the llssddeeff, uunnddeeff,
     pprrddeeff, llssccmmdd, ssyymmss and uunngglloobbaall commands when linked with the GNU readline
     library.  (Command completion lists the possible valid completions or fills
     in a unique completion when the <<ttaabb>> key is pressed after partial input.)

xx1111ffiilltt Core Dump Fixed
     A bug that sometimes caused a core dump from the X11 filter program xx1111ffiilltt
     when DDIISSPPLLAAYY could not be opened has been fixed.

RELEASE 4.02.03

     These notes summarize the cumulative changes made for ssppeecc release 4.02.03
     as of April 18, 1997.

Wizard Password Can Be In a SSPPEECCDD//ppaasssswwdd File
     The ssppeecc wizard password can now be located in a file named ppaasssswwdd in the
     ssppeecc auxiliary file directory (useful if shadow passwords are used, as the
     shadow file containing the encrypted password can be read only by root).
     The format of the file is the same as in the conventional ppaasssswwdd file,
     although this file need only contain the one line for the ssppeeccwwiizz user.
     The wizard password is used with the ^^WW command in the eeddccoonnff configuration
     editor and with wizard mode with the ssppeecc__ppaarr((""ssppeeccwwiizz"",, 11)) function.

The uucctt and ccoouunntteerrss Macros Fixed Up
     The ccoouunntteerrss macro will now check that the scaler channels are within
     range.  The uucctt macro will now print only the first six counters, if there
     are more than six counters configured.  Note, the uuccttnn macro can provide an
     updated display of more than six counters.

Support For Bit 3 VME Workstation Controllers Fleshed Out
     ssppeecc now supports access to the full A32 and dual-port memory address
     space, including DMA transfers to and from ssppeecc data arrays, with the Bit 3
     Model 466-1/467-1 VME controllers on Sun platforms and the Model 487-1 VME
     controller on HP platforms.

Support For Princeton Instruments CCD Camera Controllers Improved
     The code for the Princeton Instruments CCD camera controllers has been
     revised a bit.  KKiinneettiiccss mode is now supported.  The iimmaaggee__ppaarr(()) function
     argument ""kkiinneettiiccss"" is used to turn the mode on or off.  The argument
     ""kkiinnwwiinnssiizzee"" is used to set the number of rows in the kinetics-mode window.

Bug Fixed With 0xFF Printed After Parsing Macro Functions
     Odd behavior, introduced with the recent fix of an obscure bug dealing with
     parsing macro functions, where a character with ASCII value 255 would be
     sent to the screen after a macro function was parsed, has been corrected.

RELEASE 4.02.02

     These notes summarize the cumulative changes made for ssppeecc release 4.02.02
     as of March 31, 1997.

New vvmmee__mmoovvee(()) Function
     A new vvmmee__mmoovvee(()) function copies data between VME A32 address space and
     ssppeecc data arrays.  See the _v_m_e help file for more information.

Macro Source Files Displayed With pprrddeeff
     The pprrddeeff command will now display (as a comment) the name of the source
     file in which the macro was defined.  This feature, which is on by default,
     can be disabled using ssppeecc__ppaarr((""sshhooww__pprrddeeff__ffiilleess"",, 00)).

Can Now Configure Parity For rraaww Serial Interface
     The options rraaww eevveennpp and rraaww ooddddpp can now be selected on the Interfaces
     screen of the configuration editor for generic serial devices.

Bug with ccddeeff(()) Fixed
     Using the chained macro function ccddeeff(()) with just one argument will create
     an empty macro with the given name.  If the macro already exists, it will
     do nothing.  Previously, such usage was undefined.

ffiillee__iinnffoo(()) Bug Fixed
     A bug with the new ffiillee__iinnffoo(()) function, where use with a single argument
     to test for the existence of a file could result in a segmentation
     violation, has been fixed.

Bit 3 VME Support on Sun Platforms
     The Bit 3 S-BUS VME controllers for SunOS 4.x and Solaris 2.x platforms are
     now supported.

New Feature For NSK Motor Controller
     The function mmoottoorr__ppaarr((mmnnee,, ""rreeaadd"")) will now return the strings read for
     the NSK motor controller.

Tweak Macro Enhanced
     You can now change the tweak step size in the ttww macro by typing a
     numerical value at the ttww prompt.

More Flexible ESRF Format Read
     The ffmmtt__rreeaadd(()) function for the ESRF data-file format now works with
     headers that are not exactly 1024 bytes long.

Additions To ggmmccii Geometry
     The ggmmccii geometry, as used at CEA in Grenoble, now includes the latest
     revisions from the users there.

RELEASE 4.02.01

     These notes summarize the cumulative changes made for ssppeecc release 4.02.01
     as of March 9, 1997.

New Default X11 Plot Titles
     ssppeecc now sets the default X11 plot title to the name by name of the running
     program followed by the filter number as in ffoouurrcc 11, ffoouurrcc 22, ssiixxcc 11, etc.
     The plot title can still be changed using pplloott__ccnnttll((""ttiittllee==......"")).

Improved File-Write Error Handling
     When there is a write error on output to a file, ssppeecc will turn off further
     output to the file until there is a oonn(()) or ooppeenn(()) call.  That gives the
     user an opportunity to cclloossee(()) the file if no further output is possible,
     due perhaps to a down NFS connection.  Previously, ssppeecc would continue
     attempts to flush any pending output, even after write errors.

New xxxxxx__ppaarr((...... ""ddeevviiccee__iidd"")) Partially Implemented
     The mmoottoorr__ppaarr(()), ccoouunntteerr__ppaarr(()), mmccaa__ppaarr(()), mmccaa__ssppaarr(()) and iimmaaggee__ppaarr(())
     functions all now take a new ""ddeevviiccee__iidd"" parameter.  In the case of ESRF
     device server devices, the return value is the string name of the imported
     device.  For some ESRF devices, the return value will be ""??""  if the device
     was not successfully imported.  For non-ESRF devices, the return value may
     be ""??"" or some other identifier such as GPIB address or CAMAC slot.

eexxiitt Bug In Macro Functions Fixed
     A bug, whereby an eexxiitt command in a macro function didn't reset to command
     level, has been fixed.

Mnemonic Checking Fix Fixed
     The 4.01.15 fix to prevent the same mnemonic being used for both a motor
     and a counter led to some problems when restarting ssppeecc after it terminated
     abnormally.  Now the mnemonics are kept straight.

ssccaannss..44 Fix For @@AA Array Data
     A bug in ssccaannss..44..cc, where \\ continuation lines of @@AA array data were not
     ignored when the MCA data wasn't asked for, has been fixed.

X25 ssuurrff Modifications
     The ssuurrff geometry for the NSLS X25 diffractometer will now work with either
     a one- or two-motor detector-height stages.

Distinct Configuration For NI GPIB-ENET
     There is now a distinct configuration choice for the National Instruments
     GPIB-ENET controller on platforms that support that device.  With the
     GPIB-ENET configuration selected, ssppeecc will block keyboard signals during
     calls to the subroutines in the NI cciibb..oo module, as experience has shown
     those routines are not rebust with respect to signals.

More Changes For the MM2500/ITL09 Motor Controllers
     On the advice of the manufacturer, ssppeecc now sleeps for 100 msec before
     reading a response to a command sent to the MM2500/ITL09 motor controllers.
     Perhaps that will help.

changes                      spec 4.01 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 4.01

RELEASE 4.01.17 BETA

     These notes summarize the cumulative changes made for ssppeecc release 4.01.17
     BETA as of February 18, 1997.

Fixed Macro Function Bug From Previous Release
     The fix of the obscure eellssee-less iiff parsing bug in the previous release
     introduced a new bug relating to the parsing of macro functions.  Both bugs
     are now fixed, with the hope no new bug is created.

No More ccaallccGG in ggppsseett
     As there is no need for the ggppsseett macro to contain an invocation of ccaallccGG,
     it no longer does.

RELEASE 4.01.16 BETA

     These notes summarize the cumulative changes made for ssppeecc release 4.01.16
     BETA as of February 9, 1997.

mmccaa__ppaarr(()) Calls To Disabled Or Unresponsive Devices Fixed
     ssppeecc now handles mmccaa__ppaarr(()) calls to user-disabled or to unresponsive MCA
     hardware devices by printing an error message and returning a -1.
     Previously, ssppeecc's behavior varied for the different MCA devices.

Unresponsive GPIB Controller No Longer Resets To Command Level
     When accessing GPIB devices with ggppiibb__ggeett(()), ggppiibb__ppuutt(()), etc., after the
     configured GPIB controller fails the presence test, ssppeecc will no longer
     silently reset to command level.  Instead ggppiibb__ggeett(()) will return a null
     string, and the other functions will return -1.

Improvements For the MM2500/ITL09 Motor Controllers
     The code for the MM2500/ITL09 motor controller should now do a better job
     of handling timeouts in reading responses from the controller and in
     programming parameters for a unit that has had values erased from its
     non-volatile memory.

Bug With Long Time Presets For Silena MCA Fixed
     A couple of bugs in the code for the Silena MCA, where count times longer
     than 6533.5 seconds were not handled correctly, have been fixed.

RELEASE 4.01.15 BETA

     These notes summarize the cumulative changes made for ssppeecc release 4.01.15
     BETA as of January 31, 1997.

ddaattaa__ppiippee(()) Works With New Arrays
     The ddaattaa__ppiippee(()) function can now take array arguments in addition to data
     groups.  See the _d_a_t_a___p_i_p_e help file.

Fixed Parsing Bug With eellssee-less iiff
     A bug with parsing iiff statements that didn't have a matching eellssee statement
     when the body of the iiff statement contained a call to a macro function has
     been fixed.

Fixed Parsing Bug With iiff Block As Macro
     A very old and obscure parsing bug, where ssppeecc would not accept the eellssee
     keyword following an iiff statement when the statement block of the iiff
     statement was a macro containing a curly-bracket-delimited statement block,
     has been fixed.

Fixed Bug Allowing Same Mnemonic For Motor and Counter
     A bug, where one could configure the same motor mnemonic for both a motor
     and counter, has been fixed.  ssppeecc will now print an error message.

Support For Bit 3 VME Controller on HP
     The Bit 3 Model 487-1 E/ISA VME controller with the Bit 3 Model 933 support
     software is now supported by ssppeecc on HP 700 series platforms.

Support For Bit 3 PCI-VME
     The Bit 3 Model 616 and 617 PCI-VME controllers are now supported, but only
     on lliinnuuxx platforms.  The Model 617 is the more expensive model as it
     provides DMA capabilities.  Presently, ssppeecc does not support DMA transfer,
     so the new 616 is the recommended controller.

Support For Joerger VSC16/8 VME Scaler
     The Joerger VSC16/8 VME scaler module is now supported by ssppeecc.  This VME
     device requires a controller with A32/D32 capabilities.  Presently, the Bit
     3 Model 616/617 controllers on lliinnuuxx and the Bit 3 Model 487-1 on the HP
     700 series platforms are the only supported controllers with the
     capability.

Support For Galil DMC-1000 PC Board Motor Controller
     ssppeecc now provides preliminary support for the Galil DMC-1000 PC board motor
     controller, currently, only for stepping motors.

Added vvmmee__ggeett3322(()) and vvmmee__ppuutt3322(())
     See the _v_m_e help file.

Oriel 18092 GPIB Interface Supported
     ssppeecc now supports the GPIB interface on the Oriel 18092 Encoder Mike
     controller, in addition to the serial interface.  Also, the unit/channel
     configuration is supported for this controller.  Also, a bug in setting the
     gain parameter has been fixed.  (The manual incorrectly states the gain is
     set with an SSDD command.  The actual command is SSGG.)  See the _o_r_i_e_l help
     file for more information.

Fixed Oriel 18011 Bug
     A bug, which made the Oriel 18011 motor controller unusable with ssppeecc and
     which had gone unnoticed and unreported for the last three years, has been
     fixed.

Am9513 Looks For Second Chip At Two I/O Ports
     The code for the Am9513 based PC boards for timing and counting will now
     probe for the second Am9513 chip at both the base+4 and the base+2
     addresses.  The National Instruments board places the second chip at
     base+2, which now almost makes the board usable with ssppeecc.  To fully use
     the board, the prewired connections of the time base to the counter inputs
     must be changed by modified the printed circuit board.

RELEASE 4.01.14 BETA

     No notes.

RELEASE 4.01.13 BETA

     These notes summarize the cumulative changes made for ssppeecc release 4.01.13
     BETA as of December 22, 1996.

New Options To Force Row-Wise or Column-Wise Arrays
     For the functions aarrrraayy__dduummpp(()), aarrrraayy__ffiitt(()) and aarrrraayy__pplloott(()), it matters
     whether each row or each column of a two-dimensional array corresponds to a
     data point.  Previously, ssppeecc took the larger dimension of the array to
     correspond to point number.  That is still the default behavior, but now
     the new ""rrooww__wwiissee"" and ""ccooll__wwiissee"" arguments to aarrrraayy__oopp(()) can force the
     sense of the array.  See the _a_r_r_a_y_s help file for details.

New Arrays Work With eessrrff__iioo(())
     The new array data type can now be used with the eessrrff__iioo(()) function for
     device server commands that require DD__VVAARR__CCHHAARRAARRRR, DD__VVAARR__SSHHOORRTTAARRRR,
     DD__VVAARR__LLOONNGGAARRRR, DD__VVAARR__UULLOONNGGAARRRR, DD__VVAARR__FFLLOOAATTAARRRR and DD__VVAARR__DDOOUUBBLLEEAARRRR, data
     types.

KS 3929 SCSI-To-CAMAC Supported on Solaris 2.x
     CSS now provides a driver for the Kinetic Systems 3929 SCSI-to-CAMAC module
     for Sun Solaris 2.x platforms.  See the ddrriivveerrss//ssooll22__kksscc33992299//RREEAADDMMEE file
     included with Solaris 2 distributions.

Signal Blocking For HP-LAN GPIB
     Due to problems reported with the HP-LAN GPIB device hanging when
     transactions are interrupted with a signal generated by a keyboard ^^CC, that
     signal is blocked during calls to the HP SICL library for that GPIB
     controller.

RELEASE 4.01.12 BETA

     These notes summarize the cumulative changes made for ssppeecc release 4.01.12
     BETA as of December 11, 1996.

More Improvements To X11 Font Handling
     The default font pattern for the X11 high resolution window is now
     restricted to mono-spaced fonts.  In addition, scalable fonts are now
     supported.  Also, a new ""ffoonnttss==......""  option to the pplloott__ccnnttll(()) function is
     available to select a fixed size or scalable font while running ssppeecc.  See
     the _x_1_1 and new _p_l_o_t___c_n_t_l help files for more information.

RELEASE 4.01.11 BETA

     These notes summarize the cumulative changes made for ssppeecc release 4.01.11
     BETA as of November 16, 1996.

2D Associative Arrays Implemented
     The associative arrays that have always been available with ssppeecc may now be
     used with two-dimensional array indices.  Internally, The arrays are hashed
     using the string value of the first index, followed by the character \\003344
     (^^\\), followed by the string value of the second index.  A user can access
     such a 2D array element using a single index constructed according to the
     above recipe.

Bugs Fixed For the MM2500/ITL09 Motor Controllers
     Two bugs with the Newport MM2500 and MicroControle ITL09 motor controllers
     have been fixed.  ssppeecc now allows up to eight seconds for the acceleration
     ramp to be built.  The previous three second timeout was too short.  Also,
     a bug where the multiplier and divisor factors were sometimes incorrectly
     set has been fixed.

Ortec GPIB Power-On Message Flushed
     ssppeecc now does a GPIB read with a very short timeout when initializing the
     Ortec 9XX counter/timers in order to flush out the message sent when the
     modules are first powered up.  Previously, users had to perform a
     ggppiibb__ggeett(()) from the ssppeecc prompt to flush the message.

Multiple GPIB Controllers Now Allowed
     ssppeecc now allows up to four GPIB controllers to be configured by the same
     instance of ssppeecc.  In the configuration editor, use the ^^FF and ^^BB command
     on the GPIB controller line of the Interfaces screen to configure each
     controller.  In the ccoonnffiigg file, the unit number is specified as @@ggppiibb__00,
     @@ggppiibb__11, etc.  GPIB addresses can be entered using the uunniitt::aaddddrreessss syntax.
     If no uunniitt:: prefix is given, unit zero is used.  In the ccoonnffiigg file, GPIB
     unit numbers are coded in the GPIB address as

        uunniitt ** 110000 ++ aaddddrreessss..

     From ssppeecc, the ggppiibb__ggeett(()), ggppiibb__ppuutt(()), etc., commands can use either the
     above coding or the ""uunniitt::aaddddrreessss"" syntax.  Note that sharing a GPIB
     controller among multiple instances of ssppeecc is still possible, but ssppeecc
     still uses only one semaphore to regulate access to each shared controller.
     Thus, if there are two GPIB controllers shared by more than one process,
     when any process accesses either controller, other processes will be
     blocked from accessing both controllers until the first process releases
     the semaphore.

Some Improvements for National Instruments GPIB
     An old bug, apparently not manifested until recently where a short integer
     was used to hold transfer counts, which should have limited transfers to
     32K or 64K bytes, has been fixed.  Also, the error message printed with
     National Instruments GPIB controllers are now a little more informative.
     Also, the EECCIICC error (Not Controller In Charge or lost Controller In Charge
     during command) no longer causes an error reset.  That change is to
     accommodate sharing of the GPIB-ENET model, which seems to always generate
     an EECCIICC error when a new process connects to it.

New Platform Targets
     The new installation platforms eessrrff__lliinnuuxx, and eeppiiccss__ssoollaarriiss22 are
     available.

New ggmmccii Geometry
     A new ggmmccii geometry, as used at CEA in Grenoble is supported.

Some Improvements To X11 Font Handling
     On a number of lliinnuuxx installations, the font data base (consisting of the
     files //uussrr//lliibb//XX1111//ffoonnttss//**//ffoonnttss..ddiirr), is often incorrect on new
     installations, which leads to BBaadd nnaammee errors with the ssppeecc X11 graphics.
     The xx1111ffiilltt program now prints a lengthly error message explaining that the
     system administrator should fix the problem by running the mmkkffoonnttddiirr
     utility.  In addition, some font debugging is available by entering the
     commands pplloott__mmoovvee((00,,00,,"" "",,99990011)) to enable font debugging and
     pplloott__mmoovvee((00,,00,,"" "",,99990000)) to disable it.

Image Handling Of ROI and Binning Changed
     No text.

ssppeecc Installation Faster With Respect To GNU Readline
     Previously, when ssppeecc was installed configured to be linked with the GNU
     readline library, the library source files were compiled even though the
     object modules were included in the ssppeecc distribution in a library archive.
     The installation procedure has been modified to avoid the extra
     time-consuming compilation.

ESRF MCA Bug Fixed
     A bug with the ESRF MCA code, where the values reported for real and live
     time were swapped, has been fixed.

ffmmtt__rreeaadd(())/ffmmtt__wwrriittee(()) Bugs Fixed
     No text.

ccaallccGG Removed From sseettEE Macro
     It turns out there is no need for the ccaallccGG macro in sseettEE so sseettEE no longer
     contains ccaallccGG.

Silena 7328/7329 MCA Supported
     ssppeecc now supports the Silena 7328/7329 MCA on a GPIB interface.

New eessrrff__iioo(()) Data Type Added
     The DD__SSTTAATTEE__FFLLOOAATT__RREEAADDPPOOIINNTT data type is now supported in the eessrrff__iioo(())
     function.

RELEASE 4.01.10 BETA

     These notes summarize the cumulative changes made for ssppeecc release 4.01.10
     BETA as of October 2, 1996.

OMS PC-58 and Bit-3 403 Ported To HP
     The Oregon Micro Systems PC-58 ISA motor controller and the Bit-3 Model 403
     ISA VME controller can now be used on HP platforms with E/ISA slots.  These
     boards require both I/O port access and memory mapping.

EPICS Unit/Channel Numbering Starts At One
     When using the manual unit/channel number configuration, EPICS motor
     channels are now numbered starting from one, rather than zero, as is the
     case with most ssppeecc motors.  The change is to match the conventional motor
     numbering of an EPICS data base.

EPICS Scaler Enhancements
     ssppeecc support for the EPICS scaler records now uses callbacks to determine
     when counting is finished.  Previously, the less efficient polling method
     was used.

SSIIGGIINNTT From Another Process Handled Better
     Previously, for ssppeecc installations where ssppeecc was linked with the GNU
     readline library, if another process sent ssppeecc a SSIIGGIINNTT signal, ssppeecc would
     ignore the next line of input.  That should no longer be the case.

RELEASE 4.01.09 BETA

     These notes summarize the cumulative changes made for ssppeecc release 4.01.09
     BETA as of September 17, 1996.

GPIB IFC Can Now Be Asserted
     You can now use ggppiibb__ccnnttll((aa,, ""iiffcc"")), to send the IFC (interface clear)
     message to reset the GPIB bus.  See the _g_p_i_b help file for more
     information.

aarrrraayy__oopp((""ccoonnttrraacctt"")) Improved
     When used with one-dimensional arrays, the ""ccoonnttrraacctt"" option of aarrrraayy__oopp(())
     will now use the first argument after the array name as the contraction
     factor.  Previously, that first argument was ignored, and the following
     argument was used.

eeddccoonnff Bug On HP Fixed
     A problem, seemingly only manifested on the HP platforms, where the eeddccoonnff
     configuration editor would exit prematurely while writing out the
     configuration and motor settings file when the path name for the files was
     too long, has been fixed.

RELEASE 4.01.08 BETA

     These notes summarize the cumulative changes made for ssppeecc release 4.01.08
     BETA as of September 10, 1996.

Removed Files No Longer Recreated On Startup
     Previously, if a file opened in a ssppeecc session was removed before a
     subsequent session, ssppeecc would recreate the file on startup.  That no
     longer happens.  Instead a warning message is printed that the old file
     file has disappeared.  Of course, the next time output is directed to a
     file by the same name, ssppeecc will create a new instance of the file.

Parser Bug Fixed
     A bug, where ssppeecc would expand the macro name in a ddeeff or rrddeeff statement
     immediately following an eellssee-less iiff statement inside a statement block,
     has been fixed.

Case Insensitive ddeevv__iimmppoorrtt(()) For ESRF Devices
     ssppeecc now does a case-insensitive hashing of device names to keep track of
     which devices are in use.  Previously, ssppeecc would attempt to re-import a
     device if the name was spelled with a different capitalization scheme.

New iimmaaggee__ppaarr(()) Options
     The iimmaaggee__ppaarr(()) function now accepts the options ""bbeegg__ccooll"", ""eenndd__ccooll"",
     ""bbeegg__rrooww"" and ""eenndd__rrooww"" with values to set the iimmaaggee__ggeett(()) region of
     interest.

New vvmmee__ggeett(()) and vvmmee__ppuutt(()) Functions
     The new functions vvmmee__ggeett(()) and vvmmee__ppuutt(()) are available for doing A16, D8
     transfers to VME modules.  A24, A32, D16 and D32 transfers await a future
     release.

New Array Functions
     The new functions aarrrraayy__ffiitt(()), aarrrraayy__dduummpp(()) and aarrrraayy__pplloott(()) do for arrays
     what ddaattaa__ffiitt(()), ddaattaa__dduummpp(()) and ddaattaa__pplloott(()) do for data groups.

aarrrraayy__oopp(()) ""xx__aatt__mmiinn"" and ""xx__aatt__mmaaxx"" Commands Fixed
     The ""xx__aatt__mmiinn"" and ""xx__aatt__mmaaxx"" options to the aarrrraayy__oopp(()) function now work
     correctly.

New aarrrraayy__oopp(()) Options
     The aarrrraayy__oopp(()) function now accepts the ""rroowwss"" option to return the number
     of rows in an array, the ""ccoollss"" option to return the number of columns in
     an array and the ""uuppddaatteedd??""  option, which returns nonzero if values in a
     shared array have been modified by ssppeecc or a cooperating external process.
     In addition, the ""??""  option lists whats options are available.

EPICS Motor Enhancements
     There are now two kinds of EPICS motors available, selected as either
     EEPPIICCSS__MM11 or EEPPIICCSS__MM22 in the configuration file.  The first is for
     ssppeecc-configured motors, where the motor parameters is the ssppeecc
     configuration file are written to the EPICS data base.  The second is for
     EPICS-configured motors, where ssppeecc obtains the initial motor parameters
     from the EPICS data base.  In either case, parameter values set using
     mmoottoorr__ppaarr(()) while ssppeecc is running will be set in the EPICS data base.  For
     EEPPIICCSS__MM22 motors, position discrepancies between ssppeecc and the EPICS data
     base will be always resolved in favor of EPICS.  Also, the unit/channel
     configuration feature is now available for EPICS motors.

OMS PC-58 Motor Controller Now Supported
     The Oregon Micro Systems Model PC-58 motor controller is now supported on
     lliinnuuxx platforms and in driverless mode only.  Both the I/O-port address and
     memory-map address must be set in the configuration file to agree with the
     board jumpers.  The interrupt on the board should be disabled.

Memory-Map Address Configurable For PC Boards
     For PC boards requiring both a memory-map address and an I/O port address
     in their configuration (such as the Bit-3 Model 403 VME controller and the
     OMS PC-58 motor controller on lliinnuuxx platforms), the configuration editor
     now allows entry of the memory-mapping address in hexadecimal in the DDEEVVIICCEE
     column.

RELEASE 4.01.07 BETA

     No notes.

RELEASE 4.01.06 BETA

     No notes.

RELEASE 4.01.05 BETA

     These notes summarize the cumulative changes made for ssppeecc release 4.01.05
     BETA as of August 20, 1996.

Command Completion Available With GNU Readline Library
     The command-completion feature of the GNU readline library is now enabled
     (if ssppeecc is linked with the GNU readline library).  In this preliminary
     implementation, possible completions for the first word of a command are
     built-in keywords and macro names.  Possible completions for subsequent
     words are filenames.  The tab key is what is initially bound to the
     command-completion function.

Added Protection From State File Corruption
     Previously, there was an opportunity for the state file to get corrupted on
     exiting, if a signal arrived at an indelicate time.  Signals are now
     properly blocked during the save state that occurs when ssppeecc exits.  The
     problem seemed to only show up when ssppeecc was run as the back end of a GUI
     program that sent redundant signals when terminating ssppeecc.

New FFRREESSHH Built-In Variable
     A new built-in variable named FFRREESSHH exists.  It has a nonzero value if ssppeecc
     was invoked with the --ff (fresh start) flag or if a fresh start was forced
     by an incompatible state file version.  The value is zero otherwise.

New ccddeeff(()) Options
     The chained-macro function ccddeeff(()) now accepts two additional flags:
     ccddeeff((""nnaammee"",, """",, kkeeyy,, ""eennaabbllee"")) and ccddeeff((""nnaammee"",, """",, kkeeyy,, ""ddiissaabbllee"")).  The
     first case enables the parts of the chained macro nnaammee associated with kkeeyy,
     while the second case disables those parts.  If nnaammee is the null string """",
     then all chained macros that have parts associated with kkeeyy will have those
     parts enabled or disabled.

New ffiillee__iinnffoo(()) Built-In Function
     A new ffiillee__iinnffoo((ffiillee__nnaammee [[,, ccmmdd]])) built-in function provides most of the
     information available about a file or device available from the ssttaatt(())
     system call.  If invoked with only the first ffiillee__nnaammee argument,
     ffiillee__iinnffoo(()) returns zero if the file exists and nonzero otherwise.  If
     ffiillee__nnaammee is the string ""??"", the possible values for ccmmdd are listed.  See
     the _f_u_n_c_s help file for more information.

More Attribute Control Strings For ttttyy__ccnnttll(())
     Attribute strings to set bold, blink, reverse-video and underline mode are
     now available with the ttttyy__ccnnttll(()) function.  See the _f_u_n_c_s help file for
     more information.

ttttyy__mmoovvee(()) Parses New Attribute Escape Strings
     New attribute escape sequences have been introduced to simplify designing
     text screens in ssppeecc.  The syntax of the sequence is ""\\[[xxxx]]"" where xxxx is
     one of the two-character control strings recognized by the ttttyy__ccnnttll(())
     function, such as ccll to clear the screen or ssoo to start stand-out mode.
     Presently, only the ttttyy__mmoovvee(()) function recognizes these sequences.
     Adapting the ttttyy__ffmmtt(()) function to parse the strings is in progress.

Change In Parsing Of \\[[
     To accommodate the ""\\[[xxxx]]"" escape sequences, a backslash preceding a left
     square bracket is now passed through the lexical analyzer.

New VVaarr iinn  AArrrraayy Syntax
     A syntactical feature for associative arrays (forms of which are available
     in the standard aawwkk and ggaawwkk utilities) is now available in ssppeecc.  Namely
     the construction

        iiff ((vvaarr iinn aassssoocc__aarrrraayy)) {{
                     ......
        }}

     will evaluate true or false depending on whether the associative array
     aassssoocc__aarrrraayy contains an element with index vvaarr..  In addition, the
     construction

        ffoorr ((vvaarr iinn aassssoocc__aarrrraayy)) {{
                   pprriinntt aassssoocc__aarrrraayy[[vvaarr]]
        }}

     will run through each element of the associative array aassssoocc__aarrrraayy
     assigning to vvaarr the string value of the index of each element.  Note,
     though, the order in which the elements are assigned is indeterminate and
     not constant.

New ddeelleettee Keyword For Associative Arrays
     Individual elements of associative arrays may be removed using the new
     ddeelleettee keyword, as in

        ddeelleettee mmiisscc[[""ffoooo""]]

New aarrrraayy__oopp(()) Commands
     New commands are available for array_op() to determine whether the array is
     in shared memory and the number of rows or columns in the array.  In
     addition, aarrrraayy__oopp((""??""))  lists the possible operations.

New Facility To Read and Write Binary Data
     The new ffmmtt__rreeaadd(()) and ffmmtt__wwrriittee(()) functions are available for reading and
     writing the new array data type from and to binary files.  A variety of
     binary formats will be supported, and there will be provisions for users to
     modify existing or add new formats.  The facility includes provisions for
     reading and writing file header information.

String-Array Data Type Introduced
     Preliminary implementation of a string-array data type in available.  Each
     row of the array can contain one string.  The array must be dimensioned
     with enough columns to accommodate of the strings anticipated.  ssppeecc will
     allocate one extra byte per row to make sure the strings are null
     terminated.

New iimmaaggee__ppaarr(()) Options
     The iimmaaggee__ppaarr(()) function now takes two new options.  With the ""aauuttoo__rruunn""
     mode turned on, image devices will be started and stopped with ssppeecc's
     built-in counting functions.  With the ""ssoofftt__pprreesseett"" mode in effect, when
     in ""aauuttoo__rruunn"" mode, the image device is programmed with the count time
     passed to ssppeecc's counting function.  Otherwise, the device is started and
     stopped when the configured timer starts and stops.

A ccoonnffiigg__mmaacc Macro Will Be Run After rreeccoonnffiigg
     If a macro named ccoonnffiigg__mmaacc is defined, it will be run automatically after
     reading the hardware configuration file on program startup and after the
     rreeccoonnffiigg command (run from the standard ccoonnffiigg macro).

No More Unwanted Files Named ppiippee
     Previously the special output file name ""ppiippee"" was only special when ssppeecc
     was invoked with the --pp flag.  At sites where ssppeecc is sometimes used with
     the --pp flag, macros that opened ""ppiippee"" would leave files named ppiippee lying
     about when ssppeecc wasn't invoked with the --pp flag.  Now, the output file name
     ""ppiippee"" is always special.  When not invoked with the --pp flag, ssppeecc ignores
     commands to send output to ""ppiippee"".

Shared Arrays Now Readable By All
     The shared-data segment used by the shared arrays is now created with
     permissions set to allow any user to read the data.

More Robust Method Of Storing Miscellaneous State Parameters
     The method for saving certain miscellaneous items in the state file, such
     as the ssppeecc__ppaarr(()) and pplloott__ccnnttll(()) options and various hardware parameters,
     has been improved.  Previously relinking ssppeecc would generally cause the
     saved values of the parameters to be lost.

More Robust Handling Of Missing Settings File
     Previously, if the motor sseettttiinnggss file was missing or empty, ssppeecc would
     automatically switch to simulate mode.  That behavior has been changed.
     Although a missing sseettttiinnggss file indicates some sort of administrative or
     system problem, users have indicated they would prefer ssppeecc not to switch
     to simulate mode, so that they can run the ccoonnffiigg macro to change the motor
     settings.

ESRF MCA Start/Stop Functions Enhanced
     No text.

Princeton Instruments CCD Support Enhanced
     No text.

ESRF MAXE Bug Fixed
     A bug relating to using the ESRF MAXE motor controller with the
     unit/channel configuration, whereby it was possible for the wrong motor to
     move, has been fixed.

OMS Limit Bug Fixed
     An old bug, where motors controlled by any of the supported Oregon Micro
     Systems motor controllers couldn't be moved off of a limit switch, has been
     fixed.

Fix for PI Motor Controller
     A bug, where use of a too-small buffer for reading a reply from the Physik
     Instrumente C-804 DC motor controller caused various problems elsewhere in
     ssppeecc, has been fixed.

Unit/Channel Configuration For the E500 Fixed
     Bugs in the new unit/channel configuration option for the DSP E500 CAMAC
     motor controllers have been fixed.

Fix For the Newport MM2000 PC Board Motor Controller
     A recently introduced bug that prevented the PC board version of the
     Newport MM2000 motor controller from working at all has been fixed.

Fixes For the Huber 9000 Motor Controller
     Two bugs relating to the Huber SMC 9000 stepping motor controller have been
     fixed.  Step sizes other than 1000 steps per degree are now allowed.  A
     truncation error that sometimes occurred on reading the motor position has
     been corrected.

RELEASE 4.01.04 BETA

     These notes summarize the cumulative changes made for ssppeecc release 4.01.04
     BETA as of July 17, 1996.

NEW DEVELOPMENTS
     The following are new developments for release 4.

Input Push Back Handling Improved
     The code that handles the macro expansion has been brought into the modern
     era.  Previously, a temporary file was used to handle very large macro
     expansion.  Now expansion is handled entirely in dynamically allocated
     memory.  The new scheme is more efficient, and allows clear macro debugging
     messages.

Revised Macro Debugging Format
     The output format for macro debugging (DDEEBBUUGG==225566) has been redone.

Source Code Control Introduced
     The source code for ssppeecc release 4 is now under source code control.  Such
     a change won't mean much to the user, but it does indicate we are getting
     serious about this release.

CAMAC Driver Ported to lliinnuuxx
     The CSS CAMAC driver for the DSP 6001/2 with PC 004 CAMAC controller is now
     available on lliinnuuxx.  See the ddrriivveerrss//RREEAADDMMEE file for more information.

PARALLEL CHANGES FROM RELEASE 3

Special Check For an xxtteerrmm by eeddccoonnff
     On some platforms, the ccuurrsseess library calls made from the eeddccoonnff
     configuration editor from an xxtteerrmm window caused strange characters to
     appear on the screen.  That problem has been fixed.

sshhooww..aawwkk Bug Fixed
     A bug in the sshhooww..aawwkk script, where there wasn't a pause when there were
     less than twelve plots on the last page when the --ww (wait) flag was used,
     has been fixed.

Princeton Applied Research 283 Device Supported
     Preliminary (and only partial) support for the Princeton Applied Research
     Model 283 Potentiostat/Galvanostat is available.

Anorad Motor Controllers Supported
     Preliminary support for the Anorad I-Series motors controllers is
     available.

KS 3988 GPIB-To-CAMAC Bug Fixed
     A recently introduced bug in the presence test for the Kinetic Systems 3988
     GPIB-To-CAMAC controllers has been fixed.

changes                      spec 4.00 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 4

RELEASE 4 - text in preparation

     These notes describe the general features added to ssppeecc for release 4.

Introduction
     ssppeecc release 4 has been in the works for many months.  It includes many new
     features to make the program easier to use and to support new hardware
     devices.  One of the main reasons for the new release is to accommodate
     two-dimensional detectors.  To that end, a new array data type has been
     added, along with functions and operators to work on the arrays.

     Preliminary support for a number of CCD cameras is already available,
     including models from Princeton Instruments and Photometrics.

     Descriptions of the new features in release 4 follow.

New Macro Functions
     Macro function are now available.  Macros can now be defined to return
     values and can be used as operands in expressions.  The macro definition
     can include function arguments, which then become available to the body of
     the macro function.  For example,

        ddeeff ffaaccttoorriiaall((nn)) ''{{
                iiff ((nn <<== 11))
                        rreettuurrnn((11));;
                rreettuurrnn((nn ** ffaaccttoorriiaall((nn--11))))
        }}''

New Array Data Type
     A new type of data array has been created.  Besides eventually replacing
     the never-popular data groups in the standard macros, the new arrays add
     new capabilities to ssppeecc.  Unlike ssppeecc's traditional aassssoocciiaattiivvee arrays,
     which can be indexed by arbitrary numbers or strings and which store
     elements in no particular order and not particularly efficiently, the new
     array data types are indexed by consecutive integers starting from zero and
     store data in contiguous memory, allowing efficient access.  The new arrays
     must be declared and dimensioned with the new aarrrraayy keyword to allow ssppeecc
     to allocate memory for the array and to distinguish the new arrays from the
     associative arrays.  See the _a_r_r_a_y_s help file for detailed information.

New CCD Camera Support
     Support for image acquisition using CCD cameras is now part of ssppeecc.
     Currently hardware support is available for a Photometrics model on an HP
     700 platform, several Princeton Instruments models on Sun platforms using
     an S-Bus SDV interface card and for the ESRF Frelon camera over several
     interfaces.  Support for additional cameras will be added as user needs are
     made known to CSS.

     The iimmaaggee__ggeett(()), iimmaaggee__ppuutt(()) and iimmaaggee__ppaarr(()) functions are available for
     reading the image and controlling the hardware.  Also, the new functions
     ffmmtt__wwrriittee(()) and ffmmtt__rreeaadd(()) allow the array data from the CCD cameras to be
     written to and read from binary data files.

New Password Protection For Designated Motors
     A new option to the ssppeecc__ppaarr(()) function allows ssppeecc administrators to gain
     access to motors locked out in the ccoonnffiigg file to ordinary users.  This
     features allows the administrator to position the motors without having
     first to go into the configuration editor to change access modes.  Entering
     ssppeecc__ppaarr((""ssppeeccwwiizz"",, 11)) causes ssppeecc to prompt for the ""WWiizzaarrdd''ss ppaasssswwoorrdd"".
     If entered correctly, the characters __WWIIZZ are appended to the prompt to
     remind the user of the special powers, and motors configured with protected
     status can be moved.  Entering ssppeecc__ppaarr((""ssppeeccwwiizz"",, 00)) disables the special
     mode.  The encrypted specwiz password is taken from the //eettcc//ppaasssswwdd file,
     just as with the specwiz feature for the configuration editor.

New ssrraanndd(()) Function
     The new function ssrraanndd((vvaalluuee)) sets the seed value for the random number
     generator used by the rraanndd(()) function to the integer vvaalluuee.  This feature
     allows the same sequence of random numbers to be generated reproducibly by
     resetting the seed to the same value.

wwhhaattiiss(()) Function Enhanced
     The wwhhaattiiss(()) function now produces a text description of the object
     specified by its first argument, if a second nonzero argument is supplied.
     The wwhhaattss macro takes advantage of the new syntax.

New MCA Features
         mca_par("disable")
         mca_get(array)
         mca_put(array)
         mca_spar(), mca_sput(), mca_sget()
         numbering is fixed in config file with @
         numbering needn't be consecutive
         mca_sel("?")
         ROI support

     PCA-II, PCA-3, PCA Multiport implements array get/put

Can Dynamically Assign Monitor Channel
     For certain counters, the scaler channel used for the monitor preset can be
     changed using the command ccoouunntteerr__ppaarr((mmnnee,, ""mmoonniittoorr"")).  Counters that
     currently support this feature are the KS 3640 CAMAC counter, the Joerger
     VSC16/8 VME scaler and the generic EPICS scaler.

Unlimited String Length For pprriinnttff(()) Family
     There is no longer a limit to the lengths of strings that can be printed or
     formatted using the pprriinntt, pprriinnttff(()), sspprriinnttff(()) and ffpprriinnttff(()) functions.

sseerr__ggeett(()), sseerr__ppuutt(()) Revised
     The sseerr__ggeett(()) function has been revised, rationalized ser_par(sel,
     "timeout")

Macro Facility Internals Rewritten
     The internal code for handling macros has been entirely rewritten.  Also,
     the internal copies of the macros are now saved in the same file with the
     other state information.  There are no more uusseerrffiilleess//uusseerr__ttttyy##MM in the
     auxiliary file directory

New Version of GNU Readline Library Bundled
     A newer version of the GNU readline library is now bundled with ssppeecc.

Obsolete Functions and Commands Are Gone
     The long-obsolete ffiixxssttaattee and ggeettssttaattee commands are gone (although the
     once-related ssaavvssttaattee command still exists).  The obsolete functions
     ppll__xxggeett(()), ppll__yyggeett(()), ppll__ppuutt(()), ppll__aannaall(()), ppll__dduummpp(()) and pplloott__ppttss(()) have
     been eliminated from the program, although, for the sake of way-backwards
     compatibility, the file mmaaccrrooss//ccoommppaatt..mmaacc contains replacement definitions
     for the functions.

New Hardware Support
     Highland Tech VME HLV 544 motor controller

     BI9000 correlator support

     Many improvements to ESRF support

     new config screen for MCA/CCD

     other config changes ....

changes                      ssppeecc 3.03 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 3.03

RELEASE 3.03.26

     These notes summarize the cumulative changes made for ssppeecc release 3.03.26
     as of May 27, 1996.

Default Hardware Poll Interval Changed From 40 To 10 msec
     The hardware poll interval, used with non-interrupt driven devices, has
     been changed from 40 to 10 milliseconds.  The value can be changed using

         ssppeecc__ppaarr((""hhddww__ppoollll__iinntteerrvvaall"",, mmsseecc))

     where mmsseecc is the poll interval in milliseconds.  The function
     ssppeecc__ppaarr((""hhddww__ppoollll__iinntteerrvvaall"")) returns the current value.  Note that the
     actual interval may vary.  Most platforms have a resolution of only ten
     milliseconds in the system clock, and different platforms round mmsseecc up or
     down.

Improvements For the Microcontrole ITL09 Motor Controller
     A number of improvements have been made for the Microcontrole ITL09 motor
     controller.  In particular, the nonconsecutive unit/channel numbering
     feature of the configuration editor is now supported for this controller.

Support For Newport Model MM2500 and MM4000 Controllers Added
     The Newport Model MM2500 and MM4000 motor controllers are now supported by
     ssppeecc.

MMC32 Delay Is Now Configurable
     The sleep delay inserted after each command sent to the NSLS MMC32 motor
     controller is now user configurable.  Use

         mmoottoorr__ppaarr((mmnnee,, ""ddeellaayy"",,  mmsseecc))

     where mmnnee is the mnemonic of any motor controlled by the MMC32 and mmsseecc is
     the delay time in milliseconds.  The delay affects all motors controlled by
     the MMC32.  The default value is 100 msec.

RELEASE 3.03.25

     These notes summarize the cumulative changes made for ssppeecc release 3.03.25
     as of May 7, 1996.

The ttwwoocc Code Has Been Revised
     The geometry code and macros for the two-circle diffractometer have been
     rewritten to use an orientation matrix and to allow least squares
     refinement of the lattice parameters.  The sseettllaatt and sseettrrllaatt macros are
     used to set the direct or reciprocal lattice parameters.  The oorr00 and
     sseettoorr00 macros are used to set the orientation reflection.  The rreefflleexx__bbeegg,
     rreefflleexx__eenndd and rreefflleexx macros are used to save reflections used to refine
     the lattice parameters, in the same way as described in the FFoouurr--CCiirrccllee
     RReeffeerreennccee.  The AALLPPHHAA and BBEETTAA parameters have been eliminated.  Note, if
     you desire, the previous version of ttwwoocc can be installed by selecting
     ttwwoocc__oolldd from the installation menu.  Be sure to start fresh the first time
     running the new version of ttwwoocc.

New ..XXddeeffaauullttss Option For Size Of Plot Points
     You can now choose among several pixel patterns for drawing the smallest
     points on the ssppeecc X11 high-resolution plots.  The selection is made in the
     ..XXddeeffaauullttss resource file.  See the explanation of the DDoottSSiizzee resource in
     the _x_1_1 help file for details.

No CAMAC Z Issued On Startup With DSP 6001 In Driverless Mode
     By user request, ssppeecc no longer issues the CAMAC Z crate initialization
     command on startup when using the DSP 6001/2 CAMAC crate controller in
     driverless mode.  (With the CSS driver, whether the automatic Z is issued
     is determined by a driver-installation option.)  The function ccaa__ccnnttll((""ZZ""))
     can always be issued at the ssppeecc prompt to initialize the crate, if
     necessary.

Small Change In ccoouunntt__eemm Macro
     The CCOOUUNNTT__TTIIMMEE variable is now set to the current count time before
     (instead of after) the call of the uusseerr__pprreeccoouunntt macro in the ccoouunntt__eemm
     macro that is called by all the standard counting macros.

RELEASE 3.03.24

     These notes summarize the cumulative changes made for ssppeecc release 3.03.24
     as of April 1, 1996.

Improvements For Newport MM2000 and MM3000 Motor Controllers
     A number of improvements have been made for the Newport (formerly Klinger)
     MM2000 motor controller.  The nonconsecutive unit/channel numbering feature
     of the configuration editor is supported for this controller.  Also,
     serial-interface daisy-chaining is now supported.  The Newport MM3000 model
     has firmware compatible with the MM2000, so is also now supported by ssppeecc.

Improvements For Huber SMC 9000 Motor Controller
     The nonconsecutive unit/channel numbering feature of the configuration
     editor is now supported for the Huber SMC 9000 motor controller.  ssppeecc now
     allows more than one of these controllers to be configured.  In addition,
     the error checking has been improved, although the nature of the controller
     makes the potential for recovery after a communications error unlikely.  In
     addition, a command pass through capability is now available using

         mmoottoorr__ppaarr((mmnnee,, ""sseenndd"",,  ccmmdd))

     to send the command ccmmdd to the controller and

         mmoottoorr__ppaarr((mmnnee,, ""rreeaadd"",,  ccmmdd))

     to send the command ccmmdd and return as a string an expected reply.  The
     motor mnemonic argument mmnnee only serves to select which controller to use.
     Unlike the implementation for other controllers, the motor number must be
     explicitly included in the user message for the Huber SMC 9000.  For
     example,

         mmoottoorr__ppaarr((tttthh,, ""sseenndd"",, ""BBEEEEPPOOFFFF""))

     results in the string ""BBEEEEPPOOFFFF;;\\rr\\nn"" being sent to the controller
     associated with the tttthh motor.

Pseudomotor cchhgg__ddiiaall(()) Bug Fixed
     A bug, where the cchhgg__ddiiaall(()) function (as used by the sseett__ddiiaall macro),
     didn't work properly for pseudomotors or any motor with NNOONNEE as controller
     in the ccoonnffiigg file, has been fixed.

Bug Fix For Alternate Command-Line History
     A bug, where the number of commands saved in the run-time history list was
     not limited when using the optional, alternate command-line history
     library, has been fixed.  The run-time history is now limited to 1,000
     commands, just as is the history saved in the state file.

RELEASE 3.03.23

     These notes summarize the cumulative changes made for ssppeecc release 3.03.23
     as of March 13, 1996.

New Site-Dependent IInnssttaallll Parameters
     The ssppeecc IInnssttaallll program now prompts for additional parameters for
     site-dependent compiler flags, site-dependent object modules and
     site-dependent libraries.

Experimental User-Configurable Pseudomotor Code
     Files dealing with an experimental, user-configurable, compile-time
     pseudomotor capability are included in this distribution.  Consult CSS
     before attempting to use.

RELEASE 3.03.22 - Several Portability Fixes

     March 5, 1996:  Several minor changes have been made for portability
     considerations.

RELEASE 3.03.21 - Bug In eeddccoonnff Wizard-Mode Fixed

     February 21, 1996:  A bug, where the optional motor parameters could not be
     read in on wizard-mode protected motors, has been fixed.

RELEASE 3.03.20

     These notes summarize the cumulative changes made for ssppeecc release 3.03.20
     as of February 13, 1996.

Code For CAMAC Kinetic Systems 3640 Counter/Timer Overhauled
     Problems with the software handling of the custom hardware gating on the
     Kinetic Systems 3640 CAMAC counter/timer, as used at CHESS (and elsewhere),
     have been fixed.

New mmoottoorr__ppaarr(()) Option for ESRF Maxe Motor Device Server
     The new mmoottoorr__ppaarr(()) option,

         mmoottoorr__ppaarr((mmnnee,, ""ggeett__ppaarrss""))

     reads the current base rate, acceleration and slew rate parameters from the
     ESRF Maxe device server and updates the values that will be returned by
     mmoottoorr__ppaarr(()) with the ""bbaassee__rraattee"", ""aacccceelleerraattiioonn"" and ""vveelloocciittyy"" arguments.

RELEASE 3.03.19

     These notes summarize the cumulative changes made for ssppeecc release 3.03.19
     as of February 1, 1996.

Improvements To the cchheellpp Stand-Alone Help Viewer
     The stand-alone ssppeecc help file viewer cchheellpp will now use the same rules as
     ssppeecc for selecting the auxiliary file directory.  A --DD _d_i_r_e_c_t_o_r_y option
     will override a SSPPEECCDD environment variable, and the environment variable
     will override the compiled-in default.  Also, cchheellpp has been fixed to no
     longer change tty terminal modes if the standard output is not a tty, such
     as when the output of cchheellpp is piped through a standard file browser such
     as mmoorree or lleessss.

Wizard-Mode eeddccoonnff Bug Fixed
     A bug, whereby optional motor parameters (from the eeddccoonnff mm screens) would
     not be read in by eeddccoonnff for motors with wizard-level protection, has been
     fixed.

RELEASE 3.03.18

     These notes summarize the cumulative changes made for ssppeecc release 3.03.18
     as of January 19, 1996.

DDIISSPPLLAAYY Can Now Be Assigned and Exported
     ssppeecc now includes DDIISSPPLLAAYY as one of its built-in variables.  The
     environment variable DDIISSPPLLAAYY is used by X Window clients to figure out on
     which host to run.  On startup, ssppeecc will set the value of DDIISSPPLLAAYY from the
     environment variable.  If DDIISSPPLLAAYY is not set in the environment, the value
     saved in the user's state file will be used.  The value of DDIISSPPLLAAYY can be
     changed while running ssppeecc, and the current value will be exported to new
     xx1111ffiilltt processes as they are spawned.  For example,

        DDIISSPPLLAAYY==""hhoosstt11::00"";; pplloott__ccnnttll((""ffiilltteerr11,,ooppeenn""))
        DDIISSPPLLAAYY==""hhoosstt22::00"";; pplloott__ccnnttll((""ffiilltteerr22,,ooppeenn""))

     will create plot windows on two different hosts.

Argument Restrictions For cchhgg__ddiiaall(()), ggppiibb__ggeett(()) and sseerr__ggeett Eased
     Previously, when string values were needed for the second argument of the
     cchhgg__ddiiaall(()), ggppiibb__ggeett(()) or sseerr__ggeett(()) functions, the argument had to be in
     the form of literal string constant.  Now, a string-valued variable can be
     used.  To call ggppiibb__ggeett(()) or sseerr__ggeett(()) with an end-of-string delimiter that
     starts with a number, use a string constant.

Keithley-Metrabyte CTM-10 Fully Supported
     The second AMD Am9513 counter chip on the Keithley-Metrabyte CTM-10 PC
     timer/counter board can now be accessed from ssppeecc.  In the configuration
     file, select the MMeettrraabbyyttee oorr LLaabbmmaasstteerr PPCC BBooaarrdd device as for the CTM-05
     board, but configure it for five channels.  With the CTM-10, two additional
     32-bit scaler channels are available.  In addition to the jumpers need for
     the CTM-05 board, you must also connect output 1 of the first chip to gates
     2 and 4 of the second chip.  The additional scaler channels should be
     connected to the source 3 and source 5 inputs of the second chip.

Initialization Problem with Nucleus PCA-3 Fixed
     ssppeecc now includes a longer delay (1 second) after resetting the Nucleus
     PCA-3 board during hardware initialization to give the board time to become
     responsive to commands issued from ssppeecc.

Either Compumotor 4000 Serial Port Can Now Be Used
     The Compumotor 4000 motor controller has two serial ports.  Previously,
     port 1 had to be used with ssppeecc.  Now either port can be used.  As this
     motor controller is so little used, the change in the configuration file to
     select among the two ports is not backwards compatible.

EPICS Motor Control Improvements
     A number of changes have been made in the support for the EPICS motor
     driver as used at APS.  The DDMMOOVV record is now monitored for motor status,
     rather than MMOOVVNN.  The automatic backlash capabilities in the driver are
     now used.  ssppeecc now also loads the values for base rate and backlash steps
     from ssppeecc's configuration file into the EPICS data base, along with the
     other motor parameters such as steady-state speed and acceleration.

RELEASE 3.03.17

     These notes summarize the cumulative changes made for ssppeecc release 3.03.17
     as of January 9, 1996.

New Startup Option To Set ssppeecc__ppaarr(()) Parameters
     The parameters available through the ssppeecc__ppaarr(()) function can now also be
     set on the command line when ssppeecc is invoked using a --oo ppaarr==vvaalluuee syntax.
     For example,

        ffoouurrcc --oo aauuttoo__ffiillee__cclloossee==22 --oo cchheecckk__ffiillee__nnaammeess==nnoo

     turns on the option to close idle output files after two hours and turns
     off the option to check output file names for nonstandard and unprintable
     characters.  In the future, ssppeecc__ppaarr(())-type options may may be introduced
     that must be set on the command line as they relate to initialization
     actions taken before the first prompt is issued.

Bug In SunOS 4.x Support Of KS-3929 SCSI-CAMAC Code Fixed
     A bug, introduced in the Sun platform support for the Kinetic Systems 3929
     SCSI-CAMAC controller in ssppeecc release 2.02.01 (when the HP platform support
     was added), which sometimes made ssppeecc unusable with that module on the Sun
     platform has been fixed.  Also, crate inhibit is now automatically cleared
     when ssppeecc initializes the 3929 on the Sun platforms (as ssppeecc already does
     for the 3929 on the HP platform).

Bug In Setting CAMAC Inhibit Fixed
     A bug, where trying to set CAMAC crate inhibit using the command
     ccaa__ccnnttll((""iinnhhiibbiitt"",, 11)), was both ineffective and also led to segmentation
     violations on some platforms, has been fixed.

RELEASE 3.03.16 - PCA-II Driver For lliinnuuxx Available

     December 17, 1995:  ssppeecc now supports operation of the Nucleus PCA-II MCA
     card in live-time mode on lliinnuuxx systems with a CSS-provided loadable-module
     driver.  The driver is installed with the iinnssttaallll__ppccaa script in the ddrriivveerrss
     subdirectory of the ssppeecc distribution.  The interrupt number and base
     address, as set by the dip switches on the PCA-II board, should be
     specified when installing the driver if they differ from the defaults.  See
     the RREEAADDMMEE file in the ddrriivveerrss directory for further information on
     installing the driver.  See the _p_c_a help file for important information on
     the need to replace a resistor on the PCA-II board for interrupts to work
     with certain PC motherboards.  (Note, if you are using the CSS PCA driver
     on System V/386-type UNIX platforms, you must install the new version of
     the driver for use with this and subsequent ssppeecc releases due to a small,
     but incompatible change made in the driver to accommodate lliinnuuxx.)

RELEASE 3.03.15

     These notes summarize the cumulative changes made for ssppeecc release 3.03.15
     as of November 28, 1995.

New Auto-Close Option For ssppeecc Output Files
     A new option is available to automatically close output files that haven't
     been accessed for some interval of time.  Calling

         ssppeecc__ppaarr((""aauuttoo__ffiillee__cclloossee"",, hhoouurrss))

     sets the interval to hhoouurrss, which can have a non-integral value.  When the
     auto-close option is enabled, each time an oonn(()), ooffff(()), ooppeenn(()), cclloossee(()) or
     ffpprriinnttff(()) function is called, ssppeecc will check its list of opened output
     files.  Any files which have not been written to for the length of time
     given by hhoouurrss will be closed.  Enabling this option can help prevent
     errors when your macros or commands do not close files when appropriate,
     resulting in ssppeecc running out of resources to open additional files.  As
     files are opened automatically when sent output, auto-close mode operates
     transparently for the most part.  However, if you change to a different
     working directory between the time the file is first opened and
     subsequently automatically closed, and if the file is not opened by an
     absolute path name, the next time you refer to the file, ssppeecc will reopen
     it using a relative path based on the current directory.  Calling
     ssppeecc__ppaarr((""aauuttoo__ffiillee__cclloossee"",, 00)) disables the mode.  By default, the mode is
     initially disabled.

New pplloott__ccnnttll(()) Option To Set X11 Window Geometry
     The option pplloott__ccnnttll((""ggeeoommeettrryy==ssttrriinngg"")), is now available.  With the xx1111
     high-resolution plot windows only, this function sets the size and position
     of the window.  The format of the geometry string is the same as expected
     by standard X windows applications, as in

         pplloott__ccnnttll((""ggeeoommeettrryy==551122xx338800--00++1100""))

     As with the conventional syntax, not all parts of the geometry string are
     required.

New sshhoowwssccaannss Options
     The sshhoowwssccaannss utility, which makes twelve mini-plots per page of a ssppeecc
     data file using CC--PPLLOOTT, has two new options.  The new --ww option will cause
     CC--PPLLOOTT to wait for a <<rreettuurrnn>> from the keyboard after each page is
     displayed.  (This option should not be used when sending the output to a
     printer.)  The new --xx option is a shorthand for the options --zzii ""xx1111
     --rroottaattee"" --ww, which are the best options to use to interactively view
     sshhoowwssccaannss results on an X windows display.

Improved Debugging For ESRF Device Servers
     The debugging messages printed for all ssppeecc calls of the ddeevv__ppuuttggeett(())
     routine, used to access the ESRF device servers, now show the command name
     and the values of the input and output arguments in a consistent format.
     These messages are displayed when hardware debugging is enabled by
     including bit 0x40 (64) in the value assigned to the built-in variable
     DDEEBBUUGG.

RELEASE 3.03.14

     These notes summarize the cumulative changes made for ssppeecc release 3.03.14
     as of November 16, 1995.

Easier-To-Use Choice Menus For Configuration Editor
     The configuration editor eeddccoonnff now displays all the choices for such
     things as motor-controller type and serial-device baud rates in a menu box.
     The up and down or <> keys can be used to select among the choice items.

New Invocation Options For Configuration Editor
     The configuration editor eeddccoonnff takes two new options.  The --DD ssppeeccddiirr
     option can be used to specify the ssppeecc auxiliary file directory.  The --gg
     ggeeoo option can be used to specify the geometry to be edited if the multiple
     geometry feature (selected using the GGEEOO## keywords in the ccoonnffiigg file) is
     enabled.  For example,

        eeddccoonnff --DD //uussrr//llooccaall//lliibb//ssppeecc..dd --gg ffoouurrcc ssppeecc

     will edit the configuration file in the directory
     //uussrr//llooccaall//lliibb//ssppeecc..dd//ssppeecc, and while in the configuration editor, the GG
     command will toggle between displaying all motors and only those associated
     with the ffoouurrcc geometry group.

New --gg ggeeoo Flag
     ssppeecc can now be invoked with a --gg ggeeoo flag to force loading of macro files
     and activation of geometry calculations for a particular geometry such as
     ffoouurrcc, ssuurrff or kkaappppaa while using the configuration files taken from the
     name by which ssppeecc is invoked.  For example,

        ssppeecc --gg ffoouurrcc

     will use the configuration files from the SSPPEECCDD//ssppeecc directory but will
     operate in four-circle mode.

Alarms Blocked During Critical Code When Using Software Timer
     The SSIIGGAALLRRMM signal, used by the software timer in ssppeecc, is now blocked
     during critical code, such as during the RPC calls used by the ESRF device
     server libraries, to prevent those calls from being interrupted and
     generating error returns.

Minor Bug Relating to Text Output Fixed
     A bug in the implementation of the unlimited length output strings
     introduced in release 3.03.10 has been fixed.  A manifestation of the bug
     was that when ssppeecc debugging was turned on and used with a debugging log
     file, some messages generated by the pprriinntt command would not appear on the
     screen.

Bug In Data-Pipe Installation Fixed
     An error in a MMaakkeeffiillee in release 3.03.11 that generated an error message
     during ssppeecc installation when copying the ddppmmaakkee utility has been fixed.

RELEASE 3.03.13

     These notes summarize the cumulative changes made for ssppeecc release 3.03.13
     as of October 19, 1995.

More Significant Digits For Motors In Data File
     The __aassccaann, mmeesshh and EEssccaann standard macros have been changed to write up to
     eight significant digits of the positions of the scanned motors to the data
     file.  The __hheeaadd macro has also been changed to write up to eight
     significant digits of the positions of all the motors in the standard scan
     header.  Previously, the maximum number of significant digits was six.
     However, when ssppeecc calculates motor positions, it rounds the calculated
     value to the motor step size.  Thus for most motors, there will be no
     visible change in the data files.

Support For Bit 3 Model 403 ISA-To-VME Controller On lliinnuuxx
     ssppeecc now has direct support for VME devices using the Bit 3 Model 403 ISA
     bus to VME bus adapter.  Currently, this support is only available under
     lliinnuuxx.  Support on the HP 700 platforms with E/ISA bus will be added
     shortly.  As for VME devices, ssppeecc currently supports the Mizar 8310 VME
     counting module and the Oregon Micro Systems VME8 motor controller module.
     Support for the Joerger Model VSC8 8-channel scaler and the Highland V540
     micro-stepping controller will be added shortly.

Linux I/O Port Access Checks For CSS Kernel Patch
     CSS provides a kernel patch for lliinnuuxx that allows non-root users access to
     I/O ports for hardware control.  Previously, if ssppeecc was run without the
     patch by a non-root user, ssppeecc would die from a segmentation violation at
     the first attempt at accessing an I/O port.  Now, ssppeecc will print a message
     that the I/O ports are unavailable and suggest the kernel patch be
     installed.

Support For Simultaneous HP and IOtech SICL GPIB
     The CSS-modified IOtech SICL GPIB library introduced in ssppeecc release
     3.03.01 is now available and supported in ssppeecc in a version with with SICL
     function names that occupy a different name space from the standard SICL
     library.  This changes allows, for example, both an HP SICL library and the
     CSS-modified library to be linked into the same ssppeecc executable.  The
     disjoint name-space version is selected in the file with the keyword
     PPCC__IIOOTTSSIICCLL__HH (PPCC__IIOOTTSSIICCLL__HH__LL for the sshhaarreedd version).  From the
     configuration editor, select the ""IIOOtteecchh SSCCSSII GGPPIIBB ((EESSRRFFiizzeedd))"" GPIB device.

RELEASE 3.03.12

     These notes summarize the cumulative changes made for ssppeecc release 3.03.12
     as of October 10, 1995.

GGTTEERRMM Defaults To ""xx1111""
     ssppeecc now sets the GGTTEERRMM environment variable to ""xx1111"" by default if the
     variable is unset in the environment.

New Clean-and-Fresh Flag --FF
     A new --FF command line argument not only starts ssppeecc fresh (as with the --ff
     flag) but also disables the reading of all startup macro files.  This flag
     can be of use to front-end programs that want to ensure which macros are
     defined by explicitly specifying macro files to be read.

ccoonnffiigg-File Motor Flags Saved In Hex
     The flags column for motors in the hardware ccoonnffiigg file is now saved in
     hexadecimal in order to make it easier to interrupt geometry assignments in
     linked geometry configurations when viewing the ccoonnffiigg file directly.

Klinger Motion-Master Doesn't ssyynncc Motors Before Move
     ssppeecc no longer performs automatic synchronization of hardware registers and
     software positions before each move for motors controlled by the Klinger
     Motion Master 2000.  This change apparently solves some problems reported
     by users.

Support For HP E2050 LAN/HP-IB Gateway
     ssppeecc now recognizes the HP E2050 LAN/HP-IB Gateway device.  The ccoonnffiigg file
     entry for the device name, which is used as the argument to the SSIICCLL
     iiooppeenn(()) subroutine, must have the format

         llaann[[hhoossttnnaammee]]::iinntteerrffaaccee

     where llaann is the symbolic name for the device set in the
     //uussrr//ppiill//eettcc//hhwwccoonnffiigg..hhww file, hhoossttnnaammee is the host name or IP address of
     the gateway and iinntteerrffaaccee is hhoosstt--nnaammee parameter in the gateway on-board
     configuration (set via telnet to the gateway).

Support For Bi Ra 5302 64-Channel ADC as Counters
     ssppeecc now supports the Bi Ra Model 5302 ADC CAMAC module.  This module
     allows up to 64 analog inputs.  ssppeecc treats each channel as a counter, so
     each channel should be configured on the configuration editor scaler
     screen.  The value entered for the scale factor is interpreted as the
     channel gain.  The ADC conversions are performed on the ggeettccoouunnttss command.

Bug Fixed in ddaattaa__ppiippee(()) Overhead Code
     A bug in the ddaattaa__ppiippee..oo overhead function where the user-callable function
     ggeett__iinnppuutt__ddaattaa(()) transferred the number of data points, rather than the
     number of points times the number of elements for double-sized ssppeecc data,
     has been fixed.

RELEASE 3.03.11 - ddaattaa__ppiippee(()) Beta Release

     August 7, 1995:  The ddaattaa__ppiippee(()) facility is now in beta release.  This
     facility allows integration of external programs with ssppeecc, somewhat along
     the lines of CC--PPLLOOTT user functions.  See the _d_a_t_a___p_i_p_e help file for
     detailed information.

RELEASE 3.03.10

     These notes summarize the cumulative changes made for ssppeecc release 3.03.10
     as of July 29, 1995.

Unlimited Length For Input Strings
     Previously, string constants in ssppeecc were limited to 8,192 bytes.  That
     limit has been removed.  ssppeecc now allocates memory for strings as needed.

Unlimited Length Strings For pprriinnttff(())
     Previously, the length of the result of a pprriinnttff(()), ffpprriinnttff(()) or sspprriinnttff(())
     was limited to 8,192 bytes.  That limit has been removed.

Unlimited Length Macros
     Previously, the length of macro definitions was limited to 8,064 bytes.
     Macros may now be as long as one desires.

Input Push-Back Space Increased
     The size of the input push-back space has been doubled from 65,536 to
     131,072 bytes.  The input push-back space holds macro expansion text, so
     does effectively limit the maximum length of a macro.

More Format Specifiers Recognized By pprriinnttff(())
     The pprriinnttff(()) function now recognizes the %%XX, %%EE, %%GG, %%ii, %%bb and %%pp format
     specifiers if they are recognized by the underlying C library version of
     pprriinnttff(()).

Better Checking For ppoorrtt__ggeettww(()) and ppoorrtt__ppuuttww(())
     Previously, the 16-bit PC I/O port access functions ppoorrtt__ppuuttww(()) and
     ppoorrtt__ggeettww(()) did not check if the high-byte port was included in the ccoonnffiigg
     file I/O port configuration.  In the configuration file, the number of
     consecutive addresses to be enabled is in terms of 8-bit addresses.  If the
     high-byte port was not configured, ssppeecc would not have enabled access to
     the high-byte port, and a ppoorrtt__ggeettww(()) or ppoorrtt__ppuuttww(()) call would result in
     ssppeecc terminating with a segmentation violation.  ssppeecc now prints an error
     message and resets to command level if access is attempted without proper
     configuration.

X11 Geometry Parsing Fixed
     A bug, where the X11 high-resolution graphics filter didn't treat negative
     values for the xx and yy position in the geometry string correctly, has been
     fixed.  A negative value for xx or yy, including the value -0, now specifies
     the position of the right side of the X11 window relative to right side of
     the root window, as is the usual convention.

RELEASE 3.03.09

     These notes summarize the cumulative changes made for ssppeecc release 3.03.09
     as of July  8, 1995.

More Simultaneous High-Resolution Plots
     The number of allowed simultaneous high-resolution plot-filter processes
     has been increased from two to five.  The functions pplloott__ccnnttll((""ffiilltteerr11""))
     through pplloott__ccnnttll((""ffiilltteerr55"")) select the active filter.

New pplloott__ccnnttll(()) Option To Set X11 Window Title
     The option pplloott__ccnnttll((""ttiittllee==ssttrriinngg"")), is now available.  With the xx1111
     high-resolution plot windows, the title given by ssttrriinngg is used in the
     XXSSeettWWiinnddoowwPPrrooppeerrttiieess(()) call to set the window and icon labels.  On most X11
     window managers, that means the title will appear in the window's title
     bar.

EPICS Support On Linux Platforms Now Available
     ssppeecc is now working with EPICS (Release 3.12.13Beta) on lliinnuuxx platforms.
     When installing ssppeecc, select the eeppiiccss__lliinnuuxx target.

Install Script Now Prompts For EPICS or ESRF Directories
     When installing ssppeecc on platforms that use the ESRF device servers or the
     EPICS channel access libraries, the installation script will now prompt for
     the directory that contains the appropriate libraries.  Previously, the
     installation ""mmaakkeeffiillee"" used the names ..//ddsseerrvveerr for the ESRF platforms and
     ..//eeppiiccss for the EPICS platforms, and the local ssppeecc administrator was
     responsible for making those names symbolic links to the correct
     directories.

Obscure Macro Bug Fixed
     A fairly old bug that caused the wrong definition to be returned for the
     first macro defined after starting fresh has been fixed.  The bug was most
     often manifested by the repeated message cclleeaannuupp::  uunnddeeffiinneedd appearing when
     starting fresh when there was an error in the startup macro files.

RELEASE 3.03.08 - Fixes For SGI Platforms

     June 28, 1995: This release includes fixes to restore ssppeecc source code
     portability to Silicon Graphics platforms.

RELEASE 3.03.07 - Kappa Geometry Improvements

     June 27, 1995: ssppeecc now supports a vertical configuration of the kkaappppaa
     diffractometer.  The new sseettvvmmooddee macro (from the kkaappppaa..ssrrcc macro file) can
     be used to enable the vertical configuration features in the ggeeoo__kkaappppaa..cc
     source file.

RELEASE 3.03.06

     These notes summarize the cumulative changes made for ssppeecc release 3.03.06
     as of June 18, 1995.

Support For Heidenhain Encoders on MCU-2
     ssppeecc now supports the MCU-2 motor controllers that have been specially
     modified to read Heidenhain absolute encoders.  Select the MMCCUU__HH motor
     controller type on the motor screen of the configuration editor and enter a
     value for the ""eennccooddeerr sstteeppss ppeerr ddeegg//mmmm"" parameter on the motor parameter
     screen when using that hardware combination.

Bug In PCA-3/Multiport Code Fixed
     A recently introduced bug (12/94) in the code for the Nucleus PCA-3 and
     Multiport devices that prevented the ooffffsseett parameter to be set to zero
     using mmoottoorr__ppaarr(()) has been fixed.

RELEASE 3.03.05

     These notes summarize the cumulative changes made for ssppeecc release 3.03.05
     as of June 11, 1995.

New VVEERRSSIIOONN Built-in Variable
     A new read-only built-in variable VVEERRSSIIOONN contains the current ssppeecc version
     number.

Allow Multiple CAMAC QS-450 Quad Scalers
     ssppeecc now allows more than one CAMAC DSP QS-450 Quad Scalers to be used at
     the same time.

RELEASE 3.03.04

     These notes summarize the cumulative changes made for ssppeecc release 3.03.04
     as of May 30, 1995.

Hardware Poll Interval Is Now Adjustable
     When the wwaaiitt(()) function is called to wait for polled motors, timers or
     other acquisition devices to finish, ssppeecc sleeps for a small interval
     between each check of the hardware.  Previously, that interval was built
     into the code and set (in recent releases) to 40 msec.  That sleep time can
     now be changed using the new ""hhddww__ppoollll__iinntteerrvvaall"" parameter to the
     ssppeecc__ppaarr(()) function.  The units of the parameter are milliseconds.  The
     default value is 40 msec.  A value of zero is allowed, though not
     recommended if the computer is being used for anything else.

RELEASE 3.03.03

     These notes summarize the cumulative changes made for ssppeecc release 3.03.03
     as of May 28, 1995.

New OOmmeeggaa-Type Four-Circle Diffractometer
     The four-circle geometry code and macros have been modified to work with an
     oommeeggaa-type four-circle diffractometer.  With this diffractometer, the tthheettaa
     and ttwwoo--tthheettaa circles are mechanically coupled, such that the when the
     ttwwoo--tthheettaa circle is moved, the tthheettaa circle moves half the distance.  The
     tthheettaa circle can also be moved independently of ttwwoo--tthheettaa.  This
     configuration corresponds to replacing the independent tthheettaa motion with an
     oommeeggaa  = tthheettaa  - ttwwoo--tthheettaa/2 motion.  If there is a motor with the
     mnemonic tthh in the ccoonnffiigg file, ssppeecc assumes a standard four-circle
     diffractometer.  If there is no tthh motor, but if there is a motor
     configured with the mnemonic oomm, ssppeecc assumes the oommeeggaa-type configuration.
     The ffoouurrcc..ssrrcc macro file should be reread after changing the configuration.
     One can start fresh or type nneewwmmaacc to do that.

RELEASE 3.03.01

     These notes summarize the cumulative changes made for ssppeecc release 3.03.01
     as of May 24, 1995.

New Option To Change Step Size With mmoottoorr__ppaarr(())
     For the rare circumstances where it may be necessary, ssppeecc now allows the
     motor step-size parameter to be changed using

         mmoottoorr__ppaarr((mmnnee,, ""sstteepp__ssiizzee"",,  vvaalluuee))

     Since such changes should not be undertaken lightly, ssppeecc requires they be
     explicitly enabled using

         ssppeecc__ppaarr((""mmooddiiffyy__sstteepp__ssiizzee"",, 11))

     Rereading the ccoonnffiigg file resets the step size parameter to the value in
     the ccoonnffiigg file.

No-Echo Option With --pp
     If the file descriptor argument to ssppeecc's --pp startup option is zero, ssppeecc
     will not echo text received from that file descriptor to the standard
     output, as was the case previously.  (The --pp option is used by GUI-type
     programs that invoke ssppeecc as child process.)

New Continued-Lines Option With ddaattaa__dduummpp(())
     The optional argument ffmmtt11 to the ddaattaa__dduummpp(()) function, which has the form
     ""%%##"", and specifies how many data points (specified by the number ##) are to
     be printed on each line, has a new option.  If the number ## is followed by
     the letter CC, a backslash is added to each continued line, appropriate for
     saving MCA data in manageable length lines.  New versions (since May 1,
     1995) of the CC--PPLLOOTT ssccaannss..44 user function interpret the continued lines
     correctly for MCA data.

Improvements To ssccaannss..44
     The version of the ssccaannss..44 CC--PPLLOOTT user function distributed in the ssppeecc aauuxx
     directory has new features.  In particular, there is no longer a
     compiled-in limit for the number of points that can be read as raw data or
     the number of scans that can be contained in one data file.  Also, the data
     file syntax recognized by ssccaannss..44 has been expanded.  Directives of more
     than one letter that begin with ##@@ are now recognized.  New directives for
     reading MCA-type data have been added.  See the ssppeecc _s_c_a_n_s help file for
     more information.

New mmoottoorr__ppaarr(()) Options for OMS Controllers
     A command pass through capability is now available for all versions of the
     OMS motor controller using

         mmoottoorr__ppaarr((mmnnee,, ""sseenndd"",,  ccmmdd))

     to send the command ccmmdd to the controller and

         mmoottoorr__ppaarr((mmnnee,, ""rreeaadd"",,  ccmmdd))

     to send the command ccmmdd and return as a string an expected reply.  For
     example,

        pprriinntt mmoottoorr__ppaarr((tttthh,, ""rreeaadd"",, ""RRPP""))
        224400000000

     results in the string ""AAXX RRPP\\nn"" being sent to the controller.

Bug With the Klinger MotionMaster 2000 Fixed
     ssppeecc's code to support the Klinger MotionMaster 2000 motor controller was
     developed on units that did not have all four motor modules installed.  It
     turns out that with all modules installed on the ISA bus version, ssppeecc must
     pause about half a second after sending the emergency stop character ##
     (which it sends when initializing the board) before the board is able to
     communicate again.  Such a pause is now part of the code.

New mmoottoorr__ppaarr(()) Option for ACS MCU-2
     On ACS MCU-2 motor controllers equipped with the option to read Heidenhain
     absolute encoders, the function

         mmoottoorr__ppaarr((mmnnee,, ""eennccooddeerr__ppoossiittiioonn""))

     will return the current encoder position.

CSS-Modified Library Available For IOtech SCSI488/H
     CSS now provides an alternative lliibbssiiccll..aa for use with the IOtech SCSI488/H
     SCSI-to-GPIB module on the HP 700 platform.  This version doesn't require a
     daemon process, as does the IOtech version.  Contact CSS to obtain this
     version of the library.

CAMAC Crate Sharing Available With KS 3929 on HP 700
     When using the Kinetic Systems 3929 SCSI-to-CAMAC module on the HP 700
     platform with the CSS-provided software interface, CSS now allows more than
     one version of ssppeecc to have access to the crate at a time.

Standalone Library For KS 3929 on HP 700
     CSS has created a subroutine library for use with local programs that
     require access to the Kinetic Systems 3929 SCSI-to-CAMAC module on the HP
     700.  This library allows simultaneous access to the CAMAC crate by ssppeecc
     and the local programs.  Contact CSS to obtain the library.

changes                      spec 3.02 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 3.02

RELEASE 3.02.02

     These notes summarize the cumulative changes made for ssppeecc release 3.02.02
     as of April 4, 1995.

New ggeetteennvv(()) Function
     A new function ggeetteennvv((ss)) returns the string value of the environment
     variable ss.

eeddccoonnff Asks To Confirm Rereading After Edits
     The hardware configuration editor eeddccoonnff now asks you to confirm whether
     you want to reread the starting or backup configurations (with the rr or RR
     commands) if you have made changes to the configuration before having saved
     them.

Help File Format Changes
     The behavior of some of the formatting sequences used in the ssppeecc help
     files has been changed and some new sequences added.  The changes allow
     HTML versions of the files to be created using nnrrooffff or GNU ggrrooffff.  See the
     comments in hheellpp//MMaakkeeffiillee for information on that.

EEssccaann Macro Change
     The EEssccaann macro, when used with the ffiixxQQ option, now takes extra measures
     to ensure that the position in reciprocal space does not drift.

nneewwffiillee Macro Revision
     The nneewwffiillee macro now separates motor names by at least two spaces in the
     data file header.

New ccoouunntteerr__ppaarr(()) Options
     The ccoouunntteerr__ppaarr(()) function now supports the following arguments for all
     controllers:

     ""uunniitt"" - returns the unit number of the indicated counter.

     ""cchhaannnneell"" - returns the channel number of the indicated counter.

     ""rreessppoonnssiivvee"" - returns nonzero if the hardware appears to be working for
          the indicated counter.

     ""ccoonnttrroolllleerr"" - returns a string that indicates the controller type of the
          indicated counter.

New mmoottoorr__ppaarr(()) Options
     The mmoottoorr__ppaarr(()) function now supports the following arguments for all
     controllers:

     ""uunniitt"" - returns the unit number of the indicated motor.

     ""cchhaannnneell"" - returns the channel number of the indicated motor.

     ""rreessppoonnssiivvee"" - returns nonzero if the hardware appears to be working for
          the indicated motor.

     ""ccoonnttrroolllleerr"" - returns a string that indicates the controller type of the
          indicated motor.

     ""aaccttiivvee"" - returns nonzero if the indicated motor is currently moving.

National Instruments GPIB Support for lliinnuuxx
     ssppeecc now supports the lliinnuuxx GPIB driver for the National Instruments
     AT-GPIB card.  That driver is available via anonymous ftp from
     kkooaallaa..cchheemmiiee..ffuu--bbeerrlliinn..ddee.

CAMAC E500 Channel Multiplexor Improvements
     The code for the E500 multiplexor has been changed to insure that the
     multiplexed motors are always restarted with consistent motor phases
     relative to the last move of the particular motor.  In addition, if more
     than one multiplexed motor is commanded to move, each such motor will
     automatically be moved in sequence.  The sequence is the order in which the
     motors are numbered in the ccoonnffiigg file.

ccddeeff Bug fixed
     A bug in the code that reads the portion of a user's state file that stores
     the ccddeeff-type macros has been fixed.  The bug could produce buffer overruns
     leading to unpredictable side affects.

New D32 Surface Geometry
     A new ssuurrff__dd3322 configuration, as used at ESRF beamline D32, has been added.

RELEASE 3.02.01

     These notes summarize the cumulative changes made for ssppeecc release 3.02.01
     as of February 18, 1995.

Expanded Syntax for ddaattaa__pplloott(()) and ddaattaa__dduummpp(())
     The element arguments to the ddaattaa__pplloott(()) and ddaattaa__dduummpp(()) functions can now
     be combined in a single space- or comma-delimited string.  This change will
     make a task such as creation of plotting macros to plot a variable numbers
     of curves in the same plot window easier.

Stand Alone Help File Viewer Now Included
     The ssppeecc distribution now includes the stand alone CSS help file previewer
     cchheellpp.  This file will automatically be installed in the same directory as
     the other executables.

eeddccoonnff Treats Change In Step Size Differently
     Previously, changing the step-size parameter in the configuration editor
     caused the accumulator value to change to keep the motor positions fixed.
     Users have requested that the behavior be altered so that the accumulator
     would remain fixed, but the user and dial positions would scale with the
     change in the step size parameter.  That change has been made.

More Efficient Output-File Flushing
     Previously, ssppeecc flushed file output after each print-type command to an
     output file or device.  ssppeecc users have reported that on certain platforms
     where the output was to an NFS-mounted file system, this frequent flushing
     introduced considerable delays.  ssppeecc now performs flushing less
     frequently.  A ""fflluusshh__iinntteerrvvaall"" parameter, that can be set by the
     ssppeecc__ppaarr(()) function, specifies how many seconds to allow between output
     buffer flushing.  The default ""fflluusshh__iinntteerrvvaall"" is 0.5 seconds.  If the
     interval is set to zero, the previous frequent-flushing behavior will be
     restored.  Output to the screen is still flushed immediately.  Output to
     other devices is also flushed each time the main ssppeecc prompt is issued.

Get Count Scale Factor
     The function ccoouunntteerr__ppaarr((mmnnee,, ""ssccaallee"")) will return value of the scale
     factor set in the ccoonnffiigg file for the indicated counter.

New CAMAC ccaa__ccnnttll(()) Function
     A new function ccaa__ccnnttll(()) allows users to perform CAMAC initialize, clear
     and inhibit crate operations from within ssppeecc on all CAMAC controllers
     supported by ssppeecc.  Both ccaa__ccnnttll((""ZZ"")) and ccaa__ccnnttll((""iinniitt"")) issue the CAMAC Z
     (crate initialize) command.  Both ccaa__ccnnttll((""CC"")) and ccaa__ccnnttll((""cclleeaarr"")) issue
     the CAMAC C (crate clear) command.  The usage ccaa__ccnnttll((""iinnhhiibbiitt"",, 11)) sets
     crate inhibit, while ccaa__ccnnttll((""iinnhhiibbiitt"",, 00)) clears crate inhibit.  During
     normal operation, users should not need to issue these commands.  Users
     should probably issue a rreeccoonnffiigg after sending a crate initialize or clear.

Increase In Number Of Devices That Can Be Configured
     The configuration editor eeddccoonnff now allows entry of up to twenty rows each
     of information for non-CAMAC motor controllers and timer/counter devices,
     MCA-type data acquisition devices, generic serial devices and PC I/O port
     addresses.  The commands ^^FF and ^^BB select display of additional rows.

Optional Motor Configuration By Unit/Channel
     The configuration editor now allows entering of unit/channel information
     for motors as an alternative to the automatic consecutive unit/channel
     assignment normally used.  Note:  at present, only selected motor
     controllers (E500, ESRF MAXE) in ssppeecc recognize unit/channel information.
     Unit/channel information, when used, must be enterned for all motors
     associated with a particular type of motor controller.  Manual unit/channel
     numbering is turned on simply by entering values in the form uunniitt//cchhaannnneell
     in an otherwise blank cells.  Entering a single number changes just the
     channel number.  Entering ^^DD turns off manual numbering.  No consistency
     checking is done on the assignment in the configuration editor.  ssppeecc does
     check for consistency when reading the ccoonnffiigg file, though.  The config
     file uses the syntax

        MMOOTT001122 == EE550000::00//33 ......

     to store the unit/channel information.

New Motor Position Discrepancy Message (For Some)
     A new motor-position discrepancy message has been deployed (currently for
     selected motor controls only).  The new message gives hints to the
     appropriate course of action when motor position discrepancies arise.  The
     new message is currently implemented for the following motor controllers:
     Oriel 18092, NSLS MMC32, Huber 9000, MicroControle ITL09, Klinger MM2000,
     NSK, PI, EPICS motors and ESRF motors.  The rest of the motor controllers
     will be converted to the new message shortly.

Fixed Recursion Bug With Undefined cclleeaannuupp Macro
     A bug that under certain circumstances produced a continuous stream of
     cclleeaannuupp:: uunnddeeffiinneedd messages has been fixed.

Memory Leaks Fixed
     A couple of small memory leaks in ssppeecc have been fixed.  Also, the mmeemmssttaatt
     command now does a more complete job of memory accounting, including the
     addition of new categories for memory allocated by ccddeeff(()) macros and memory
     allocated for configured hardware.

Macro Fix Involving ccaallccGG
     To make it easier for users to work with a manually entered orientation
     matrix, the ccaallccGG macro (which sets a flag to indicate the orientation
     matrix should be recalculated using the current values of the lattice
     constants, orientation reflections and X-ray wavelength) has been relocated
     to the ssaavv__uubb macro.  ccaallccGG was formerly included in the ssaavveeggeeoo macro
     (which is defined differently for each diffractometer geometry), which
     calls ssaavv__uubb.  (The ssaavveeggeeoo macro is called by the ssaavvee macro, which saves
     important parameters in a command file.)  For users who enter the
     orientation matrix manually, the ssaavv__uubb macro should be redefined with a
     macro that writes the contents of UUBB to the save file.

Improvements in Internal Pseudomotor Code
     Recent improvements in the internal code for pseudomotors have been
     propagated to the ggeeoo__ssiixxcc..cc, ggeeoo__ssuurrff..cc, ggeeoo__ww2211hh..cc and ggeeoo__ww2211vv..cc source
     code.  The changes require use of the new internal C-code functions
     sseett__ppsseeuuddoo__ttaarrgg(()) and sseett__ppsseeuuddoo__ppooss(()).  Contact CSS for technical details
     on adding pseudomotors to geometry code.

Motor/Counter Disabling Implemented
     The functions

         mmoottoorr__ppaarr((mmnnee,, ""ddiissaabbllee"" [[,, 00||11]]))

     and

         ccoouunntteerr__ppaarr((mmnnee,, ""ddiissaabbllee"" [[,, 00||11]]))

     now work for all motors and counters to disable hardware access of the
     indicated motor or counter.  All usable motors and counters are reenabled
     on startup and rreeccoonnffiigg.

MCA-type Devices Can Be Disabled
     Normally MCA-type devices are started and stopped the same as other
     configured counters by the ttccoouunntt(()) and mmccoouunntt(()) functions.  The function

         mmccaa__ppaarr((""ddiissaabbllee"" [[,, 00||11]]))

     now allows that automatic starting and stopping to be disabled.  The
     command works on the device currently selected with the mmccaa__sseell(()) function.
     Such devices can still be started and stopped using mmccaa__ppaarr((""rruunn"")) and
     mmccaa__ppaarr((""hhaalltt"")), and will also  be stopped by a ^^CC typed at the keyboard.

New mmccaa__ppuutt(()) Function
     A new function mmccaa__ppuutt((gg,, ee)) is available.  For certain MCA-type devices,
     this function will send the data in data group gg element ee to the device.

CAMAC Block Mode Transfers For Selected Controllers
     CAMAC block mode transfers are now implemented for the Kinetic Systems 3929
     SCSI-CAMAC controller on HP 700 platforms and for the Kinetic Systems 3988
     GPIB-CAMAC controller.  Block modes transfers are used by some MCA-type
     modules.

More CAMAC Presence Tests
     Simple CAMAC presence tests have been added for the Kinetic Systems 3512
     and 3610, the DSP QS450, and the LeCroy 2301, 3512 and 3588 modules.  These
     tests simply see if a module in the selected slot responds to a suitable
     CAMAC command.  The test can't confirm whether the appropriate module is
     present.  Presence tests for CAMAC modules such as the Kinetic Systems 3640
     and the DSP E500, where the module can return a unique ID, continue to be
     performed.

Changes For the CAMAC E500
     Several changes have been made in the code for the DSP E500 motor
     controller.  The E500 will no longer make moves smaller than the backlash
     at the base rate.  Rather, the normal acceleration profile will be used.
     In addition, the E500 will no longer read all the configured motors with
     each ggeettaanngglleess.  Rather, positions will be read during hardware
     configuration, at the end of moves, on ssyynncc commands and while moving.
     Also, the motor positions will not be checked for consistency with the
     controller before each move, as was done historically.  Finally, the E500
     code will recognize the new, optional unit/channel configuration
     information that may be present in the ccoonnffiigg file.

Changes For the CAMAC KS 3640
     The Kinetic Systems 3640 no longer asserts and clears crate inhibit during
     counting.

Changes For the CAMAC LeCroy 2301
     The LeCroy 2301 MCA buffer now implements the mmccaa__ppaarr((""cchhaann##"")) to read the
     contents of channel ## and mmccaa__ppaarr((""cchhaann##"",, vvaalluuee)) to set the contents of
     channel ##.  Also the module supports the new mmccaa__ppuutt(()) function.  In
     addition, the LeCroy 2301 now uses CAMAC block-mode transfers on CAMAC
     controllers where ssppeecc supports such transfers.

Changes For the CAMAC DSP 2190/4101
     The DSP 2190 MCS Averager/4101 Histogramming Memory now uses CAMAC
     block-mode transfers on CAMAC controllers where ssppeecc supports such
     transfers.

Changes For ESRF MAXE Motor Controllers
     There is now no longer a limit within ssppeecc on the number of MAXE
     controllers that can be configured.  The MAXE controller supports the new
     unit/channel motor configuration option.

Bug With ACS MCB Motor Controller Fixed
     A bug in the code in the ACS MCB motor controllers, where rate parameters
     may not have been set correctly for certain motors, has been fixed.

Better eeddccoonnff on HP700 Platforms
     On the hp700 platforms, the configuration editor eeddccoonnff is now built with
     the HP V.4 Curses Library (lliibbccuurr__ccoollrr..aa).  This library fixes bugs in the
     less-than-optimal screen updating of the standard curses library.  The
     version of eeddccoonnff shipped with ssppeecc will be statically linked with this
     library, since it is not part of the standard HP-UX installation (although
     it is included on the HP-UX distribution media).

changes                      spec 3.01 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 3.01

RELEASE 3.01.06

     These notes summarize the cumulative changes made for ssppeecc release 3.01.06
     as of December 18, 1994.

mmccaa__sseell(()) Changes
     The rreeccoonnffiigg command no longer performs an automatic mmccaa__sseell((00)), unless the
     currently selected MCA-type device is no longer configured.  Also,
     mmccaa__sseell(()) now returns the number of selectable MCA-type devices when passed
     a valid argument.

Block-Mode CAMAC Transfer Implementation
     ssppeecc now has its first implementation of CAMAC block-mode transfers for
     reading MCA-type CAMAC modules.  Currently, block mode is only implemented
     for the Kinetic Systems 3929 SCSI CAMAC controller on HP platforms using
     either the Kinetic Systems software or the CSS software.  Currently, only
     the LeCroy 3588 Histogramming Memory Module makes use of block-mode
     transfers.  Other CAMAC controllers and CAMAC MCA modules will be converted
     to use block mode transfers in the future.

New mmccaa__ppuutt(()) Function
     A new function mmccaa__ppuutt((gg,, ee)) is available to load values from ssppeecc data
     group gg, element ee into the currently selected MCA.  Currently, this
     function is only implemented for the LeCroy 3588 Histogramming Memory
     Module.

New ddaattaa__iinnffoo(()) Function
     The new ddaattaa__iinnffoo((ggrrpp,, ss)) function returns data group configuration
     information.  See the ddaattaa help file for more information.

Comments Allowed In ddaattaa__rreeaadd(()) Files
     The ddaattaa__rreeaadd(()) function will now ignore lines in the input file that begin
     with the character ##.

Motors and Counters Can Be Disabled for ccddeeff(())
     A new option for the ccoouunntteerr__ppaarr(()) and mmoottoorr__ppaarr(()) functions allows
     individual motors and counters to be disabled, presently, only for the
     purposes of having portions of a ccddeeff(()) macro keyed to the motor or counter
     mnemonic selectively included or excluded in the ccddeeff(())-macro definition.
     The function mmoottoorr__ppaarr((mmoott,, ""ddiissaabbllee"",, [[11||00]])) disables the motor mmoott if the
     third argument is nonzero.  Otherwise a disabled motor is enabled.  If only
     two arguments are present, the functions returns 0 if the motor is enabled
     and 1 if the motor is disabled.  A -1 is returned if the mmoott is not a valid
     motor.  Rereading the ccoonnffiigg file reenables all motors and counters.
     Similar syntax applies to ccoouunntteerr__ppaarr(())..  In the near future, motors and
     counters that are disabled will not be accessed by ssppeecc.

The Nucleus PCA-3 Supported and PCA-Multiport Improved
     The Oxford/Tennelec/Nucleus PCA-3 multichannel analyzer PC board is now
     supported in ssppeecc.  This board is a replacement for the PCA II, and is the
     board of the choice for new purchases.  Unlike the PCA II, the PCA-3 does
     not require a kernel driver to count to presets or perform dead-time
     correction.  In addition, ssppeecc now includes additional functionality for
     the PCA Multiport module.  See the ppccaa help file for more information.

Support For KS 3116 16-bit D/A
     The Kinetic Systems 3116 16-bit can now be used as a DAC motor.

E/ISA Bus Support On HP 700
     ssppeecc now supports E/ISA port access on suitably equipped HP 700 platforms.
     ssppeecc's port access functions ppoorrtt__ggeett(()), ppoorrtt__ppuutt(()), etc., and the built-in
     support for all the PC card motor controllers, counters, etc., that don't
     require a driver on PC UNIX systems, are now available on the HP.  See the
     file aauuxx//RREEAADDMMEE..hhpp for information on setting up the system configuration
     files.

National Instruments GPIB now supported on HP 700
     ssppeecc can be linked with National Instruments GPIB support modules (cciibb..oo
     files) on HP 700 platforms.  Currently, only the GPIB-ENET module and
     software has been tested.

Improved Support For the KS3929 SCSI-To-CAMAC on HP 700
     ssppeecc now includes direct support for the KS3929 SCSI-to-CAMAC controller on
     the HP 700 platforms.  It is no longer necessary to purchase the expensive
     KS software package.

Can Use 19200 and 38400 To Indicate Baud Rate
     The strings 1199220000 and 3388440000 are now recognized by ssppeecc and the
     configuration editor as synonyms for the baud rates previously specified by
     eexxttaa and eexxttbb.

New Version Info File
     ssppeecc distributions now include a VVeerrssiioonn file that contains version numbers
     for all the files used to create the ssppeecc distribution.  This information
     should aid in the communication between CSS and local ssppeecc administrators
     in determining exactly what version of the package is installed.

vi-Mode Code Now Included With GNU Readline Library
     The optional GNU readline library source code aggregated with the ssppeecc
     distribution now also includes the modules to support vi-editing mode.  Use
     EESSCC--^^JJ or EESSCC--^^MM to switch between emacs- and vi-editing modes while
     running ssppeecc.  To start up in vi-editing mode, put the line

        sseett eeddiittiinngg--mmooddee vvii

     in the ..ssppeecc__kkeeyyss file in your home directory.

Bug In Creation Mode of hhddww__lloocckk Fixed
     A bug in the per-diffractometer hardware-locking feature, whereby the
     initial copy of the hhddww__lloocckk file was created with the wrong access modes,
     has been fixed.  With the wrong modes, hardware locking would be in place
     only for the same user who created the initial hhddww__lloocckk file.  The mode of
     existing hhddww__lloocckk files will be corrected when ssppeecc is updated.  To fix
     existing installations, change the mode of each uusseerrffiilleess//hhddww__lloocckk file to
     0666.  Per-diffractometer hardware locking was introduced in ssppeecc release
     3.00.07.

RELEASE 3.01.05

     These notes summarize the changes made for ssppeecc release 3.01.05 as of
     September 14, 1994.

Protection Against Funny Characters In File Names
     ssppeecc can now optionally prevent you from (accidentally) creating files with
     names containing nonstandard characters.  By default, this protection is
     enabled.  Use the function ssppeecc__ppaarr((""cchheecckk__ffiillee__nnaammeess"",, 00)) to disable the
     feature.  When the feature is enabled, if a file name passed to the oonn(()) or
     ooppeenn(()) functions contains any of the characters (())[[]]{{}}||$$''``**??;;!!&&<<>>\\@@, the
     space character, any control characters or any characters with the eighth
     bit set, and the file doesn't already exist, ssppeecc will print a error
     messages and reset to command level.

Some Old Problems In Four-Circle Phi-Fixed Mode Fixed
     Some singularities in the angle calculations in phi-fixed mode for the
     four-circle geometry, particularly at pphhii = 0, are now avoided.

Fixed Some Recent Bugs In the Installation Program
     Versions of the ssppeecc installation script dating from April 1994 until now
     weren't installing the high-resolution filter programs properly.  That bug
     has been fixed.

Some Fixes To xx-axis Labels In Plots
     A bug in the automatic ranging of the xx-axis numbering for reversed ranges
     that caused the ranges not to encompass all the data points has been fixed.
     In addition, incomplete erasure of previous numbers when the xx-axis ranges
     change in updated plots has been mostly fixed.

Small Improvement to High-Res Plot yy-Axis Labels
     The formatting of the yy-axis labels has been modified to prevent truncation
     of long label strings.

Bug In Using Two High-Res Filters Fixed
     A bug where not doing a pplloott__ccnnttll((""ooppeenn"")) after a pplloott__ccnnttll((""ffiilltteerr22""))
     could cause a segmentation violation has been fixed.  Now, when the second
     high-resolution filter isn't explicitly opened, ASCII plots will be drawn
     by the plotting functions when the second filter is selected.

Bug In Data Group Code Fixed
     A difficult-to-manifest bug in the data group code where the data points
     could become scrambled when data groups were freed should now be fixed.

More Serial Devices Allowed
     The number of user-level serial devices allowed in ssppeecc has been increased
     from three to eight.

Small Improvement To Ortec 9XX Timer Code
     Code has been added to help prevent the Ortec timer from hanging when
     operating in updated counting mode.

Bug In Ortec 994 Blind Timer Mode Code Fixed
     A bug, where when counting to monitor counts using the blind timer mode,
     the number of elapsed seconds at the end of the count time was not
     correctly estimated from the software clock, has been fixed.

Fix For ACS MCB-4 Bug
     A bug in the Advanced Control Systems MCB-4 motor controller, where the
     controller occasionally and unexpectedly sends a null byte at the start of
     a string has been accommodated in ssppeecc.

Support For the MicroControle ITL09 Motor Controller
     Initial support for the MicroControle ITL09 motor controller on GPIB and
     RS-232C interfaces is now available.

Optional Angular Unit Parsing Available
     The command ssppeecc__ppaarr((""ppaarrssee__uunniittss"",, 11)) enables parsing of unit suffixes.
     By default, unit-suffix parsing is disabled.  Numbers typed as input to
     ssppeecc's parser with one of suffixes in the table below appended will
     automatically be multiplied by the corresponding factor.

        11rr  == 5577..22995588      rraaddiiaann
        11mmrr == 00..00557722995588    mmiilllliirraaddiiaann
        11dd  == 11            ddeeggrreeee
        11mmdd == 00..000011        mmiilllliiddeeggrreeee
        11mmmm == 11            mmiilllliimmeetteerr
        11uumm == 00..000011        mmiiccrroommeetteerr
        11mm  == 00..00116666666677    mmiinnuuttee
        11ss  == 00..000000227777777788  sseeccoonndd

     Note, however, suffixes on numbers converted from strings or entered using
     the ggeettvvaall(()) function are not parsed.  The only known use for unit-suffix
     parsing is with the user-contributed macros in the file mmaaccrrooss//uunniittss..mmaacc.
     These macros require that unit suffixes be supplied for all motor position
     arguments in the standard ssppeecc macros.

SSPPEECCDD Environment Variable Used By Utilities
     The utilities sshhoowwssccaannss and ttiiddyy__ssppeecc will now use the value of the
     environment variable SSPPEECCDD, if it is set.

ttiiddyy__ssppeecc Revised
     The ttiiddyy__ssppeecc utility that reports on and cleans up user state files has
     been revised so that any user can use the utility to report on state-file
     disk usage and clean up one's own state files.  The owner of ssppeecc's
     auxiliary file directory (normally ssppeeccaaddmm) and the super user may clean up
     anybody's state files using ttiiddyy__ssppeecc.  Type ttiiddyy__ssppeecc -- from the shell to
     see ttiiddyy__ssppeecc's usage.

RELEASE 3.01.04

     These notes summarize the changes made for ssppeecc release 3.01.04 as of June
     12, 1994.

New mmoottoorr__nnuumm(()) and ccnntt__nnuumm(()) Functions
     New functions mmoottoorr__nnuumm((mmnnee)) and ccnntt__nnuumm((mmnnee)) that return the motor or
     counter number corresponding to the mnemonic or number given as as argument
     have been added.  If no motor or counter is configured with the given
     mnemonic, the function returns -1.  The argument can either be a string or
     a number.

New Automatic Hardware Polling
     On platforms with polled motor controllers, timers or acquisition devices,
     ssppeecc can now automatically poll the devices to determine when they are
     finished.  The polling occurs while waiting for keyboard input at the main
     prompt.  When using the GNU readline library, the polling occurs while
     waiting for each character to be typed.  When using the standard ssppeecc
     history, the polling occurs only before the first character is typed.
     Automatic hardware polling can be disabled using the ""aauuttoo__hhddww__ppoollll"" option
     to the new ssppeecc__ppaarr(()) function described below.

New ssppeecc__ppaarr(()) Function To Set Internal Parameters
     A new function ssppeecc__ppaarr((ooppttiioonn [[,, vvaalluuee]])) is available to set miscellaneous
     internal operating parameters of ssppeecc.  Typing ssppeecc__ppaarr((""??""))  lists the
     available parameters and their current values.  Option settings are saved
     in the state file.

Default Plot Options Changed
     The startup default colors for high resolution plots have been changed from
     those appropriate to VGA terminals to those appropriate for X11 windows.
     You can still type ddeeff__ccoolloorrss after the global variable GGTTEERRMM has been set
     to select the default colors appropriate to the current graphics device.
     Also, the startup default plotting options have been changed to enable
     low-resolution screen plots during and after each scan and to disable
     printer plots after each scan.

Renamed Startup Macro File
     The name of one of the startup macro files that ssppeecc will read if it exists
     has been changed from ccoonnff//ssiittee..mmaacc to ccoonnff//ccoonnff..mmaacc, where the directory
     ccoonnff is the name by which ssppeecc was invoked, while the second ccoonnff is
     literal.

New ccddeeff Function
     A new function to create ""cchhaaiinneedd"" macros has been introduced.  See the
     ffuunnccss help file for more information.

Improvements Made In wwaaiitt(())
     Previously, the wwaaiitt(()) function would poll all busy devices, even when
     asked to wait for only moving or counting to finish.  Now, only hardware
     that is busy doing that which wwaaiitt(()) is being asked to wait for will be
     polled.

New qquuiitt Command
     There is now a command called qquuiitt that will cause ssppeecc to terminate, just
     as ^^DD does.  The command must be at the beginning of a line either typed on
     the keyboard or read from a command file.  Including qquuiitt in a macro
     definition will not work.

New Workaround To Configure Extra Devices
     Some installations require more motor controllers or serial devices than
     ssppeecc's configuration editor eeddccoonnff allows.  Now eeddccoonnff has been changed so
     that ssppeecc administrators can add extra devices to the ccoonnffiigg file by hand.
     Although the extra devices won't appear on the eeddccoonnff screens, they won't
     be eliminated from the ccoonnffiigg file as before, and will be available to
     ssppeecc.  Eventually, eeddccoonnff will be upgraded to handle as many devices as
     needed.

Code For Scientific Solutions GPIB Board Improved
     The user-level code in ssppeecc that drives the Scientific Solutions (Tecmar)
     GPIB board has been tightened up and made to run faster.  Note that this is
     the only GPIB board supported on lliinnuuxx platforms.

Code For Compumotor 4000 Motor Controller Improved
     Problems with the code for the Compumotor 4000 motor controller when
     running on a GPIB interface faster CPUs have been fixed.

Support for Kinetic Systems 3512/3514 ADC
     The Kinetic Systems 3512/3514 16-channel ADC CAMAC modules may now be used
     as counters with ssppeecc.  When configuring these counters on the scaler
     screen of the configuration editor, selecting a negative scale factor will
     treat the ADC contents as twos-complement data.  A positive scale factor
     means to treat the ADC contents as unsigned binary data.

Driverless Support for KS 2926 CAMAC Controller
     Joining the trend of using user-level, polled code rather than kernel
     drivers for ssppeecc hardware devices, the Kinetic Systems 2926 can now be used
     in a driverless configuration.  The board interrupt should be disabled in
     this case.

Support For the NSK Megatorque Motor Controller
     The Nippon-Seiko Megatorque DC motor controller is now supported by ssppeecc
     over a RS-232C interface.

Support For the Physik Instrumente DC Motor Controller
     The Physik Instrumente C-804/C-812 DC-Motor Controller is now supported by
     ssppeecc over a GPIB interface.

The kkaappppaa Geometry Is Now Usable
     The geometry code for the kkaappppaa configuration is now available.

Software Timer on SYSVR3 Platforms Improved
     The software timer on System V/386 3.2 now reports updated time with
     subsecond resolution.  Note, however, the accuracy of alarms on the version
     of UNIX fluctuates by almost a second.

More Install Options
     The IInnssttaallll program now prompts for additional parameters relating to
     special hardware options, namely whether an SICL GPIB driver is being used
     and whether the Kinetic Systems SCSI-CAMAC driver is being used.

Bug in IInnssttaallll Fixed
     A bug in the new multiple geometry installation feature introduced in the
     previous release, that made the feature not work if the target name
     differed from the standard name, has been fixed.

Bugs in MotionMaster 2000 Fixed
     A couple of bugs in the most recent versions of the Klinger MotionMaster
     2000 code have been fixed.

iinnppuutt((00)) From Pipe Works
     The function iinnppuutt((00)) when used with ssppeecc invoked with the --pp flag can be
     used to see if any input characters are available on the input pipe.  When
     the input is from the pipe, the function returns the number of characters
     available to be read.  When the input if from the keyboard, the function
     returns the null string if no characters are available, or the first
     character available if the user has typed something.

Messages Used With the Pipe Input Option Changed
     The messages sent back to a program (such as a GUI) that run ssppeecc through a
     pipe are being reorganized.  Contact CSS for details.

RELEASE 3.01.03

     These notes summarize the changes made for ssppeecc release 3.01.03 as of May
     9, 1994.

New Macro Hooks Available
     New hooks into the standard macros are now available.  The macros wwaaiittaallll,
     wwaaiittmmoovvee and wwaaiittccoouunntt now include calls to uusseerr__wwaaiittaallll, uusseerr__wwaaiittmmoovvee and
     uusseerr__wwaaiittccoouunntt respectively.  These are defined as empty macros when ssppeecc
     starts fresh.  In addition, the new macros

        ddeeff cchhkk__mmoovvee  ''((wwaaiitt((00xx2211)) |||| UUSSEERR__CCHHKK__MMOOVVEE))''
        ddeeff cchhkk__ccoouunntt ''((wwaaiitt((00xx2222)) |||| UUSSEERR__CCHHKK__CCOOUUNNTT))''
        ddeeff cchhkk__aaccqq   ''((wwaaiitt((00xx2244)) |||| UUSSEERR__CCHHKK__AACCQQ))''

     replace the wwaaiitt(()) calls in the updated moving and counting macros, with
     the new standard global UUSSEERR__CCHHKK__ variables available to the user.  Also,
     the mmoovvee__eemm macro is now defined by default to include the new user hook
     macros as follows:

        ddeeff mmoovvee__eemm ''
            uusseerr__pprreemmoovvee
            mmoovvee__aallll
            uusseerr__ppoossttmmoovvee
        ''

New CCOOUUNNTT__TTIIMMEE Global Variable
     The ccoouunntt__eemm macro now saves the count time in the new standard global
     variable CCOOUUNNTT__TTIIMMEE to make the value available to any other interested
     macros.  The ccoouunntt__eemm macro is the lowest level counting macro called by
     the standard macros.

Installation Now Supports Multiple Geometries
     ssppeecc's installation program now allows you to specify the geometries and
     names of up to 32 configurations that are to be installed together.  One
     binary file will be created that includes the code for all the specified
     configurations.  Each name configuration will be a hard link to that file.

More Plot Points Per Group
     The maximum number of total plot points per group has been increased from
     32,768 to 65,536.  The total number of points allowed in all groups is now
     262,144.

Plot Points File Now Truncated When Starting Fresh
     The plot data file saved with the user's state file in the uusseerrffiilleess
     directory is now truncated when the user starts fresh or when the data in
     the file appears corrupted.  Previously, the file would have to be removed
     to decrease its size.  Note, the file can grow as large as the total number
     of allowed plot points times the number of bytes per point.  For the
     default data format (single precision), the maximum size is currently one
     megabyte per user state file.

New Serial Device Configuration Option
     To support serial devices that don't use the standard UNIX tty interface,
     (such as a serial board in a VME crate accessed through ESRF ddeevv__ppuuttggeett(())
     functions or EPICS channel access), the configuration editor provides a new
     field for serial devices.  For the traditional serial devices, the
     characters <> appear in the field.  Other serial interfaces can be selected
     by stepping through the choices.  In the ccoonnffiigg file itself, the type of
     serial interface is indicated by prepending characters such as EESSRRFF:: or
     EEPPIICCSS:: to the device name.

RELEASE 3.01.02

     These notes summarize the changes made for ssppeecc release 3.01.02 as of March
     31, 1994.

Closing X11 Plot Window From Window Manager Works
     Previously, it was necessary to type pplloott__ccnnttll((""kkiillll"")) to clean up after
     closing the X11 plot window.  Also, it was often necessary to kill xx1111ffiilltt
     processes that were left over after closing the window.  ssppeecc now will
     automatically recreate the plot window the next time data is plotted if the
     plot window has been closed or killed from outside of ssppeecc.  Also, the
     processes that create the window now trap ""wwiinnddooww--ddeessttrrooyy"" events and are
     much more likely to exit no matter how the windows are closed.

GPIB Sharing Improved
     The code to share one National Instruments board with multiple copies of
     ssppeecc running on the same computer has been improved, particularly with
     respect to the code for the GPIB-to-CAMAC controllers.  When a new process
     first accesses the GPIB driver, the driver resets the board, Although ssppeecc
     can not prevent that reset, the error checking and command retry in ssppeecc
     has been much improved, eliminating many of the problems observed by users.

Long Input Lines Won't Crash ssppeecc with rreeaaddlliinnee
     Previously, when using the optional GNU rreeaaddlliinnee command line editing and
     history library, input lines longer than 512 characters would cause ssppeecc to
     crash.  Now, input lines longer than 512 characters are safely truncated.
     In the future, there will be no restriction on input line length.

New ssttoopp(()) Function
     A new hardware control function, ssttoopp((ww)), has been introduced to
     synchronously halt moving, counting or other asynchronous data acquisition.
     If the bit corresponding to ww=1 is set, moving is halted.  if the bit
     corresponding to ww=2 is set, counting and other data acquisition is halted.
     If ww is zero or missing all asynchronous activity is halted.

New aattaann22(()) Function
     The math function aattaann22((yy,, xx)) returns the arc tangent of yy//xx using the
     signs of the arguments to determine the quadrant of the return value.  The
     return value is in the range -PI to PI.

New ppoorrtt__ppuuttww(()) and ppoorrtt__ggeettww(()) Functions
     New functions for 16-bit I/O port access on AT-bus computers are available.

New Motor Parameters
     The motor screen of the configuration editor now has additional subscreens
     for entering optional motor parameters.  The optional parameters are used
     with some of the supported motor controllers.  The parameter subscreens are
     accessed by typing the new mm command.  Optional parameters are entered by
     typing in a value.  Parameters are deleted with the new ^^DD command.  The
     additional parameters are added to the ccoonnffiigg file after the line that
     describes the basic motor parameters using:

        MMOOTTPPAARR::ddcc__ggaaiinn == 11550000

     All of these parameters can be changed or assigned with the mmoottoorr__ppaarr(())
     function.

Klinger Motion Master 2000 Changes
     The Klinger Motion Master 2000 motor controller can now be used with the PC
     port interface.  The ccoonnffiigg file identifiers has been changed from KKLL22000000
     to MMMM22000000.  All of the optional parameters are now taken from the ccoonnffiigg
     file.

yy-axis Significant Digits Adjusted
     The number of significant digits shown on the yy-axis numbers is now
     automatically adjusted to match the range in the data.

Help Links
     A new ..lliinnkkss file in the help file directory is consulted by the ggeetthheellpp(())
     function for associating arbitrary topic names with an existing file.

ACS MCU2 Changes
     The sslloopp parameter is now taken from the optional motor parameters
     available in the ccoonnffiigg file.

Huber SMC 9000 Supported
     The Huber SMC 9000 GPIB motor controller is now supported.

RELEASE 3.01.01

     These notes summarize the changes made for ssppeecc release 3.01.01 as of
     February 23, 1994.

VME Support
     ssppeecc now supports VME.  Currently, the only supported VME controller is the
     National Instruments VME controllers for SunOS 4.1.x S-Bus systems and
     System V/386 and System VR4.x PC platforms.  The supported VME modules are
     the Oregon Micro Systems motor controllers and the Mizar MZ 8310
     timer/counter.

Revised Signal Handling
     Code to handle asynchronous signals from hardware and user interrupts has
     been revised (again).  Signal blocking around hardware access has been
     improved.

Revised Sleep Handling
     The implementation of the sslleeeepp(()) function has been redone to avoid the use
     of alarm signals and/or the interval timer, resulting in more robust
     performance.

HP SICL for GPIB Support
     ssppeecc now supports the HP Standard Instrument Control Library (SICL) for its
     GPIB cards.

changes                      spec 3.00 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 3.00

RELEASE 3.00.07

     These notes summarize the changes made for ssppeecc release 3.00.07 as of
     February 12, 1994.

New Startup Macro File Name
     If a file named ssiittee__ff..mmaacc exists in the SSPPEECCDD directory, it will be read
     when ssppeecc starts fresh, but not otherwise.

mmoottoorr__ppaarr(()) Changes
     The ""bbaassee__rraattee"" and ""aacccceelleerraattiioonn"" parameters may now be changed using the
     mmoottoorr__ppaarr(()) function.  In addition, changes to the ""vveelloocciittyy"" parameter are
     no longer restricted to values between the base-rate and steady-state-rate
     as set in the ccoonnffiigg file.  ssppeecc does no checking on the values passed for
     any of these parameters.  It is entirely up to the user to choose values
     that are usable by the motor controller.

Orientation Matrix Directly Accessible
     For ssppeecc configurations that employ orientation matrix calculations (ffoouurrcc,
     ffiivvee, ssiixxcc, etc.), the orientation matrix values are available in the
     built-in array UUBB[[]].  Matrix values are stored in the UUBB array row wise,
     i.e., UUBB[[00]], UUBB[[11]] and UUBB[[22]] correspond to the first row, and so on.  When
     assigning values to UUBB[[]], note that the ccaallccGG macro which is incorporated
     into many of the standard macros will recalculate the orientation matrix
     using the current lattice parameters and orientation reflections.

New ddaattaa__aannaall(()) Options
     The options ""ii__<<==__vvaalluuee"" and ""ii__>>==__vvaalluuee"" are now available in the
     ddaattaa__aannaall(()) function to return the point number of the nearest data point
     at or below or at or above a given value.  See the ddaattaa help file for more
     information.

Driver Support For Nucleus PCA II Card
     ssppeecc now provides a driver for the Oxford/Tennelec/Nucleus PCA II
     multichannel analyzer card.  The driver enables dead-time corrections to be
     made to the PHA mode count times.  The driver also will generate interrupts
     at the end of preset real- or live-time count intervals and after a preset
     number of MCS-mode passes.  Of course, use of the driver ties up an
     additional PC interrupt line.  See the RREEAADDMMEE file in the ddrriivveerrss directory
     of the ssppeecc distribution for installation information.

Driverless Support For DSP 6001/2 CAMAC Available
     You can now use the DSP 6001/2 CAMAC controllers with the PC004 interface
     card on PC systems in a polled, user-level I/O mode.  No CAMAC driver needs
     to be installed and no modifications need to be made to the 6001/2 module
     in this mode of operation.  Interrupts should be disabled on the PC004
     board.

High-Res Graphics Speed Up For MCA-Type Plotting
     The ddaattaa__pplloott(()) function now uses a faster algorithm for redrawing a plot
     when the same group of points is being redrawn.  The ""bbiigg--ddoottss"" and
     ""eerrrroorr--bbaarr"" options must be turned off, though.  The fast mode is
     particularly appropriate for updating the screen while acquiring MCA data.
     The function pplloott__ccnnttll((""mmccaa"")) must be called before each call to
     ddaattaa__pplloott(()) to engage the faster algorithm.

XX-Axis Log Plotting
     The function call pplloott__ccnnttll((""xxlloogg"")) will cause the xx axis to be drawn using
     a logarithmic scale.  The call pplloott__ccnnttll((""--xxlloogg"")) will disable that mode.

Additional Installation Parameters
     The IInnssttaallll program now prompts for five additional configuration
     parameters.  These parameters select whether the internal data should be
     stored as single-precision (float) or double-precision values, whether to
     link in the optional GNU readline history and command editing library,
     whether to include VME hardware support and where two National Instruments
     hardware object modules for GPIB and VME are located if they are to be
     used.

Per Diffractometer Hardware Locking
     If a second version of ssppeecc associated with a particular ccoonnffiigg file is
     started up while a prior running version has control of the hardware, the
     second version will be forced into simulate mode.  Such hardware locking
     has been implicit in versions of ssppeecc which use CAMAC drivers, in that the
     hardware driver has always only allowed one process at a time to open a
     particular device node.

New pprroommpptt__mmaacc Built-In Macro
     If a macro named pprroommpptt__mmaacc is defined, its contents will be executed
     before ssppeecc issues a fresh prompt.  If an error is encountered while the
     contents of the macro are running, the macro will be automatically
     undefined.

New ggeettlliinnee(()) Function To Read From a File
     A simple version of a new built-in function named ggeettlliinnee(()) is available.
     This function will read an ASCII file a line at a time and return a string
     containing the characters read.  Values can be picked out of the string
     using the new ssssccaannff(()) function described below.  See the ffuunnccss help file
     for more information.

Bug In sspplliitt(()) Function Fixed
     Previously, the sspplliitt(()) function would modify the string that was split.
     It does that no longer.

OMS Configuration Designation Changed
     The OMS motors and motor controllers are now selected with the characters
     OOMMSS rather than PPCCXX, as before.  The eeddccoonnff program will automatically
     convert to the new designation.

ACS MD8 Multiplexing Support With E500 Motor Controller
     Support for a particular home-made multiplexor used with a CAMAC E500 motor
     controller, a CAMAC I/O module and the ACS MD8 motor current source is now
     available.  Only one E500 channel can be multiplexed to up to 16 motors.
     Contact CSS for details on the multiplexor setup.

Added Support For DSP CC-488 GPIB-To-CAMAC Module
     The DSP CC-488 GPIB-to-CAMAC module is now supported.

RELEASE 3.00.06

     These notes summarize the changes made for ssppeecc release 3.00.06 as of
     December 19, 1993.

Quoted Strings Can Be Passed To Macros
     Escaped quotes, as in \\"" or \\'', can now be used in arguments to macros to
     pass literal quotes to the macro.  The previous treatment of \\"" as an
     argument to a macro had been undefined.

CAMAC May Be Configured in Polled Mode
     You can now run the CAMAC drivers in polled mode.  Instead of CAMAC LAMs
     generating CPU interrupts to signal ssppeecc when moving or counting is
     finished, ssppeecc will poll the CAMAC driver approximately 20 times a second
     to obtain the current LAM status.  Polling only takes place when the wwaaiitt(())
     function is called while moving or counting is in progress.  Use the ccoonnffiigg
     macro to select polled or interrupt mode.

Binary Mode ggppiibb__ggeett(()) and sseerr__ggeett(()) Improved
     The values returned by the binary mode ggppiibb__ggeett(()) and sseerr__ggeett(()) functions
     will now return the same values when running on both bbiigg--eennddiiaann and
     lliittttllee--eennddiiaann machines.  By default, the incoming data is treated as bbiigg
     eennddiiaann.  If the incoming data is lliittttllee eennddiiaann, use ""iinntt44__sswwaapp"" or
     ""iinntt22__sswwaapp"" as the second argument to the functions.

New ssssccaannff(()) Function
     A new built-in function ssssccaannff is available.  Its usage is

         ssssccaannff((ssttrriinngg,,  ffoorrmmaatt,,  llvvaalluuee [[,, ......]]))

     where ssttrriinngg is literal string or string variable that contains data to be
     scanned, ffoorrmmaatt is a literal string or string variable that contains format
     specifications in the same style as the C language ssccaannff(()) functions, and
     the llvvaalluuee arguments are the names of variables or array elements.  The
     function returns the number of items found in the string.

Unidirectional Powder Mode Option Available
     The powder mode macros now allow for unidirectional scanning of the
     motor-mode (rocked) motor.  See the ppoowwddeerr help file for details.

Bug In ddaattaa__aannaall(()) Fixed
     A bug where the minimum and maximum values returned by the ddaattaa__aannaall(())
     function for ssttaarrtt values not equal to zero may have been incorrect by
     including the values at point zero in the comparisons has been fixed.

Bug In ddaattaa__pplloott(()) Fixed
     A bug where the plots drawn for the ddaattaa__pplloott(()) function for ssttaarrtt and nnppttss
     values not equal to zero may not have been the plots requested has been
     fixed.

RELEASE 3.00.05

     These notes summarize the changes made for ssppeecc release 3.00.05 as of
     November 20, 1993.

Minor Bug In ggppiibb__ggeett(()) Fixed
     When the second argument to ggppiibb__ggeett(()) is a number to indicate the number
     of bytes to read, previously the function would return early if the
     end-of-string character (a newline) was received.  That bug has now been
     fixed.

Minor Change In GPIB Addressing
     A redundant MLA (my listen address) used in the addressing sequence for
     reads of GPIB devices (the intended purpose of which is lost in the dim
     reaches of time) has been eliminated, as it made at least one instrument
     unreadable.  The extra MLA was only used with National Instruments boards
     and the Iotech SCSI488/H controller.

Eliminated Historical 24-Bit Test On Motor Steps
     The 24-bit limitation on values for motor controller dial positions has
     been eliminated.  This check dated back to ssppeecc's original use with only
     motor controllers on the 24-bit CAMAC dataway.

Debugging Output Sped Up
     Bottlenecks in printing debugging output to files and to the screen have
     been eliminated, speeding things up, particularly for debugging modes 256
     and 1,024, associated with showing input pushback and macro expansion.

Reported Problems With Am9513 Counters Addressed
     The Am9513 counter/timer chip (on the Keithley-Metrabyte CTM-05 and
     Scientific Solutions Labmaster PC boards) is now reset by ssppeecc before each
     count period, instead of just at start up.  This seems to correct problems
     with incorrect count times or count values observed by some users.

Bug In rrddeeff Fixed
     A four-year old bug in the implementation of rrddeeff has been fixed.  The bug
     only occurred when the macro name was previously unused and the definition
     was an expression to be evaluated, rather than a string constant.  The
     results of the bug were unpredicatable, as the bug was associated with
     memory allocation.  It was possible for no ill effects to be observed.

RELEASE 3.00.04

     These notes summarize the changes made for ssppeecc release 3.00.04 as of
     November 11, 1993.

New sseerr__ggeett(()) Mode
     A new binary-read mode has been added to sseerr__ggeett(()) to read binary
     single-byte, two-byte or four-byte (unsigned) integers.  See the sseerriiaall
     help file for details.  (A similar mode was added to ggppiibb__ggeett(()) for release
     2.15+, though not mentioned in the update notes.  See the ggppiibb help file
     for details.)

Increased Maximum Number Of Counters
     The maximum number of counters allowed has been increaseed from 20 to 128.
     The scaler screen of the configuration editor will scroll when more than 20
     channels are configured.

Increased Maximum Number Of Data Points
     The maximum number of data points allowed for all data groups has been
     doubled to 128K.

New pprriinnttff(()) Format Option
     The pprriinnttff(()) function now recognizes the %%uu option format to print numbers
     in unsigned integer format.

Integer-To-Float Conversion On Intel Improved
     When floating point values with a magnitude that exceeds the value that
     will fit in an integer are assigned to an integer in programs on some
     System V/386 systems, programs hang.  Most cases of such assignment are now
     caught in ssppeecc on these systems.  Values that would overflow are set to
     zero (the behavior on most systems).

Getting Data Group Status
     The command ddaattaa__ggrrpp((--11,, 00,, 00)) will display the current data group
     configuration and will return a value of zero.

More Hardware Options For ppoowwddeerr Mode
     The code for the Oregon Microsystems PC board motor controller, the ACS MCU
     motor controller and the Am9513-based counting boards has been fixed to
     work in ppoowwddeerr mode.

State Commands Made Obsolete
     The new memory allocation scheme has made the ""ggaarrbbaaggee ccoolllleeccttiioonn"" commands
     ggeettssttaattee, ssaavvssttaattee and ffiixxssttaattee unnecessary.  Currently, no error message
     is printed when they are used, but they now have no function.  In future
     versions, the commands will be eliminated altogether.

ttiimmee(()) Fix For Sun Solaris 2
     The ttiimmee(()) function will now return fractional values on Sun Solaris 2
     systems.  However, all users must include //uussrr//uuccbblliibb in their
     LLDD__LLIIBBRRAARRYY__PPAATTHH environment variable before starting ssppeecc.

Microvax GPIB Problems Fixed
     A bug where the ggppiibb__ppuutt(()) function didn't return the number of bytes
     written has been fixed.  Also, the code now ensures the EOI signal is
     asserted with the last byte of data written to the bus.

RELEASE 3.00.03

     These notes summarize the changes made for ssppeecc release 3.00.03 as of
     September 28, 1993.

Internal Memory Size Constraints Eliminated
     ssppeecc's memory allocation and management has been redesigned to eliminate
     previous size constraints.  ssppeecc will now allocate memory, as required, up
     to the system-imposed constraints.  This change allows many more statements
     to be included within curly brackets to make a single parse tree.  Also,
     the mmeemmssttaatt command no longer reports memory fragmentation, but rather
     statistics related to the new memory allocation algorithm.  In addition,
     the ffiixxssttaattee command for memory defragmentation is no longer needed and has
     been eliminated from the standard macros.

New Plot Title Variable
     Previously, the current scan number was placed in the title position of
     ssppeecc's plots.  A new global symbol TT__LL has been introduced to hold the
     title.  The macros __hheeaadd and ggeettssccaann macros have been modified to write the
     scan number in TT__LL.  Now, plots of data sets obtained with the ggeettssccaann
     macro will show the correct scan number.

Reverse Video Standout Mode Shunned
     ssppeecc uses ""ssttaanndd oouutt"" mode to highlight alternate fonts when displaying
     help files and other text on a video display.  The preferred stand out mode
     is high-intensity text.  Many terminal descriptions (in //eettcc//tteerrmmccaapp or
     //uussrr//lliibb//tteerrmmiinnffoo) make reverse video the stand out mode, which doesn't
     work well with ssppeecc's text.  ssppeecc will now automatically replace the EESSCC [[
     77 mm stand out mode string (reverse-video on ansi-derived displays) with the
     EESSCC [[ 11 mm high-intensity text string.

Ortec Timer Bug Fixed
     A bug in release 3.00.02 where the times displayed in blind-timer mode with
     the Ortec 974 or 994 modules when counting to monitor counts was off by a
     factor of 10 or 100 has been fixed.

Alternate Command Line History Available
     At the ssppeecc administrator's option, the GNU rreeaaddlliinnee library may be used
     with ssppeecc.  The sources to this library are provided in the rreeaaddlliinnee
     subdirectory of the ssppeecc distribution.  See the RREEAADDMMEE file in that
     directory for instructions on linking.  See the rreeaaddlliinnee help file for a
     summary of readline's syntax.  See the files in the rreeaaddlliinnee//ddoocc directory
     for a complete description of readline's features.

RELEASE 3.00.02

     These notes summarize the changes made for ssppeecc release 3.00.02 as of
     September 1, 1993.

Automatic Globalization
     Variables that are assigned values at the top level (outside of any curly
     brackets) are now automatically made into global variables.

Support For Ortec 918
     Preliminary support for the Ortec 918 Multichannel Buffer NIM module has
     been added to ssppeecc.

Ortec Timer Bug Fixed
     A bug in release 3.00.01 that made Ortec 974 and 994 timers unusable has
     been fixed.

Compumotor 4000 Bug Fixed
     A bug in release 3.00.01 that resulted in various unpredictable errors
     associated with the Compumotor 4000 motor controller has been fixed.

RELEASE 3.00.01

     These notes summarize the changes made for ssppeecc release 3.00.01 as of
     August 10, 1993.

String, Macro and History Size Limits Increased
     The maximum length of a string constant has been increased from 2048 to
     8192 characters.  The maximum length of a macro definition has been
     increased from 1920 to 8064 characters.  The maximum number of commands
     retained as command-line history as been increased from 100 to 1000.

New ccoouunntteerr__ppaarr(()) Function
     A new built-in function named ccoouunntteerr__ppaarr(()) has been added to support
     non-standard features in particular counter/timer hardware.  Currently,
     only the Ortec counter/timers make use of this function.  See the oorrtteecc
     help file for more information.

New iimmaaggee__ppaarr(()) Function
     A new built-in function named iimmaaggee__ppaarr(()) has been added to support 2D
     detectors.  Currently, only the Photometrics Star 1 CCD camera is
     supported.  See the ssttaarr11 help file for more information.

New pplloott__ccnnttll(()) To Return Current Colors
     An option has been added to the pplloott__ccnnttll(()) function to return the color
     assignments.  The function pplloott__ccnnttll((""ccoolloorrss[[nnuummbb]]"")) where nnuummbb is a number
     between zero and 67.  Pen numbers zero through three are those assigned to
     the bbggnndd, wwiinn, tteexxtt and aaxxiiss elements respectively (see the ffuunnccss help
     file).  Arguments from 4 through 67 are assigned to the symbol colors for
     data elements zero through 63.

Ortec Counter/Timer Code Revamped
     The code to support the Ortec 974/994/995/997 counters and counter/timers
     has been overhauled to greatly decrease the overhead time per point.  In
     addition, it is now possible to use the model 994 as a blind timer.  See
     the oorrtteecc help file for more information.

Fixed Bug With \\xx
     A bug of long standing, where the character sequence \\xx did not produce the
     character xx, where xx was any character not part of a special sequence, has
     been fixed.

Memory Leak On Sun Fixed
     A bug that occurred mainly on SunOS systems where the parser produced by
     the yacc program created code that caused the virtual size of ssppeecc to grow
     without bounds, has been fixed.

Bug With ttiimmee(()) On Sun Fixed
     A bug where the built-in function ttiimmee(()) did not return fractional seconds
     on SunOS systems has been fixed.

changes                     spec 2.15+ Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 2.15+

DESCRIPTION

     These notes summarize the incremental patches made to ssppeecc release 2.15
     (released February 21, 1992), as of April 19, 1993.

INCOMPATIBILITIES

String Value Of Uninitialized Variables

     A long standing inconsistency (bug) dealing with the string value of an
     uninitialized variable has been corrected.  The string value of an
     uninitialized variable is now the null string, """".  Previously, the string
     value would have been ""00"".  This change makes the values of uninitialized
     variables consistent with aawwkk.  The standard macros have been modified in
     several places to take account of this new behavior.  If you are currently
     using expressions such as

        iiff ((ssoommee__nnaammee ==== ""00"")) ......

     to test whether a variable is uninitialized, you should change such
     expressions to

        iiff ((ssoommee__nnaammee ==== """")) ......

     to work with this new version of ssppeecc.

NEW FEATURES

Two High-Res Plot Windows

     The pplloott__ccnnttll(()) function can now be used to create and select between two
     high resolution plot windows.  See the ffuunnccss help file for more
     information.

Multiple Curves On A Single Plot

     The ddaattaa__pplloott(()) function can now be used to plot multiple curves with one
     call.  See the ddaattaa help file for more information.

Including Local Help Files

     Local help files can be included in this list of topics in the basic help
     file by including the local help file names in a file named
     SSPPEECCDD//hheellpp//..llooccaall.  The basic help file is only updated during a full
     installation of ssppeecc.

Macro To Configure Counters

     A new macro named ccoouunntteerrss displays the current counter configuration and
     then prompts for counter channel numbers for the global variables MMOONN and
     DDEETT.  Those variables hold the channels to be treated as monitor and
     detector in the counting and scan macros.  The monitor and detector channel
     numbers can also be given as arguments to ccoouunntteerrss.

Reusing Macro Names As Local Variables

     ssppeecc's syntax has been changed to allow macro names to be reused as local
     symbols.  Previously, input such as the following would not be allowed:

        ddeeff dd ''pprriinntt ddaattee(())''
        {{ llooccaall dd ;; dd == 22 ;; pprriinntt dd }}

     In the current version, reuse of the symbol dd is accepted.

Can Use ..lloogg Extension For Log Files

     Previously, lloogg files (files that recorded all of ssppeecc's output) were any
     files with names that began with the three characters lloogg.  Now files
     ending with the four characters ..lloogg, are also used as log files.

Debugging Log Files

     A new type of lloogg file is available.  If an output file name begins with
     the characters ddlloogg or ends with the characters ..ddlloogg, all of ssppeecc's output
     will be sent to that file, as with normal lloogg files.  In addition, if any
     debugging output is being generated (by assigning a value to the built-in
     DDEEBBUUGG variable), the debugging output will only be sent to the ddlloogg file
     and won't be printed on the screen or sent to any other files.

New Function To Prompt For User Input

     A new function named ggeettvvaall(()) is available for reading values from the
     keyboard.  See the ffuunnccss help file for usage information.  Macros that use
     the slightly awkward ggeettvvaarr macro can be rewritten with this new function.

New Random Number Function

     A new function named rraanndd(()) returns random numbers.  See the ffuunnccss help
     file for usage information.

New \\aa Attention Character

     A new special character sequence, \\aa (for attention or audible alert), has
     been added.  This sequence sounds the terminal bell (and appears to be part
     of the ANSI C grammar).

MCA No Longer Automatically Cleared

     ssppeecc will no longer clear the LeCroy 2301, 3512 and 3521 MCA modules when
     counting using ttccoouunntt(()) or mmccoouunntt(()).  You will have to use the
     mmccaa__ppaarr((""cclleeaarr"")) function before counting to clear the MCA channels.  This
     change is made to accommodate the needs of some users.

Multiple Processes Can Share GPIB Controller

     On System V UNIX operating systems with IPC (inter-process communication),
     it is now possible to share one National Instruments GPIB controller among
     multiple versions of ssppeecc running on the same computer.  In addition, it is
     also possible to share a single KS 3988 GPIB-to-CAMAC controller among
     multiple processes.  The IPC version of the GPIB controller is selected by
     the name PPCC__GGPPIIBBPPCC__LL in the ccoonnffiigg file.

Multiple Versions Of 386/486 NI GPIB Supported

     Both the National Instruments PCII and AT-GPIB cards and drivers are now
     supported within the same binary for 386 systems.  The former is chosen
     using the PPCC__GGPPIIBBPPCC (or PPCC__GGPPIIBBPPCC__LL) and the latter using PPCC__GGPPIIBBPPCC22 (or
     PPCC__GGPPIIBBPPCC22__LL) in the ccoonnffiigg file.  WWaarrnniinngg:  Selecting the wrong controller
     type may crash your computer or damage your file system.

Multiple Versions of Sun NI GPIB Supported

     Three versions of the National Instruments GPIB drivers are now available
     for Sun platforms.  In the ccoonnffiigg file, the keywords PPCC__GGPPIIBBPPCC (or
     PPCC__GGPPIIBBPPCC__LL) select the SB-GPIB Version 1.3 driver, the keywords PPCC__GGPPIIBBPPCC22
     (or PPCC__GGPPIIBBPPCC22__LL) select the GPIB 1014-1S driver and the keywords
     PPCC__GGPPIIBBPPCC33 (or PPCC__GGPPIIBBPPCC33__LL) select the SB-GPIB Version 2.1 driver.
     WWaarrnniinngg: Selecting the wrong controller type may crash your system.

Support For ACS MCB-4 Motor Controller

     Preliminary hardware support is available for the Advanced Control System
     MCB-4 stepping motor controllers over RS-232 and GPIB interfaces.

Support For NSLS MMC32 Motor Controller

     Preliminary hardware support is available for the MMC32 stepping motor
     controller (produced locally at NSLS) over a GPIB interface.

Support For Oriel Encoder Mike 18011 Motor Controller

     Preliminary hardware support is available for the Oriel Encoder Mike 18011
     controller over an RS-232 interface.

Support For Klinger Motion Master 2000

     Preliminary hardware support is available for the Klinger Motion Master
     2000 DC and stepper motor controller over a GPIB interface.  See the kkll22000000
     help file for more details.

Support For the kkaappppaa Geometry

     Preliminary support for the kkaappppaa diffractometer geometry is included.

Support For ESRF

     Support for the distributed computing, VME-based hardware environment of
     the European Synchrotron Radiation Facility (ESRF) is now included.  A
     general hardware control function eessrrff__iioo(()) has been added to ssppeecc (see the
     eessrrff help file) and support for the ESRF motor controllers is available.

Allowing For Slop In E500 Motor Positions

     An experimental new feature is available to deal with small discrepancies
     between the E500 controller and ssppeecc.  The function mmoottoorr__ppaarr((mmoottoorr,,
     ""sslloopp"",, sstteeppss)) sets a threshold value for the selected motor for which ssppeecc
     will automatically use the E500 value as the correct position.  A message
     is printed if such a correction occurs.  The values set are saved in the
     state file.

CHANGED FEATURES

New Definition For the ssccaann__pplloott Macro

     The ssccaann__pplloott macro is now defined in the standard macros as __pplloott, which
     is a newly introduced name.  The sseettpplloott macro will change the definition
     of __pplloott, rather than ssccaann__pplloott.  Local sites that wish to redefine
     ssccaann__pplloott no longer need to redefine the sseettpplloott macro.

New ggeett__aanngglleess Macro

     Occurrences of the built-in command ggeettaanngglleess in the standard macros have
     been replaced with the macro ggeett__aanngglleess.  This new macro contains the
     ggeettaanngglleess command, along with invocation of a new macro named
     uusseerr__ggeettaanngglleess.  The latter is initially defined as a null macro.

New ggeett__ccoouunnttss Macro

     The built-in command ggeettccoouunnttss in the standard macros has been replaced
     with the macro ggeett__ccoouunnttss, which calls ggeettccoouunnttss and a new macro named
     uusseerr__ggeettccoouunnttss, which is initially defined as a null macro.  The purpose of
     this change is to allow the user to insert code, if necessary, after the
     call to ggeettccoouunnttss either to postprocess the the counter values, or to
     implement user-level counters.  For one particular configuration, the
     distance of the detector from the sample varies with the cosine of an
     angle, so uusseerr__ggeettccoouunnttss is defined to multiply SS[[DDEETT]] by the appropriate
     factor.

New ccoouunntt__eemm Macro

     A new ccoouunntt__eemm macro replaces all the code and immediate logic surrounding
     calls to mmccoouunntt(()) and ttccoouunntt(()).  Included in ccoouunntt__eemm are calls to new
     macros named uusseerr__pprreeccoouunntt and uusseerr__ppoossttccoouunntt.  By default, these macros
     are defined as null macros.  They can be given definitions by users for
     various purposes, including implementation of user-level counters.  See the
     ccoouunntt..mmaacc source file for details.

Orientation Matrix Code Accommodates Six Angles

     The maximum number of angles used by the orientation-matrix code to
     describe each reflection has been increased from five to six, to
     accommodate the new six-circle geometry.

Increase In the Number Of Data Groups

     The number of data groups has been increased from eight to 256.  A limit
     has been placed on the total number of points allowed for all groups.  That
     limit is currently 65,536 points, but can be increased by CSS if requested.

Data Groups Can Be Deleted

     Calling ddaattaa__ggrrpp(()) with the number-of-elements argument set to zero will
     now delete the group.

Renaming Of Background-Flag Variable

     The flag for background subtraction in the macros, defined in the source
     file pplloott..mmaacc, has been renamed BBGG.  Previously the name of the flag was
     PPGG.

New Measure Macros

     The mmeeaassuurreetteemmpp macro, called after counting in the __lloooopp macro, has been
     replaced with two new macros called mmeeaassuurree11 and mmeeaassuurree22.  Initially,
     mmeeaassuurree11 is defined as mmeeaassuurreetteemmpp to maintain compatibility with prior
     usage.  Also introduced in the __lloooopp macro is a new mmeeaassuurree00 macro that is
     called before counting.  Both mmeeaassuurree00 and mmeeaassuurree22 are initially defined
     as null macros.

Macros Work Without A Monitor Counter

     The standard scan and counting macros have been modified so that they can
     still be used if there is no monitor counter configured.  Set the global
     variable MMOONN to -1 if you don't have a monitor counter.

IMPROVED FEATURES

No More Need For So Many Underscores

     The initial underscores in the names of many of the local symbols in the
     standard macros have been removed in order to improve the readability of
     the macros.  The underscores no longer serve a purpose due to the
     improvements in the functionality of the llooccaall keyword.

Improvements To Output File Handling

     A number of changes have been made to improve the handling of output files.

     1. ssppeecc now keeps track of the current working directory when each file is
        opened.  If you exit ssppeecc and then restart it from a different
        directory, the existing output files will be reopened in their correct
        directories.

     2. If you restart ssppeecc using an existing state file and there is an output
        file present in the state file that has disappeared from the file
        system, ssppeecc now prints a warning message.  If possible, ssppeecc will
        create a new file using the previous name and directory, though.

     3. The oonn(()) and ooppeenn(()) functions, when used without arguments, now also
        print the full path name of the files, along with the name by which each
        was opened.

     4. When the cclloossee(()) function is used with an unopened file, ssppeecc no longer
        prints an error message.

     5. Previously, if you removed a ssppeecc output file while ssppeecc still had it
        open, all subsequent output to the file would be lost until the file was
        closed, either through the cclloossee(()) function, by exiting and restarting
        ssppeecc or through the ffiixxssttaattee command.  ssppeecc will now detect when you
        attempt to write to an open file that has been removed from the file
        system.  ssppeecc will print a warning message, close the old file
        descriptor, create a new version of the file and open that file for
        writing.  As a general rule, it is a bad idea to use any other UNIX
        utility to change a file currently opened for writing by any program,
        including ssppeecc.

     6. The previous versions of the nneewwffiillee macro opened the data file in a
        directory named ..//ddaattaa if it existed.  A new global variable named
        DDAATTAA__DDIIRR is now used to hold the name of the optional data directory.
        DDAATTAA__DDIIRR is initially set to ..//ddaattaa, so the default behavior is as
        before.

     7. If the file you enter in the nneewwffiillee macro has the same name as the
        current data file, but if you have changed directory, the previous file
        will be closed and a new one opened in the current directory.

     8. If the nneewwffiillee macro can't open the file asked for, the DDAATTAAFFIILLEE
        variable is set to ""//ddeevv//nnuullll"".

     9. The nneewwffiillee macro now prints warning messages if the file already
        exists, if the file exists and doesn't have the ##FF characters at the
        start of the file or if the file name given is the same as the current
        DDAATTAAFFIILLEE but doesn't exist.  This feature uses a program called
        cchhkk__ffiillee, which is installed in the SSPPEECCDD directory.

Monochromator Support Revamped

     The monochromator support has been revamped.  All of the functionality is
     now in macro code.  The ggeeoo__mmoonnoo..cc module has been eliminated.  All of the
     monochromator macros are in the macro source file mmaaccrrooss//eenneerrggyy..mmaacc.  One-,
     three- and four-motor monochromators are supported.  The macros
     automatically detect which type of monochromator is being used based on the
     motor mnemonics present in the ccoonnffiigg file.  The ggeett__EE, sseett__EE and mmoovvee__EE
     macros have been renamed ggeettEE, sseettEE and mmoovveeEE, respectively.  See the new
     mmoonnoo help file for details.

CAMAC Info In iinnssttaallll__ddaattaa File

     The --CC flag to the IInnssttaallll program has been replaced with a line in the
     iinnssttaallll__ddaattaa file that keeps track of whether or not to include CAMAC
     support.

Non-Super User Installation

     The --SS option to the IInnssttaallll program that lets you install ssppeecc without
     being super user as long as you have write permission on all the relevant
     files has been fixed to work on most, if not all, systems.  Previously, the
     call of the cchhoowwnn UNIX command caused problems on some systems where it was
     only available to the super user.  Now, the --SS option disables all calls to
     cchhoowwnn.

Driver Files Can Be Installed Without Kernel Rebuild

     The driver install scripts for the 386 systems now accepts a --nn option to
     indicate not to rebuild the kernel after installing the driver files.

Improvements to ssuurrff Geometry Code

     The code in ggeeoo__ssuurrff..cc that determines which version of the available
     surface diffractometer configurations to use based on the configured motor
     mnemonics has been improved to check that all the necessary mnemonics are
     present, rather than just looking for one or two of them.  Also, the code
     now does better error checking for mathematical singularities.  In
     addition, the calculations between motor positions and reciprocal space now
     work correctly in all the available modes.

Improvements To ffoouurrcc and ffiivveecc Code

     The ffoouurrcc and ffiivveecc geometry code has a few more checks for unobtainable
     reflections in the aazziimmuutthhaall modes.

Changes To ttwwoocc Internals

     The numbering of the QQ[[]] parameters for the ttwwoocc geometry has been changed
     to be consistent with the other geometries.  The indices of the LLAAMMBBDDAA,
     AALLPPHHAA and BBEETTAA parameters have all been increased by one.  QQ[[22]], formerly
     LLAAMMBBDDAA, is now unused.

Improvements to bbuugg Macro

     The bbuugg macro now uses the value of the new global variable MMAAIILL for the
     name of the mail program to run.  The default value is the string mmaaiill.

Faster, More Robust High-Res Graphics

     The interface code to the high-resolution graphics filters has been
     rewritten for improved speed and robustness.

X11 Graphics Automatically Brought To Front

     The xx1111ffiilltt program will now automatically raise the window to the front
     each time its contents are changed.  This feature can be disabled in your
     ..XXddeeffaauullttss file by setting the ssppeecc..AAuuttooRRaaiissee parameter to off.

X11 Graphics Checks For Backing Store

     The xx1111ffiilltt code has been fixed to automatically detect whether ""bbaacckkiinngg
     ssttoorree"" is available.  If backing store is requested when it is not
     available, the code switches automatically to retained pixmap mode.

Am9513 Counting Improved

     The code for the Am9513 based counting boards for the PC has been improved.
     The maximum count has been increased from from 10.9 minutes to 71.5
     minutes.  When counting to time, the time base resolution (in seconds) is
     now set according to the following table:

         0.00001  for tt < 0.6 sec
         0.0001   for tt < 6 sec
         0.001    for tt < 60 sec
         0.01     for tt < 655.35 sec (10.9 min)
         0.0655   for tt < 71.5 min

     When counting to monitor counts, the 0.01 second time base is used, and the
     value returned for the time channel will be corrected to account for the
     rollovers that occur every 655.36 seconds.  Also, the powder-mode counting
     mode used by the sseettppoowwddeerr macro is now implemented.

MCU Code Improvements

     The MCU code now only sends values for the base rate, steady-state rate and
     acceleration parameters when ssppeecc starts, when the rreeccoonnffiigg command is
     executed or when you change the steady-state rate with the mmoottoorr__ppaarr(())
     function.  Previously, these values were sent before each move.

Compumotor 4000 Code Updated

     The code for the Compumotor 4000 has been updated to work with the revised
     PROMS that Compumotor is now shipping.

BUG FIXES

X11 Color Names Updated

     The color definitions have been updated to agree with the X11R4 values.  Of
     the two (out of 175) color names used within the ssppeecc X11 filter that are
     no longer defined in X11R4, one, unfortunately, was the default background
     color for the sspplloott and rrpplloott screens, resulting in a black text on a black
     background.

Bugs in Assigning Values to Built-in Variables Fixed

     It is no longer legal to assign string values to built-in number variables
     such as CCOOLLSS or RROOWWSS or number values to built-in string variables such as
     TTEERRMM or GGTTEERRMM.  Attempts to do so will generate a warning message, but will
     not cause ssppeecc to reset to command level.

Bugs Fixed in eeddccoonnff

     A bug in the eeddccoonnff program, where deleting the highest numbered motor
     resulted in an incorrect display, has been fixed.

Bug Fixed in ccaa__ffnnaa(())

     A bug in the ccaa__ffnnaa(()) function, where it required an unnecessary fourth
     argument for command-type F codes (those with bit 3 set), has been fixed.

Bug in Producing Lp-Style Plots Fixed

     A bug in release 2.15, where the lp-style plots would not be produced if
     high-resolution graphics were enabled, has been fixed.

Bug in bbeeggiinn__mmaacc Fixed

     A bug in the implementation of the bbeeggiinn__mmaacc feature has been fixed.
     Previously, bbeeggiinn__mmaacc wouldn't execute unless a startup command file, such
     as ssiittee..mmaacc or ssppeecc..mmaacc, was read.  Also, the message ((rruunnnniinngg bbeeggiinn__mmaacc
     ......))  is now printed on the screen when ssppeecc starts up if the bbeeggiinn__mmaacc
     macro is defined.

Bug in ddaattaa__pplloott(()) Fixed

     A bug in the ddaattaa__pplloott(()) function, where if the number-of-points parameter
     was not zero, the plots weren't made, has been fixed.

Bugs in mmoovvee__ppoollll(()) Implementation Fixed

     The way in which the mmoovvee__ppoollll macro was added to the motor moving macros
     in release 2.15 broke the updated display of motor positions in the
     updated-moving macros.  The macros that use mmoovvee__ppoollll have been rewritten
     so that the updated display will now work.  The change involves
     reorganizing all the motor moving macros along the lines of

        ddeeff mmvv  ''__mmvv $$**;; mmoovvee__ppoollll''
        ddeeff uummvv ''__mmvv $$**;; __uuppddaattee11 $$11''

     where the new __mmvv macro contains what used to be in mmvv.

Bugs in CAMAC MCA Code Fixed

     Bugs in the code for LeCroy 2301 and 3588 MCAs that handled large numbers
     incorrectly have been fixed.

Bugs in ssccaannss..44 Fixed

     A bug, introduced in the last version of ssccaannss..44..cc, where the error bars
     would be calculated incorrectly for a point with zero detector counts, has
     been fixed.

     Another bug in ssccaannss..44 (introduced in the January 1992 revision), where
     when ##CC comment lines contained numbers in columns that matched the data,
     the function included those numbers in the data that was returned, has been
     fixed.

Bug in E500 Acceleration Parameter Interpretation Fixed

     An inconsistency concerning the interpretation of the units of the CAMAC
     E500 stepping motor controller acceleration parameter has been clarified.
     The E500 has an eight-bit register for each motor that contains the
     acceleration time in tens of milliseconds.  Valid values for that register
     are from zero to 255, which translate to valid acceleration times from 10
     milliseconds to 2.55 seconds.  Since the very first versions of ssppeecc, the
     values given in the ccoonnffiigg file have been copied directly to the E500
     registers.  However, ssppeecc's documentation has always stated that the value
     in the ccoonnffiigg file was in milliseconds.  Thus, the default value of 125
     translated to 1.25 seconds when the number was copied directly to the E500
     register.  With this version, ssppeecc now properly treats the values in the
     ccoonnffiigg file as milliseconds.  ssppeecc also prints a warning message if the
     values in the ccoonnffiigg are outside the legal range.  A negative value causes
     a zero to be written to the acceleration register, which is a valid
     acceleration time on the E500.  ssppeecc does not allow zero to be entered
     directly, though.  You may want to check all the acceleration parameters
     for your motors after you install this version of ssppeecc.  In particular, if
     you have values between 1 and 255 that seemed suitable for your motors, you
     should change those values by multiplying by ten.

Bug in MCU Acceleration Parameter Interpretation Fixed

     An error concerning the acceleration (ramp) parameter for the ACS MCU motor
     controller has been fixed.  The values sent to the MCU were previously ten
     times greater than the values requested in the ccoonnffiigg file.  Since the MCU
     often has communication problems during the ramp times at the start and end
     of a move, the long ramp times increased the chances of communication
     errors.

Bug in DSP and OMS Driver Installation Fixed

     The iinnssttaallll scripts for DSP CAMAC driver and OMS motor driver have been
     fixed to correctly set the IO-port end address in the kernel configuration
     files on AT&T System V/386 installations.  Previously, if you changed the
     base address from the default using a command line option, the end address
     was not updated correctly.

Bug in Macro Installation Fixed

     A bug in the installation procedure that put the orientation matrix macros
     in ssttaannddaarrdd..mmaacc rather than the appropriate configuration macro files
     (ffoouurr..mmaacc, etc.)  has been fixed.  If the last macro package installed
     didn't use the orientation matrix macros, the orientation matrix macros
     would not be put in ssttaannddaarrdd..mmaacc and thus would not be available to a
     previously installed geometry configuration that required them.

Bugs in Ortec Counting Fixed

     Many changes have been made for the Ortec 974/994/995/997 modules,
     (Apparently the previous code wasn't working as well as CSS was led to
     believe.)

Microvax GPIB Bug Fixed

     A possible bug with the code for the National Instruments GPIB controller
     for the DEC Microvax Q-bus dealing with non-terminated reads has been
     fixed.

Simulate-Mode Bug Fixed

     A bug in simulate mode that occurred when the change to simulate mode took
     place before any motors had been moved has been fixed.  The manifestation
     of the bug was the appearance of strange values for motor positions.  The
     bug only occurred on some computer platforms and only affected the behavior
     in simulate mode.

ddooffiillee(()) Bug Fixed

     A bug of longstanding, where ssppeecc would hang if the file used with ddooffiillee(())
     or qqddooffiillee(()) was empty, has been fixed.

Bugs in eeddccoonnff Wizard Mode Fixed

     The main hole in the motor security features available with the wwiizzaarrdd
     option of the eeddccoonnff program (dealing with reading in backup files that
     describe a less secure configuration) has been plugged up.

changes                      spec 2.15 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 2.15

DESCRIPTION

     These notes summarize many of the modifications made for ssppeecc release 2.15,
     as of February 21, 1992.

INCOMPATIBILITIES

     Release 2.15 includes a number of changes that make certain prior usages
     obsolete.

     1. The ggeettmmccaa(()) function has been eliminated.  A new interface to MCA-type
        devices has been established using the functions mmccaa__ppaarr(()), mmccaa__ggeett(())
        and mmccaa__sseell(()).  See the ffuunnccss help file for details.

     2. The syntax of the CC--PPLLOOTT user function ssccaannss..44 has been modified
        slightly to clear up ambiguities concerning how the data points are to
        be normalized.  The --mm and --tt flags have been replaced with a ++nn or --nn
        flag to indicate whether the data is to be normalized, and mm==_c_o_l and
        tt==_c_o_l arguments to specify column numbers for the monitor-counts or time
        normalization values.  If columns aren't specified, the normalization is
        taken from the ##MM or ##TT directives in the data file.

     3. The method for subtracting a linear background based on a scan's end
        points has been changed.  A new macro, based on the new internal
        data-handling routines and named ddoo__bbgg, is now provided.  See the pplloott
        help file for more information.

     4. Two arguments to pplloott__ccnnttll(()) have been renamed.  Use pplloott__ccnnttll((""ooppeenn""))
        and pplloott__ccnnttll((""cclloossee"")) instead of pplloott__ccnnttll((""ooppeennppll"")) and
        pplloott__ccnnttll((""cclloosseeppll"")).  Also, the arguments to pplloott__ccnnttll(()) that specify
        the graphics terminal type have been eliminated.  Instead, a new global
        variable named GGTTEERRMM, which can take its value from the environment or
        be assigned to, is used to specify the graphics device type.

     5. The macros named UU and PP introduced in the last release are now named UUNN
        and UUPP.  The name UU is now reserved for the array of orientation matrix
        parameters used with a number of geometry configurations.

USER INTERFACE

     The internal data-handling portion of ssppeecc has been entirely rewritten,
     adding greatly to the types of data manipulation that can be done within
     ssppeecc.  The ddaattaa help file explains the new functions.  In brief, the
     internally stored data points are divided into independent groups.  Each
     data point can have several numbers associated with it, such as HH, KK, LL and
     counts from the detector.  In addition a number of functions are provided
     that allow math operations on all the data points in a group or among
     groups, and the reading of values into a group from a file.

     Data points are now saved in the state files.  Thus, when scans are
     continued after exiting and restarting ssppeecc, the entire data set can still
     be plotted and saved.

     The ggeetthheellpp(()) function, used by the hheellpp macros, now responds to single
     character commands to page forward and back or quit, instead of waiting for
     a newline to be typed.

     When built-in functions are used with the wrong number of arguments, an
     error message is now printed that indicates what the correct usage is.

     A new built-in macro named cclleeaannuupp11 will be called on errors or user
     aborts, if it has been defined.  This new macro will be called after the
     cclleeaannuupp macro if they are both defined.

     The high resolution graphics programs for SunTools and X Windows have been
     improved.  In particular, the X Window filter does a better in loading the
     correct font.  The filter for SunTools has been entirely rewritten.

     High resolution screen plots can now show error bars.  Error bars are
     calculated as the square root of the yy-data values.  Use the sseettpplloott macro
     or call the function pplloott__ccnnttll((""eebbaarrss"")) to turn error-bar drawing mode on.

     The colors on high resolution plots on color display devices are now
     assigned using the pplloott__ccnnttll(()) function.  Also, use of colors can be turned
     on or off with the pplloott__ccnnttll(()) function.  See the ffuunnccss help file for
     details.

     Pseudomotors and pseudocounters can now be configured by selecting the
     controller named NNOONNEE.  Pseudomotors may be linked to the motions of other
     motors in the geometry code (see how the aallff motor is used in ggeeoo__ww2211hh..cc
     for an example.)  Otherwise choosing NNOONNEE as the controller type lets you
     execute counting and moving commands without being in simulate mode.

     A software timer is now available.  Use it by selecting the SFTWARE
     controller in the configuration file.  This timer uses the system clock to
     gate the scalers, MCAs, etc.

     The high-resolution graphics on AT&T System V/386 systems can be displayed
     on a different virtual terminal then you use for the text.  Set GGTTEERRMM to
     something like vvggaa__vvtt0077 to use //ddeevv//vvtt0077 as the virtual terminal for
     graphics.  You shouldn't be using the selected virtual terminal for a login
     session.  You will have to use the terminal hhoott keys to switch back to the
     text screen in order to type commands to ssppeecc.

     ssppeecc now checks for write errors after most output is sent to the various
     files and devices.  In the event of a write error, ssppeecc resets to command
     level.

MACROS

     A new ggeettssccaann macro lets you read in scan data from an existing data file.
     With no arguments, you will be prompted for the name of the ssppeecc data file,
     the scan number, and columns for xx and yy.  You can also provide all four
     values as arguments.  Once the data file name and column numbers have been
     entered, you can subsequently call the macro with just the scan number as a
     single argument.

     A new __ssccaann__ttiimmee macro prints the estimated counting time for a scan.  The
     macro is called as part of the default ssccaann__hheeaadd macro.  The reintroduced
     MMOONN__RRAATTEE variable is used in the estimate of the scan time if counting to
     monitor counts.  MMOONN__RRAATTEE is the average monitor counts per second and is
     automatically calculated in the ccoouunntt macro.  If the global settle-time
     variable __sslleeeepp is nonzero, that time for each point is also included in
     the estimate.

     The ssccaann__oonn macro that continues aborted scans can now also be invoked
     using the name rreessuummee.

     The tteerraammpp macro which ramps the temperature controller to a new value has
     been upgraded.  You can now specify an optional third argument, which is
     the desired controller step size.  A small step size will result in shorter
     intervals between each temperature step.  The macro won't let the step size
     get too small, though, as it insists on at least a 0.2 second interval
     (actually set by the global variable TTEERRAAMMPP__MMIINN) between changes, in order
     to give time to program a slow interface.

     The scan macros now assign a value to YY__LL which is used as the yy-axis label
     in the plots.  In most cases, the assignment is YY__LL == ccnntt__nnaammee((DDEETT)).

     The current scan number is now included on screen plots.

     Mesh scans can now do real-time screen plots.  The screen plots are erased
     at the beginning of each row (or is it column?) of the scan.

     The macros ppttss, pplloott__rreess, llpp__pplloott and sspplloott now all take one to three
     optional arguments.  The first argument specifies the data group to plot,
     the second argument specifies the element to use for the xx-axis and the
     third argument specifies the element to use for the yy-axis.

     A new macro named ccpplloott__pplloott creates a command file for the CC--PPLLOOTT program
     to plot the current data points.  The plot is sent to the filter given by
     the CCPP__FFIILLTTEERR global variable.  Optional arguments specify plot group and
     xx-axis and yy-axis elements, as described above.

     The analysis results printed at the top of the plots are now defined by the
     macros sspplloott__rreess11, sspplloott__rreess22 and rrpplloott__rreess.  These macros can be redefined
     to suit a particular experiment.

     The colors used by the sspplloott and rrpplloott macros for the various plot elements
     are contained in the global string variables sspplloott__ccooll and rrpplloott__ccooll, which
     can be modified to suit individual tastes.  See the description of
     pplloott__ccnnttll(()) in the ffuunnccss help file and the ccoolloorrss help file.

     The lp plots have been moved from macro code to built-in code.  If
     pplloott__ccnnttll((""llpp"")) is called before a call to ddaattaa__pplloott(()), the plot output
     will be all printable ASCII with no cursor positioning sequences and
     formatted for 132 column-wide output.

     Counters named ""uunnuusseedd"" will not be included in the output from the uucctt, cctt
     and sshhooww__ccnnttss macros or in the data files produced by the standard macros.

     New standard macros, ffoonn and ffooffff, are provided to turn on and off an
     arbitrary file.  The macros take an argument, which is the name of the
     file.

     To accommodate motor controllers that operate in polled mode, a new macro
     name mmoovvee__ppoollll has been placed after the mmoovvee__eemm statement in macros such
     as mmvv, mmvvrr, bbrr, etc.  By default mmoovvee__ppoollll is defined as a null macro.  For
     polled controllers, it should be defined as wwaaiittmmoovvee to have the backlash
     completed before the next prompt.

     The warning message in the distributed ffoouurrcc..ssrrcc macro file regarding use
     of the default X-ray wavelength of 1.54 Angstroms has been removed, as it
     confused certain synchrotron users who have monochromators.

FUNCTIONS

     A new form of the iinnppuutt(()) function lets you check to see if something has
     been typed at the keyboard without getting stuck waiting for something to
     be typed.  If invoked as iinnppuutt((00)), the function will return a null string
     if nothing has been typed.  Otherwise it returns a string consisting of the
     first character of what was typed.

     The syntax of cchhgg__ddiiaall(()) has been expanded to accommodate motor controllers
     that use home (or origin) switches.  The second argument may be one of the
     strings ""hhoommee"", ""hhoommee++"", ""hhoommee--"", ""lliimm++"" or ""lliimm--"".  With one of the above
     arguments, the motor indicated by the first argument will move until it
     hits the home switch or the clockwise or counter-clockwise limit switch.
     At present, most motor controllers do not implement the home or limit
     search feature.  See the new hhoommee and zzeerroo macros for a sample
     implementation.

     A new function, ffpprriinnttff(()), has been added.  This function works as
     pprriinnttff(()), but takes an initial string argument that is the name of a file
     or device.  The text is printed only on the named file or device (and lloogg
     files), unlike pprriinnttff(()), which prints to all turned on files and devices.

     A new function, ggppiibb__ccnnttll(()) has been added.  This function sends the GPIB
     messages GTL, LLO, DCL, SDC and GET to the addressed device.  See the ggppiibb
     or ffuunnccss help files for details.

     New functions, ppoorrtt__ggeett(()) and ppoorrtt__ppuutt(()), are available on PC (AT-type bus)
     computers to read and write bytes to IO ports.  Ports must be first
     selected in the ccoonnffiigg file.  Ports may be configured read/write or read
     only.

     A new function, sspplliitt(()), can be used to split a string into substrings and
     assign each substring to an array element.  See the ffuunnccss help file for
     usage.

GEOMETRY CODE

     The ffoouurrcc geometry code and macros have been generally fixed up.  The sign
     convention for AALLPPHHAA has been changed due to popular demand.  Negative
     two-theta values are now handled correctly when calculating the orientation
     matrix and reciprocal space positions.  The default orientation reflections
     have been changed to physically reasonable values.  ZZoonnee mode pphhii and cchhii
     angles are now treated as frozen angles and are saved in the state file,
     along with the two vectors that define the zone.  Cut points are now also
     saved in the state file.  The ffrreeeezzee macro now takes arguments to specify
     the value(s) of the current mode's frozen angle(s).  The two-theta and
     omega cut points have been eliminated (two theta values will always be
     between -180 and 180 degrees).  New sszz, sseettoorr00 and sseettoorr11 macros let you
     set the zone plane and the orientation reflections without moving motors.

     The portion of the four-circle geometry code in the source file ggeeoo__ffoouurrcc..cc
     that dealt with orientation matrix calculations has been relocated and the
     orientation matrix code can now be used by any geometry.  Also, a new macro
     file, uubb..mmaacc, now contains the orientation-matrix specific macros.

     Since the orientation-matrix code has been generalized to work with any
     geometry, the names used to refer to the primary and secondary reflection
     angles have been changed to gg__uu0000, gg__uu0011, etc., for the primary reflection,
     and gg__uu1100, gg__uu1111, etc., for the secondary reflection.  New (redundant)
     macro aliases, tttthh00, tthh00, cchhii00, pphhii00, tttthh11, tthh11, cchhii11 and pphhii11, have been
     created for the primary and secondary orientation reflections in the ffoouurrcc
     geometry.

     The ggppsseett macro is redefined to include a ccaallccGG call for geometries that
     use an orientation macro.  (The ccaallccGG call is necessary to have the
     orientation matrix recalculated.)

     A new sseeccttoorrss macro is available with the ffoouurrcc geometry.  The macro prints
     the motor positions that would be used for all the possible sectors for the
     (HHKKLL values given as arguments.

     A geometry-less version of ssppeecc can be installed by choosing the ssppeecc
     geometry target.

     A new sseettrrllaatt macro can be used to set the reciprocal lattice parameters.
     (The sseettllaatt macro sets lattice parameters in direct space.)  New macros
     ccaallccDD and ccaallccRR calculate direct-space lattice parameters from
     reciprocal-space lattice parameters and vice-versa.

     New geometry code for configurations called ww2211hh and ww2211vv have been added.
     The code is for a diffractometer used at LURE W21.

     New geometry code for a configuration called ffiivveecc has been added.  The
     code is for a diffractometer built by MIT and used at NSLS X-20.

     New geometry code for a configuration called ss22dd22 has been added.  The code
     is for a diffractometer built by AT&T Bell Labs and used at NSLS X-16 and
     X-25.

     The MIT surface diffractometer geometry code and macros have been revised
     to reflect the current diffractometer configuration.

     The ssuurrff geometry code has been expanded to include a liquid surface
     diffractometer used at the BNL HFBR.

HARDWARE

     On AIX systems, ssppeecc enforces a lock on the GPIB device, such that only one
     process can open it at a time.  (On all systems that use a National
     Instruments GPIB board, only one process should be using the GPIB device at
     a time.)

     The ACS Steppak MCU code has been revised to better handle certain read
     errors.  Also, a motor controller keyword MMCCUU__EE is available in the ccoonnffiigg
     file to indicate that encoders are being used on a motor.  If so indicated,
     when there are position discrepancies between ssppeecc and the controller that
     are below a threshold amount, the controller's position is automatically
     taken as correct.  In addition, the home and limit search capabilities now
     available with cchhgg__ddiiaall(()) have been implemented.

     The code for the Ortec 9XX counter/timer code has been changed to better
     detect if the ""ddwweellll"" switch is set incorrectly.

     The Ortec 997 single channel counter is now recognized.

     Support for the Oxford Tennelec/Nucleus PCAII MCA PC board is now included.
     The board supports multichannel scaling and pulse height analysis modes.
     The macros to use the board are still in an early stage of development.

     Support for the Compumotor 3000 motor controller on serial and GPIB
     interfaces has been added.  (There are problems, though, when using this
     motor controller with the National Instruments GPIB driver on IBM PS/2 AIX
     1.2 due to bugs in the GPIB driver and the Compumotor controller.)

     Support for the Compumotor 4000 motor controller on serial and GPIB
     interfaces has been added.

     Support for the Microcontrole SIX19 motor controller on a serial interface
     has been added.

     Support for the INEL XRGCI motor controller and timer-counter device has
     been added.

     Support for the Kinetic Systems 2926 IBM PC Interface with 3922 Parallel
     Bus Crate Controller has been added.  The source to the driver is in the
     file ddrriivveerrss//kksscc..cc.  The script to install the driver is iinnssttaallll__kksscc.

     Support for the Kinetic Systems 3929 SCSI Crate Controller is now supported
     on Sun Sbus systems.  The instructions for installing the driver are in
     ddrriivveerrss//kksscc..RREEAADDMMEE.

     Support for the National Instruments GPIB11-2 for the Q-bus is now
     supported on BSD 4.3 and Ultrix systems.

     Support for the National Instruments GPIB-SPARC1-B for Sun computers is now
     supported.

     Code for the Scientific Solutions GPIB board now supports the ggppiibb__ppoollll(())
     and the new ggppiibb__ccnnttll(()) function.

     The code for the LeCroy 2301 MCA has been rewritten to use the new
     mmccaa__ppaarr(()) and mmccaa__ggeett(()) functions.  See the llcc22330011 help file for details.

     The Nicomp TC-100 autocorrelator is now supported.  Access to it is through
     the mmccaa__ppaarr(()) and mmccaa__ggeett(()) functions.  See the nniiccoommpp help file for
     details.

     The Klinger MC-4 motor controller output pins used for gating an external
     counter and checking for completed moves have been changed from pins 1, 2
     and 3 to pins 6, 7 and 8 to avoid conflict with the controller's plug-in
     remote control device.

UTILITIES

     The number-of-columns directive in ssccaannss..44 (##NN) can now take an optional
     second argument which is the number of data points per line.  The number of
     numbers per line of data is the product of the two arguments.  For example,
     ##NN 11 1166 would indicate there are 16 data points per line, while ##NN 44 44
     would indicate there are four data points per line, with each data point
     having four numbers associated with it.  In both examples, there would be
     16 numbers printed on each line.  The purpose of this new feature is to
     allow representation of MCA data in a visually compact form.  (There is no
     saving in file space, as both a space character and a newline character
     consume one byte.)

ADMINISTRATION

     The eeddccoonnff program (invoked by the ccoonnffiigg macro) has had the devices screen
     split into two screens, one for devices (motors, scalers and MCAs) and one
     for interfaces (CAMAC, GPIB, serial and I/O ports).

     The number of motor controllers and scaler devices allowed has been
     increased.

     Serial devices used with sseerr__ggeett(()) and sseerr__ppuutt(()) can now have rraaww or ccooookkeedd
     line characteristics selected using eeddccoonnff.  In ccooookkeedd mode, you can also
     add nnooffllooww, iiggnnccrr, eevveennpp or ooddddpp modes.

     The ""uusseerr ccaann mmoovvee mmoottoorr"" and ""uusseerr ccaann cchhaannggee lliimmiittss"" fields displayed by
     the eeddccoonnff program have been combined into just one field.  Also the number
     of wizard protection levels has been increased from one to three.
     Parameters that are protected are now indicated on the motor screen with
     square brackets.

     A facility for sharing a single copy of the ccoonnffiigg and sseettttiinnggss files among
     several spectrometers that have some motors in common is now available.
     See the ccoonnffiigg__aaddmm help file for more information.

     New commands to insert ii or delete dd motors using eeddccoonnff are available.

     When installing ssppeecc for the first time, a default ccoonnffiigg file is created
     that contains names and mnemonics for all the required geometry motors.

     A new administrative utility called ttiiddyy__ssppeecc is provided to clean out old
     user state files from the ssppeecc auxiliary file directory.  Invoked without
     arguments, the utility prints the disk usage by user, terminal, geometry
     and age.  Arguments are available to remove files by user, terminal,
     geometry or age.  Type ttiiddyy__ssppeecc -- to see usage.  When installed by the
     IInnssttaallll script, the file modes of the program restrict its use to owner and
     group.  The IInnssttaallll script also patches the ttiiddyy__ssppeecc executable to make
     the configured auxiliary file directory the default.

     The ssppeecc..mmssggss messages file, used in earlier versions to help cope with the
     limited program size available on the 286 and PDP 11/73 platforms, has been
     done away with.  All currently supported platforms can easily accommodate
     the extra 30 kilobytes or so of data space that are thus needed by the
     program.

MISCELLANEOUS

     ssppeecc is now available for the IBM RS/6000 running the AIX operating system.
     CAMAC support is currently only through a Kinetic Systems 3988
     GPIB-to-CAMAC crate controller.

     New startup options, --pp and --qq, have been added to make ssppeecc work as the
     tail end of a windowing front-end program.  The --pp option says that input
     from ssppeecc is from a pipe.  The --qq option can only be used with --pp and says
     that ssppeecc should operate quietly and not write messages to the ""ttttyy"" device
     unless it is explicitly turned on.

     Internal signal handling (signals are associated with typing ^^CC, with
     internal timers and with certain hardware controllers) code has been
     rewritten (again) to make ssppeecc more robust.

     A number of internal limits have been increased, including the maximum
     number of bytes of macros, the size of the internal memory arena and the
     length of strings that can be printed.

BUG FIXES

     The sshhoowwssccaannss program is now automatically patched when it is installed to
     reflect the correct auxiliary file directory.  Previously, the path name
     //uussrr//lliibb//ssppeecc..dd was built in.

     A bug in the ssccaannss..44 CC--PPLLOOTT user function that calculated error bars
     incorrectly when the ##II second normalization was being used has been fixed.

     A bug in the motor moving code where, when in simulate mode, simulated
     motor positions would change when they weren't supposed to has been fixed.

     A bug in the powder-mode macros where powder mode would not work properly
     if the powder-mode motor was not one of the motors involved in the geometry
     calculations has been fixed.

     A bug in the CAMAC TS201 counter/timer code where the variable that kept
     track of detector overflows never got cleared has been fixed.

     Another bug in the CAMAC TS201 counter/timer code where, when counting to
     certain values of monitor counts, the count time was off by a factor of two
     or so from what it should be, has been fixed.

     A bug in the Oregon Micro Systems PCX code where backlash was done on the
     wrong motor for certain multi-motor moves has been fixed.  Also, several
     modifications were made to make the code more robust.

     A bug in the code for the Ortec 9XX counter/timers where the program would
     get stuck printing an error message under certain conditions has been
     fixed.

     A bug in the code for the LeCroy 2301 MCA, where channel counts greater
     than 32,768 were saved as negative numbers, has been fixed.

     Bugs in the code for the Scientific Solutions GPIB board that prevented it
     from working on 386 machines have been fixed.

changes                      ssppeecc 2.14 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 2.14

DESCRIPTION

     These notes summarize many of the modifications made for ssppeecc release 2.14,
     as of January 8, 1991.

INCOMPATIBILITIES

     Release 2.14 includes a number of changes that make certain prior usages
     obsolete.  You must modify any home-grown macros to take into account the
     following changes:

     1. The customized scan output hooks involving the macros PPllaabbeell, PPoouutt,
        FFllaabbeell and FFoouutt have had the position of the space character changed
        from before each string in the label to after each string.  You must
        edit your macros if you assign values to any of the above or if you have
        written new scans based on the standard scan macros.

     2. The argument of the wwaaiitt(()) function, as programmed, did not match the
        documentation.  The documentation stated that bit 1 represented motor
        status and bit 2 represented counter status.  As programmed, these bit
        assignments were reversed.  The program has been changed to match the
        documentation.  You must edit your macros if you call the function
        wwaaiitt(()) directly.

     3. The ccoonnffiigg file now contains information describing each scaler's label,
        mnemonic, function and hardware type.  The scaler-name array SS__NNAA[[]] no
        longer exists.  New string functions, ccnntt__nnaammee((ii)) and ccnntt__mmnnee((ii)), return
        the name and mnemonic of scaler ii.  You must edit your macros if you
        make any reference to the symbol SS__NNAA[[]].

     4. The value returned by the ggeettccoouunnttss command in SS[[sseecc]] is now in seconds,
        rather than milliseconds.  You must edit your macros if you divide SS[[00]]
        by 1000 anywhere.

     5. The yyeessnnoo macro has been replaced by a yyeessnnoo(()) function.  You must edit
        your macros if you invoke yyeessnnoo anywhere.

USER INTERFACE

     The hhiissttoorryy command now takes a numerical argument that limits the number
     of the previous commands displayed.  In addition, if the the argument is
     negative, the recalled commands are displayed in reverse order.  The number
     of input lines saved for history recall has been increased from 50 to 100.

     High resolution scan plots are how available with VGA, EGA and Hercules
     graphics adapters on System V/386 and VENIX 286 platforms; with the X
     Window System Version 11 on PS/2 AIX, Ultrix and SunOS; and with SunView on
     SunOS.  You should set a GGTTEERRMM environment variable to vvggaa, eeggaa, ccggaa, hheerrcc,
     xx1111 or ssuunn before invoking ssppeecc to select the appropriate graphics
     parameters.  The sseettpplloott macro lets you select whether or not to use high
     resolution plotting and if so, how to depict the data (lines, points,
     dots).

     Text-mode plotting has been moved from macros to built-in C code.  The
     plots are drawn much faster and are now available with any terminal
     described by the system terminal database.  The names of the macros used to
     do the screen plots and the real time plots (sspplloott and rrpplloott) have not
     changed, although terminal dependent macros such as aannssii__rrpplloott and
     vvtt5522__pplloott have been eliminated.

     The built-in symbols RROOWWSS and CCOOLLSS contain the screen size used for drawing
     the plots (and displaying help files).  These are initially taken from the
     environment variables LLIINNEESS and CCOOLLUUMMNNSS, or if unset, from the system
     terminal database entry described by your TTEERRMM environment variable.  You
     may reassign values to the variables if you change your screen size (for
     example on an workstation using windows).

     ssppeecc now prevents multiple instances of the program being run using the
     same state files.

     When ssppeecc is run from pseudo ttys (for example, on an X Windows workstation
     or over the network), the state file is associated with the name ttttyypp##,
     rather than the actual name of the pseudo tty.

     You can now create a state not associated with any tty, by starting ssppeecc
     with the --TT _n_a_m_e command line option.

     A new variable, CCWWDD, keeps track of the current working directory of the
     running program.  The ppwwdd macro has been changed accordingly to simply
     print the value of CCWWDD, rather than spawn a subshell to execute the
     command.

     The help utility has been entirely rewritten.  Help files are formatted on
     the fly to fit the size of the screen or workstation window.  In addition,
     standout mode is used to highlight text that would be printed in an
     alternate font.

     The number of nested command files allowed has been increased from five to
     eight.

MACROS

     If a macro named bbeeggiinn__mmaacc is defined, it will be run after the startup
     command files are read but before input is read from the keyboard.

     The motor scans aassccaann, aa22ssccaann and aa33ssccaann have been been rewritten in terms
     of a general macro called __aassccaann that scans an arbitrary number of motors.
     An aa44ssccaann that calls __aassccaann is now also provided, as is a dd44ssccaann.  These
     scans introduce a number of new global variables (__nnmm, __mm[[]], __ff[[]], __ss[[]],
     __dd[[]]) that you should avoid using in your own macros.

     A new standard macro called cchhkk__bbeeaamm has been inserted into the macros that
     do normal, updated and powder-mode counting during scans.  In general,
     these macros are now written along the lines of:

        ffoorr ((;;;;)) {{
            ccoouunntt__ffuunncc((ccoouunntt__ttiimmee))
            wwaaiittccoouunntt
            ggeettccoouunnttss
            cchhkk__bbeeaamm
        }}

     where ccoouunntt__ffuunncc(()) is ttccoouunntt(()), mmccoouunntt(()), etc.  By default, cchhkk__bbeeaamm is
     defined as bbrreeaakk, meaning the infinite loop is immediately exited after
     counting.  However, you can define cchhkk__bbeeaamm to not break out of the loop
     unless the monitor counts, for example, are above some threshold.  Such a
     feature can be useful at a synchrotron where beam dumps or fills that occur
     during unattended data taking could result in many useless scans.  See the
     ccoouunntt..mmaacc macro source file for an example of a complete cchhkk__bbeeaamm macro.

     A new option to the sseettssccaannss macro asks you to enter a value for a sleep
     (or settle) time to delay before counting at each point in a scan.  The
     value is stored in the global variable __sslleeeepp (which you can also change
     simply by assigning it a value).  The scans all execute a sslleeeepp((__sslleeeepp))
     call before counting.  Set __sslleeeepp to zero for no delay.

     The macro that continues aborted scans, ssccaann__oonn, now accepts an argument to
     adjust the current point number in the scan (except for mesh scans).  For
     example, ssccaann__oonn --11 redoes the previous point, while ssccaann__oonn 33 skips the
     next three points.  Giving a very large number will force the end-of-scan
     plots, etc., without taking any more data points.

     A new set of macros lets you define a set of scans do be done together.
     The scans must all be of the same type and must be in terms of a single
     scan variable.  You may however define regions, point densities and count
     times differently for each scan.  The sseettrreegg macro (for sseett rreeggiioonnss) asks
     you to configure each scan.  The ddoorreegg macro executes the group of scans.
     A number of global variables beginning with the characters __rreegg__ have been
     introduced to keep track of the region scan configuration.

     The cctt macro, if aborted with a ^^CC, will now execute a cclleeaannuupp macro that
     reads the scalers and shows the counts that were accumulated before the ^^CC.

     The names ddeett and mmoonn are no longer built into the macros, since scaler
     mnemonics may now be set to arbitrary values in the ccoonnffiigg file.

     The sshhooww__ccnnttss and uucctt macros have been rewritten to show the accumulated
     counts in all the configured scalers.

     The __hheeaadd and __lloooopp macros have been modified to include counts from all
     configured scaler channels in the data file.  Previously, only the detector
     and either monitor or seconds scaler contents were saved for each point.

     The MMOONN__RRAATTEE global variable has been eliminated from the standard macros
     due to lack of interest.

     Many of the standard macros involving motor positions have had hooks
     inserted to support a feature involving customizable position uunniittss.  This
     feature is not currently available to most users of ssppeecc, and the changes
     will not affect the functionality of any of the macros.  However, the names
     __uunniittss, __sseettffmmttss, __ssuuffffiixx, PP, UU, UULL, UUNNIITTSS, PPFFMMTT and VVFFMMTT are used by this
     feature and are henceforth reserved for use by the standard macros.

FUNCTIONS

     The function mmoottoorr__ppaarr(()) can now return several parameters from the ccoonnffiigg
     file.  Also, the motor velocity and the number of steps to use for backlash
     can be set from user level.  See the mmoottoorrss help file for details.

     A new function, ccaa__ffnnaa(()), allows arbitrary CAMAC access.  See the ffuunnccss
     help file for details.  At present, it is up to the user to avoid
     addressing slots that are being used for motor control or counting.

     A new function ggppiibb__ppoollll(()), returns the serial poll status of a device on
     the GPIB bus.  This function is currently only available with National
     Instruments GPIB controllers.  See the ggppiibb help file for details.

     New functions, ccnntt__nnaammee((ii)) and ccnntt__mmnnee((ii)), return the name and mnemonic of
     scalers as set in the ccoonnffiigg file.

     A new function, pplloott__ccnnttll((mmooddee)), is used to control the built-in plotting
     features.  The argument mmooddee is a string of comma- or space-delimited
     options.  See the ffuunnccss help file for details.

     A new function ttttyy__ccnnttll((mmooddee)) is used to send terminal-specific special
     sequences to the screen.  The argument mmooddee is a string.  Recognized
     strings are ""ccee"" (clear to end of line), ""ccll"" (clear screen and home
     cursor), ""ccdd"" (clear to end of display), ""ssoo"" (begin standout mode), ""ssee""
     (end standout mode) and ""hhoo"" (home cursor).

     A new function ttttyy__mmoovvee((xx,, yy [[,, ss]])) positions the cursor at column xx and
     row yy of the screen, and prints the optional string ss at that position.
     The upper-left corner of the screen is column 0 and row 0.  If xx or yy are
     negative, the position is taken from the left or bottom of the screen.
     Output written by this function goes only to the ttttyy device, regardless of
     what devices have been turned on with the oonn(()) function.

     A new function pplloott__mmoovvee((xx,, yy[[,, ss]])) works just as ttttyy__mmoovvee(()), above, when
     high-resolution graphics mode is off.  When high-resolution graphics mode
     is on, pplloott__mmoovvee(()) draws to the graphics screen.

     A new function pplloott__rraannggee((xxmmiinn,, xxmmaaxx,, yymmiinn,, yymmaaxx)) sets the ranges of the
     internally generated plots.  If any of the arguments is the string ""aauuttoo""
     the value is determined by the appropriate value from the current points.

     A new function pplloott__ppttss((xxccooll,, ssttaarrtt,, nnppttss)) plots the current data from the
     built-in plot array either on the screen if graphics mode is off, or on the
     high-resolution graphics screen or window if graphics mode is on.  The plot
     starts with point number ssttaarrtt and uses nnppttss points.  The xxccooll parameter
     will be used in the future, when the number of values stored for each point
     is increased, to designate which value to use for xx..

     A new function yyeessnnoo(([[ ss,, ]] xx)) prompts the user with the optional string ss,
     for a yes or no response.  The function returns 1 if the user answers with
     a string beginning with YY, yy or 11.  The function returns -1 if the user
     answers with a string beginning with something else.  The value of xx is
     returned if the user simply enters a return.  Usage might be,

         ffllaagg == yyeessnnoo((""SShhooww uuppddaatteedd mmoovviinngg"",, ffllaagg))

     which produces (if ffllaagg is nonzero),

         SShhooww uuppddaatteedd mmoovviinngg ((YYEESS))??

GEOMETRY CODE

     The geometry code and macros for the various ssuurrff diffractometer
     configurations, as used at NSLS X20 and X22, CEA in France and at Exxon
     have been rearranged to ease maintenance and installation of each version.

     The NSLS X20 monochromator macros and geometry code have been isolated from
     the four-circle code, so that references to the monochromator will only be
     made if the monochromator option is selected at installation time.

     The four-circle code now allows sector 1 to be used in modes 4, 5 and 6.

     The four-circle code now prints an error message when a user tries to
     calculate reciprocal lattice positions with both cchhii and pphhii at zero in
     zzoonnee mode, as the current method of doing the calculations cannot handle
     that case.

     The three-circle mode with pphhii=0 has been generalized to a pphhii-fixed mode.
     Also, the frozen modes now include pphhii fixed.

     A new scan macro, aazziissccaann, is available in four-circle mode to scan the
     azimuthal angle in aazziimmuutthhaall mode.

     Bugs in the zzaaxxiiss geometry code calculations have been fixed.

HARDWARE

     The internal code implementing hardware support in ssppeecc has been
     substantially revised to simplify adding support for new types of hardware.
     The revisions for the most part should be transparent to the user.  If a
     particular hardware device fails to perform as it did in previous versions,
     notify CSS at once, (unless the difference is an improvement).

     Support for the Kinetic Systems 3912 CAMAC crate controller is now provided
     on DEC Q-Bus based systems.

     Support for the Kinetic Systems 3988 GPIB CAMAC crate controller is now
     included.  This module can only be used if a National Instruments GPIB
     controller is also installed.  The board can be used in either
     interrupt-driven or polled mode.  Interrupt driven mode is preferred, but
     if interrupts are lost in the GPIB driver, polled mode can be selected.

     Support for the Ortec 974/994/995 counters and counter/timers is now
     provided over both GPIB and RS-232C interfaces.

     Support for the Klinger MC4 motor controller is now provided over both GPIB
     and RS-232C interfaces.

     Support for the Advanced Control Systems MCU-2 motor controller is now
     provided over an RS-232C interface.

     Persistent timing problems with the Kinetic Systems 3388 GPIB CAMAC module
     seem to be fixed now.

     ssppeecc now recognizes the Joerger SMC 2601 otor controller, which allows for
     programmable velocity and acceleration.

     The code for the TS201 CAMAC timer/counter model now uses timer 2 to gate
     counter 2, making it no longer necessary to use an external cable to gate
     counter 2.

     The ""nneeww aanndd iimmpprroovveedd"" E500 modules that use the F(10) A(0) command to
     clear the module LAM are now supported.

     The E500 LAM service routine has been modified to use fewer FNA commands
     and to recheck for additional LAMs from the E500 before returning.  The
     latter change improves performance when several motors in the same E500
     complete their motions at nearly the same time.

     The code that reads the LeCroy 2301 MCA unit has been changed to read the
     device faster.  (On a 25 MHz 386 using the DSP 6001, the change is from
     0.36 seconds previously to 0.16 seconds now for reading 1024 channels.)

     Many options for use of the National Instruments GPIB controllers formerly
     set by each site using the iibbccoonnff program are now set by ssppeecc at run time.
     Specifically, ssppeecc sets the timeout period to 3 seconds, the EOS byte to a
     newline (''\\nn''), reads to be terminated on EOS using an eight-bit compare,
     REN to be asserted and the board to be the system controller.  The board's
     primary address is set to 0 and the signal to be sent on service request
     (if using the board with a GPIB-to-CAMAC controller) is set appropriately.
     You may still use iibbccoonnff to set whether EOI will be asserted with EOS
     and/or with the last byte of a write.

     The length of a string that can be read using ggppiibb__ggeett(()) has been increased
     from 64 to 255 bytes.

     The GPIB functions ggppiibb__ggeett(()) and ggppiibb__ppuutt(()) no longer generate an
     iinntteerrffaaccee cclleeaarr (IFC) message on the bus, unless a previous transaction had
     resulted in an error.  The old code that sent an IFC before each
     transaction not only slowed down I/O, but also caused some devices to time
     out.  In addition, a brief delay is inserted after an IFC is sent to
     accommodate slow devices.  (These devices did not follow GPIB standards and
     used the IFC message to reset internal functions rather than just interface
     functions.  The device were often not yet ready to respond to the next
     interface message after the IFC period was over.)

     If the National Instruments GPIB code has errors on two transactions in a
     row, the GPIB device is reset by closing and reopening the //ddeevv//ggppiibb00 (or
     whatever is configured) special file.  If this feature causes more problems
     then it solves, inform CSS immediately so we may begin work on
     alternatives.

     Use of the sseerr__ggeett(()) function to read RS-232C devices has been changed to
     increase its flexibility.  See the sseerriiaall help file for details.

     ssppeecc used to silently enforce a rule that only one GPIB controller, MCA or
     timer was allowed at a time.  A message is now printed if the ccoonnffiigg file
     requests more than one GPIB controller, CAMAC controller, timer or MCA.
     The first device of each type encountered in the ccoonnffiigg file is the one
     that will be used.

     Now that scaler numbers are assigned in the ccoonnffiigg file, it is possible to
     configure more than one type of scaler device at a time.  Each scaler
     should use hardware gating from the master timer.  Software gating does
     take place, although there can be substantial latency between receipt of
     the time-complete signal from the master timer and disabling of the
     scalers.  Note also that for a number of combined timer/counter units, the
     scaler assignment for the seconds and monitor channel are hard coded into
     ssppeecc.

     For versions of ssppeecc on most platforms, memory is allocated for the maximum
     number of motors (and scalers) at program startup, so that it is no longer
     necessary to restart the program to increase the number of motors (or
     scalers) after editing the ccoonnffiigg file.

UTILITIES

     A stand-alone version of the CC--PPLLOOTT ssccaannss..44 user function, called ssccaannss, is
     now provided for extracting a data set from a ssppeecc data file.  See the
     RREEAADDMMEE file in the aauuxx subdirectory of the distribution.

ADMINISTRATION

     Version 2.14 has a new installation procedure, that is based on the new
     IInnssttaallll script in the distribution directory.  A RREEAADDMMEE file explains the
     use of the script.

     The CAMAC drivers on all systems should be replaced with the new versions
     in the ddrriivveerrss subdirectory of the distribution.  Versions of ssppeecc prior to
     version 2.14 should work with the new drivers, but ssppeecc 2.14 will not work
     with old versions of the drivers.  Changes to the drivers are as follows:
     The new drivers can be configured at run time for the signal to send to the
     user process when a LAM is generated.  The Q and X response of each dataway
     transaction is now communicated by the driver to the user process in a way
     that does not depend on which CAMAC controller is installed.

     The ccaammaacc..hh include file has been revised to accommodate CAMAC drivers on
     BSD 4.3 and ULTRIX operating systems and to include added functionality.
     The copy of ccaammaacc..hh in the directory //uussrr//iinncclluuddee will be updated
     automatically if you install the new CAMAC driver.

     On System V/386 systems, a new nnaapp driver is included that performs
     fractional second sleeps.  Run the shell script iinnssttaallll__nnaapp in the ddrriivveerrss
     subdirectory as super user to perform the installation.

     The GPIB driver for the National Instruments PCII board for the VENIX 286
     system must be replaced with the new version of the driver in this release.
     Run the script iinnssttaallll__ggppiibb in the ddrriivveerrss subdirectory as super user to
     perform the installation.

     Another command file can be automatically read on startup.  This file is
     named ssiittee..mmaacc and resides in the auxiliary file directory (SSPPEECC) as, for
     example, //uussrr//lliibb//ssppeecc..dd//ssiittee..mmaacc.  If this file exists, it will be read
     every time a user starts the program, not just when starting fresh.  The
     ssiittee..mmaacc file is also read when the nneewwmmaacc macro is run.

     More work has been done on the eeddccoonnff program.  In particular, if you exit
     before saving any changes, you will be asked to confirm whether you really
     want to quit.  Also, there is now a fourth screen used to configure scaler
     assignments.  The number of configurable scalers on the devices screen has
     been increased to three.  The CAMAC slot assignments in the ccoonnffiigg file now
     begin with CCAA__ rather than CC__, as in the old versions.  The old format is
     still recognized on reading, but the new form will be written out.  Arrow
     key sequences are now read from the terminal capability data base, and so
     eeddccoonnff can be used with arrow keys on non-vt100-compatible terminals.  In
     addition the vvii hhjjkkll motion keys are now recognized.

     The hardware support in ssppeecc has been completely modularized.  The uu__hhddww..cc
     file contains a simplified hook mechanism to select the installed hardware.
     All other references to a particular hardware device are now contained in a
     single source file, allowing sites to add support for new devices, without
     requiring access to the complete source code.  (At present the eeddccoonnff
     program cannot be changed at site to add new hardware types.)

     When ssppeecc starts out it executes a call to nniiccee((--2200)).  This call raises the
     priority of the process, but only when being run by root or if the process
     is owned by root and has set-user-id execute mode set.  After raising the
     priority, ssppeecc resets the effective user and group ids to that of the real
     user, so there is no danger of the user spawning subshells or creating
     files as root.  If ssppeecc is not set-user-id root, it will behave as before.

     If the sseettttiinnggss file can't be opened for writing when ssppeecc starts up, or if
     there are read or write errors accessing that file, ssppeecc switches to
     simulate mode and suggests the user get assistance.

MISCELLANEOUS

     ssppeecc is now available for the IBM PS/2 running the AIX 1.2 operating
     system.  CAMAC support is currently only through a Kinetic Systems 3988
     GPIB-to-CAMAC crate controller.

     ssppeecc is now available for DEC MicroVax computers running ULTRIX or UCB
     operating systems.  CAMAC drivers are available for either the Kinetic
     Systems 3912 or DSP DCC-11 crate controllers.

     ssppeecc is now available for SCO Xenix 286 2.2.3 and SCO Xenix 2.3.2 operating
     systems.  (Use on a 286 platform is discouraged, though.)

     The motor number indirection array mmAA[[]] is now reinitialized when the
     ccoonnffiigg macro is invoked, using the __aassssiiggnn macro that is defined in each
     geometry's standard macro file.  Thus, if motor numbers are reassigned
     while editing the ccoonnffiigg file, the macros that list motors in specific
     order (wwaa, wwhh, ...)  will still list the motors in the same order after
     __aassssiiggnn is run.

     The pprriinntt command with no arguments will now print a newline.  In previous
     versions, such usage was reported as a syntax error.

     The number of command files that may be queued for reading has been
     increased from five to eight.

BUG FIXES

     A design flaw, introduced in version 2.11, and having to do with reads of
     the motor controller registers, has been corrected.  The problem was that
     ssppeecc could lose track of motor positions if the motor controller registers
     were changed using a remote control pod, or if they were cleared due to
     loss of power, while ssppeecc was running.  If any of the commands that read
     the controller registers (ggeettaanngglleess) or changed the sseettttiinnggss file
     (cchhgg__ddiiaall(()), cchhgg__ooffffsseett(())), were executed before executing a ssyynncc command,
     the motor positions would likely have gotten scrambled.

     A bug, whereby the results calculated using the background subtraction
     feature were incorrect, has been fixed.

     All motor mnemonics are now freed when executing the rreeccoonnffiigg command and
     then reestablished on rereading of the ccoonnffiigg file.  Previously, a motor
     mnemonic, not used in the geometry code, that was removed from the ccoonnffiigg
     file would remain as an immutable symbol until you ran ssppeecc with the --ff
     flag for a fresh start.

     A bug where motor control would hang when trying to start a motor on a
     Joerger SMC motor controller that had both limits open has been fixed.

     A bug with the TS201 timer/counter where LAMs would sometimes be lost
     during updated counting has been fixed.

     A bug with the TS201 timer/counter where readings of certain count times
     (30 seconds, for example) would indicate the wrong period (although the
     period over which the module counted was correct) has been fixed.

     A bug where values assigned to variables declared llooccaall within a statement
     block sometimes affected variables of the same name outside the statement
     block has been fixed.

     A potential bug where defining a macro recursively would cause a program
     crash has been fixed by limiting the amount of input push back to 64
     Kbytes.  (This limit is arbitrary and can be increased by CSS if found to
     be too low.)

     A bug where lloogg file names containing a slash were not treated as lloogg files
     has been fixed.

     An old bug, where reference to the string constant and then a number
     constant of the same value, particularly with a value of zero, would cause
     unexpected results, has been fixed.  In previous versions, the code:

        {{
          aa == ""00""
          bb == 00
          iiff ((bb)) pprriinntt ""TThhiiss sshhoouulldd nnoott hhaappppeenn""
        }}

     would result in the message being printed.

changes                      spec 2.13 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 2.13

DESCRIPTION

     These notes summarize the modifications made for ssppeecc release 2.13, as
     finalized on March 3, 1990.

USER INTERFACE

     The commands llssccmmdd, ssyymmss, llssddeeff and pprrddeeff now allow arguments containing
     the metacharacters ??  and **, which have the conventional meanings.  Thus,
     for example, typing llssddeeff **ssccaann will list all the macros whose names end
     with the characters ssccaann.

     Commands recalled using the history feature can now be modified using a
     subset of the standard ccsshh history-feature syntax.  Appending
     ::ss//lleefftt//rriigghhtt// to a history recalled item will modify the first occurrence
     of the string lleefftt in the recalled command to the characters rriigghhtt.  The
     delimiter of the left and right strings may be any character.  The final
     delimiter is optional.  If lleefftt is empty, the last entered left string is
     used as the pattern to match.  In addition, ^^lleefftt^^rriigghhtt^^ is short hand for
     !!--11::ss//lleefftt//rriigghhtt//.  In this case the circumflex (^^) must be used as the
     delimiter.

     The debugging messages printed with DDEEBBUUGG==11002244 have been revised to show
     more clearly the input text after macro expansion.

     The help files have been reformatted in the style of the standard UNIX
     manual pages, and many new help topics have been added.

MACROS

     The ssttaarrttuupp macro has been expanded to ask for values for most of the
     variables and mode settings a user normally might change.  Besides
     prompting for the title, printer device and data file, as before, the
     ssttaarrttuupp macro now also invokes the ssttaarrtttteemmpp, sseettssccaannss, sseettpplloott and
     ssttaarrttggeeoo macros.  It also prompts for values for the default count time
     (CCOOUUNNTT), the user's command file directory (DDOO__DDIIRR) and the frequency of
     screen updates during updated moving and counting (UUPPDDAATTEE).

     The ssttaarrttuupp and nneewwffiillee macros now test if the specified printer or data
     file can be opened, before assigning values to PPRRIINNTTEERR and DDAATTAAFFIILLEE.  Also,
     the ssttaarrttuupp macro insists the printer name must begin with the characters
     //ddeevv//.  One can still assign an arbitrary file or device to the printer,
     though, by assigning a value to PPRRIINNTTEERR.

     The macros have been revised to place the geometry-dependent parts in the
     specific geometry macro source files.  In particular, the standard scan
     macros no longer have four-circle motor names built in.

     Most of the macros now explicitly declare local variables as llooccaall to
     minimize name conflicts when macros are nested or new variable names are
     used.

     Most instances of ggeettaanngglleess in the standard macros are now preceded by a
     wwaaiittmmoovvee.  Previously, macros such as hhssccaann, kkssccaann, etc., would read the
     current angles, even if a motor was moving, when determining the starting
     reciprocal space coordinates of the scan.

     An updated-count macro uucctt has been added.  It continuously displays scaler
     contents during the counting interval.

     A new sseettssccaannss macro asks the user to configure scan options.  A new scan
     option allows a user to eliminate the possibly time-consuming prescan limit
     check performed for reciprocal space scans.  Another option causes the
     motor positioning and counting during scans to use updated moving and
     counting in the style of the uummvv and uucctt macros.  (On VENIX 286 systems
     with CAMAC, these updated moves appear to sometimes hang.  VENIX 286 users
     are advised to not rely on updated moves during unattended operation.)

     The sseettpplloott macro has been substantially revised to reflect a number of new
     plotting options available, including updated plots during scans, a
     logarithmic yy axis and pinning the minimum yy value at zero.  See the pplloott
     help file for details.

     The information displayed above the screen plots can now be modified by the
     user by redefining the macros rrpplloott__rreess and sspplloott__rreess.  The first of these
     prints out information during the real-time screen plotting, while the
     second is for the final screen plot.

     A mmvvdd macro moves a motor with the position argument specified in ddiiaall
     units.

     There has been a difference in opinion among ssppeecc users as to whether the
     ccaa macro should leave the calculated positions in HH, KK, LL and AA[[]], or
     whether these variables should be restored to the current diffractometer
     position after printing the results of the calculation.  To accommodate
     both classes of users, a new macro ccaall is provided that leaves the
     calculated positions in the appropriate variables.  The ccaa macro will
     restore the variables to the current spectrometer position.

     A new ssaavvccmmdd macro sends the output of any command to a file.  The first
     argument to ssaavvccmmdd is the command to save, the second argument is the file
     name.  Multiple commands or multi-word commands can be saved by enclosing
     them in quotes, as in ssaavvccmmdd ""wwmm tthh tttthh"" mmoottoorr__ffiillee.

     The ddeebbuugg macro now examines its argument or the prompted-for value for an
     initial ++ or --.  A ++ adds the specified level to the current debugging
     variable, while a -- removes the specified level.

FUNCTIONS

     The built-in commands ooppeenn, cclloossee, oonn and ooffff have been replaced by the
     functions ooppeenn(()), cclloossee(()), oonn(()) and ooffff(()).  Functions are more versatile
     than commands as their return values can be used in expressions.  Macros
     that open files can now look at the return value of the ooppeenn(()) function and
     take appropriate action if the file can't be opened, rather than be reset
     to command level.  See the ffiilleess help file for details of the new usage.
     All standard macros have been adapted to the new usage.

     The sslleeeepp(()) function now takes fractional-valued arguments to specify sleep
     periods of sub-second resolution.  Periods greater than five seconds are
     rounded to the nearest second.  The previous syntax that used negative
     integer arguments to specify sleeps in units of a sixtieth of a second will
     continue to be recognized for the time being.

     The ttccoouunntt(()) function now accepts nonintegral count times.

     A new function, mmoottoorr__ppaarr(()), returns configuration parameters for a
     particular motor.  Presently, only the step-size parameter is returned.
     See the mmoottoorrss help file for usage.

     A new function, ppll__dduummpp(()), efficiently prints all or a portion of the
     built-in plot array to output devices and files.  See the pplloott help file
     for details.

     The ppll__aannaall(()) function now returns the sum of the squares of the yy values
     when called with an argument of 12.  The macro ppll__SSUUMMSSQQ is defined to be
     this quantity.

     The ppll__aannaall(()) function can now do a simple linear-background subtraction
     before doing the standard analyses.  The linear background is calculated
     from the scan endpoints.  The new built-in variable BBGGPPTTSS can be set to the
     number of points from each end of the scan to average together before
     calculating the linear background.  The macros, ppll__bbggMMAAXX, ppll__bbggUUHHMMXX,
     ppll__bbggLLHHMMXX, ppll__bbggSSUUMM, ppll__bbggFFWWHHMM, ppll__bbggCCFFWWHHMM and ppll__bbggxxMMAAXX have been defined
     as appropriate calls of ppll__aannaall(()).  The sseettpplloott macro can be used to select
     the background subtraction mode.  See the pplloott help file for more
     information.  This is a trial feature, implemented in response to a
     specific user request and may be modified substantially in future releases.

GEOMETRY CODE

     The four-circle pphhii--zzeerroo geometry mode has been changed to a pphhii--ffiixxeedd
     mode.  To recover the previous operation, use the ffrreeeezzee macro to freeze
     the value of pphhii at zero.

     The macros for the four-circle lattice-parameter-refinement feature (or the
     fitting-the-orientation-matrix feature) have been renamed from bbeegg__rreefflleexx,
     aadddd__rreefflleexx and eenndd__rreefflleexx to rreefflleexx__bbeegg, rreefflleexx and rreefflleexx__eenndd.

     Support for a new geometry configuration, zzaaxxiiss (see J.M. Bloch, JJ.. AAppppll..
     CCrryysstt..  (1985) 1188, 33-36), is included.  The source code is in the file
     ggeeoo__zzaaxxiiss..cc.

     The code for the ssuurrff geometry configuration has been expanded to
     accommodate a similar spectrometer used at Saclay.

HARDWARE

     Support for the DSP TS-201 counter/timer CAMAC module is included.  Count
     intervals can only be specified to within 1.5 percent when counting to time
     and to a power of two when counting to monitor.  When counting to monitor,
     gating requires software intervention, causing an unavoidable latency in
     disabling the counter, resulting in variable count intervals.

     Code to support the LeCroy CAMAC Model 2301 interface for the QVT
     Multichannel Analyzer used with a wire linear detector is now included.
     The ggeettmmccaa(()) command is used to read the MCA.  See the ccoouunnttiinngg help file
     for more information.  The ttccoouunntt(()) and mmccoouunntt(()) functions will clear,
     start and stop the MCA using the configured timing generator.  The software
     gating will not interfere with hardware gating, if hardware gating is
     present.

     The code for the Joerger SMC CAMAC motor controller has been expanded to
     support Model SMC-LP, which has programmable velocity and acceleration
     registers.  The eeddccoonnff program now accepts these parameters for all SMC
     controllers, although the values entered are ignored for the other models.

     Timing problems with the Kinetic Systems 3388 GPIB CAMAC module on fast 386
     computers have been fixed.

     PC counting boards based on the Am9513 counter/timer chip, such as the
     MetraByte CTM-05 and the Scientific Solutions Lab Master, may now be used
     with ssppeecc.  Presently, the board is handled using user-level busy-wait
     loops.  In the future, an interrupt-driven driver will be provided.

     The Advanced Control Systems Step Pak RS-232C motor controllers are now
     supported.

     Timeout errors on the National Instrument GPIB interface no longer cause a
     return to command level.  On a timeout error, a ggppiibb__ggeett(()) will return an
     empty string, and a ggppiibb__ppuutt(()) will return zero.  Other errors, such as no
     GPIB listener, still reset to command level.

     Trailing newlines and carriage returns are now stripped from the strings
     returned by ggppiibb__ggeett(()) when using the National Instruments GPIB board.
     Code for the other supported GPIB hardware has always done this.

     The CAMAC driver for VENIX 286 can now be installed to support the modified
     DSP 6001/2 crate controllers by invoking the iinnssttaallll__ddsspp script with the --MM
     flag.

UTILITIES

     A new utility command to be run from the shell called sshhoowwssccaannss is
     included.  The sshhoowwssccaannss utility uses the CC--PPLLOOTT package and the sshhooww..aawwkk
     script (introduced in release 2.11) to produce summary plots of scans.
     When you install ssppeecc, sshhoowwssccaannss (and also ccoonntteennttss) are now also installed
     automatically.  A new file aauuxx//RREEAADDMMEE describes sshhoowwssccaannss and the other
     auxiliary files included with the ssppeecc package.

ADMINISTRATION

     The distribution no longer comes with a prelinked version of the ffoouurrcc
     executable.  When you install the software for the first time, several
     source files will be compiled and all the object modules linked to produce
     the target executable.

     The eeddccoonnff program has been revised to accommodate the increasing number of
     hardware devices that ssppeecc supports.  Most of these changes affect the
     format of the device screen.

     Changes in the way eeddccoonnff backs up the ccoonnffiigg and sseettttiinnggss files should
     lesson instances of accidental total loss of motor positions through user
     inattention.  The files are now backed up only once when running eeddccoonnff,
     and then only when you try to write out the files, not when starting up.

     There is also a new undocumented security feature offered by eeddccoonnff that
     implements an additional level of protection to prevent unauthorized users
     from changing the configuration of selected motors.  ssppeecc administrators
     who require this additional security should contact CSS for instructions.

     It is now possible to link versions of ssppeecc that contain only the hardware
     modules that will be used by a specific site.  You must edit MMaakkeeffiillee and
     uu__hhddww..cc in the the distribution directory and relink the appropriate
     binaries.  See the ssiittee__eegg target in MMaakkeeffiillee for an example.

MISCELLANEOUS

     A newly revised and indexed manual is included in this release of ssppeecc.

     When ssppeecc in invoked with the --ss flag, it is no longer possible to turn off
     simulate mode without restarting the program from the shell.  This
     eliminates ambiguities about whether or not the configured hardware devices
     are opened and properly initialized when simulate mode is turned off.

     When simulate mode is in effect, the rreeccoonnffiigg command will read the
     sseettttiinnggss file, but will not read the ccoonnffiigg file or change the hardware
     configuration.

     The names of the state files in the uusseerrffiilleess subdirectories have been
     changed to use more characters from the user's login and terminal name.

     When invoking ssppeecc from the shell the ttttyy part of the --tt _t_t_y option must
     now contain the complete name of the device, either as //ddeevv//ttttyy1122 or as
     ttttyy1122.

     The memory arena routines have been rewritten to accommodate an arena twice
     as large on the VENIX LMC version of ssppeecc.  Users can now include entire
     scans within single statement blocks without running out of memory.

     The distributed version of ssppeecc is now compiled for 40 motors.

BUG FIXES

     A bug that caused unintended motor movement under a particular scenario has
     been fixed.  If you had commanded a move involving several motors (with the
     bbrr macro, for example) and one of the motors was out of limits the move
     would be canceled.  However, the next time you moved a motor, the motors
     that were not out of limits in the previous move would move to the
     previously commanded positions under some conditions.  This rather serious
     bug has been fixed.

     A bug where the next command typed in after hitting a hard motor limit was
     ignored has been fixed.  Previously, any type ahead from the keyboard would
     be flushed after hitting a hard limit.  Type ahead is no longer flushed,
     although command files are still closed after hitting a limit.

     In previous versions, there were small intervals of time where keyboard
     interrupts (^^CC's) were ignored to prevent critical code from being
     disturbed.  Ignoring interrupts is poor programming, as it makes the
     program response unpredictable to the user.  In addition, on rare
     occasions, ssppeecc would enter a state where ^^CC's were ignored while motors
     were moving or counters were counting.  In this release, the critical code
     is protected in ways other than ignoring ^^CC's.  The method now used still
     has flaws due to fundamental limitations in the system calls being used.
     In the next release, the code will employ system calls available on systems
     other than VENIX for the 286 and PDP 11/73 to enable much more robust
     interrupt handling.  Users of VENIX will, unfortunately, not benefit from
     those changes.

     A bug in the grammar where expressions using the Boolean operators !!, &&&&
     and |||| reported syntax errors in a number of contexts has been fixed.

     A bug, whereby number values obtained from strings (returned by iinnppuutt(()),
     for example) were not scanned for octal or hexadecimal prefixes has been
     fixed.

     The implementation of the llooccaall command has been totally revised to fix
     numerous bugs, the most serious of which made a built-in variable disappear
     if it was declared llooccaall.

     Error messages are now printed if you use the gglloobbaall, uunngglloobbaall or ccoonnssttaanntt
     commands with built-in symbols.

     A bug, whereby the code that calculated the values returned by ppll__aannaall(())
     for the FWHM and the center of the FWHM did poorly for certain unusual sets
     of data points, has been fixed.

     A bug, where trying to print a very long string using pprriinntt, pprriinnttff or
     sspprriinnttff, would cause a core dump, has been fixed.

changes                      spec 2.12 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 2.12

DESCRIPTION

     These notes summarize the modifications made for ssppeecc release 2.12, as
     finalized on May 23, 1989.

CHANGES

     A new scan-plotting option has been added at the macro level.  You can
     choose to have a continuously updated plot made on the video screen as the
     points of the scan are collected.  Use the sseettpplloott macro to select this
     mode.

     The history-substitution mechanism has been expanded a bit.  You may now
     append text to recalled items.

     History is now retained when you exit the program and restored when you
     restart.  The ssaavvssttaattee command will include command history in the state
     file, and the ggeettssttaattee command will restore the command history from the
     last issued ssaavvssttaattee.

     A new powder-averaging mode for scans is available.  When powder mode is
     on, the selected powder-average motor is run at its base rate a selected
     width about each point in each scan.  The scalers are automatically enabled
     for counting during the time the motor is in motion.  Powder mode works
     with all the angle scans and HKL scans.  Use the macro sseettppoowwddeerr to turn
     powder mode on and off.  See the ppoowwddeerr help file for details.

     The command mmoovvee__ccnntt has been added to make powder mode work.  This command
     works similarly to mmoovvee__aallll except the motors are moved at the base rate,
     no backlash is performed and the scalers are automatically gated while the
     motors move.

     All the scan macros required slight modifications to make powder mode work.
     New global variables, __ssttyyppee00 and __ssttyyppee11 are assigned values to indicate
     the type of scan in progress.  In addition, some of the statements in each
     scan loop have been gathered into a new macro named ssccaann__mmoovvee.  The
     ssccaann__mmoovvee macro is assigned a different definition in powder mode.  Also,
     the ccoouunntt macro called by all the scans has been made redefinable to
     accommodate powder mode.  Study the macro files ssccaannss..mmaacc, ccoouunntt..mmaacc and
     ppoowwddeerr..mmaacc to see just how these things are done.

     A new four-circle geometry mode has been added called pphhii ffiixxeedd.  This mode
     is similar to the existing three-circle (phi-zero) mode, except the value
     of pphhii no longer needs to be fixed at zero.

     A new geometry configuration, named rr22dd22 after the high-vacuum surface
     chamber that it describes, is included in the distribution.  The geometry
     code is in the file ggeeoo__rr22dd22..cc.

     ssppeecc has two distinct phases during the process of interpreting user
     commands: the parse phase and the execution phase.  Previously, a macro
     definition assigned with ddeeff would be carried out in the execution phase,
     making the definition unavailable until the entire enclosing statement
     block had been read in and parsed.  This method of handling macro
     definitions made it impossible to enclose any of the recently (release
     2.10) redesigned standard scan macros within a statement block, since the
     same macro was both defined and invoked with the scan macro.  To solve this
     problem, macro-definition assignments are now made as they are encountered
     during the parse phase.  However, since several ssppeecc macros still require
     macro definitions to be made during the execution (or run) phase, a new
     command called rrddeeff has been introduced.  This new command behaves now like
     ddeeff used to.  See the macros sseettpplloott, sseettppoowwddeerr, lluupp or __hheeaadd for examples
     of the use of rrddeeff.

     The maximum macro length has been increased a bit from 1536 to 1920 bytes.

     Clock-tick sleeps are now available with ssppeecc on non-VENIX systems.
     Clock-tick sleeps are sleeps with sixtieth of a second resolution.  New
     versions of either of the drivers ddsspp..cc or oommss..cc must be installed, though,
     and the clock-tick sleeps will only work when the corresponding device has
     been opened.  Clock-tick sleeps work well with the sleep-time variable
     UUPPDDAATTEE used in updated-move macros such as uummvv, uummkk and uuwwmm.

     ssppeecc is now supported on the AT&T 6386 platform running UNIX version 3.2.

     The National Instruments GPIB boards are now supported for VENIX 286 and
     for the various 386 systems.  Drivers for the 386 systems must be obtained
     directly from National Instruments.

     The Scientific Solutions (Tecmar) GPIB support code has been rewritten
     following the sample programs provided by the manufacturer.  In addition,
     this board can now be used on the 386 systems.  On the 386 systems a
     supplied program called iioo__eennaabbllee is automatically run the first time the
     board is used in order to enable the IO ports used by the board to be
     accessible from user-level programs.

     The code to support the Kinetic Systems CAMAC GPIB board (KS3388) has been
     fixed.  A timing problem in the code that rarely, if ever, manifested
     itself on the PDP and 80286 systems had made the module unusable on the 386
     systems.

     The driver files, formerly distributed in the subdirectories ccaammaacc and oommss
     are now distributed in the subdirectory ddrriivveerrss.  Three master installation
     scripts, iinnssttaallll__vvnnxx, iinnssttaallll__338866, and iinnssttaallll__aatttt, are supplied that are
     invoked by driver-specific scripts, such as iinnssttaallll__ddsspp for the DSP CAMAC
     driver, iinnssttaallll__oommss for the Oregon Micro Systems PCX driver and
     iinnssttaallll__ggppiibb for the National Instruments PCII GPIB driver.

     A problem on the 386 systems, where using a number larger than the largest
     long integer in a print statement or expression would cause a floating
     exception and possibly a core dump, has been fixed.

changes                      ssppeecc 2.11 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 2.11

DESCRIPTION

     These notes summarize the modifications made for ssppeecc release 2.11, as
     finalized on February 6, 1989.

CHANGES

     If the command file //uussrr//lliibb//ssppeecc..dd//ssiittee..mmaacc exists, it will be read each
     time any user runs ssppeecc.  Site administrators are encouraged to put
     site-specific commands in this file, for example, commands to assign
     synchrotron-beamline monochromator parameters.

     The aassccaann and aa22ssccaann macros now include the values of HH, KK and LL at each
     data point in the data file.

     In the prescan limit checking for the various hhkkll scans, a check for
     motor-limit problems at the last point of the scan has been added before
     the limit checking at the rest of the points in the scan.  Thus, a limit
     problem that occurs at the extreme points in HH, KK and LL will be caught
     earlier.

     New scan macros aa33ssccaann and dd33ssccaann are included for scanning three motors at
     a time.

     A new scan macro hhkkllmmeesshh is provided that does a mesh scan of any two of HH,
     KK and LL.

     The ssccaann__oonn macro that restarts aborted scans now also works with mesh
     scans.

     A sseettpplloott macro is now included that lets you configure the output
     generated at the conclusion of a scan.  You can choose from several
     combinations of printer and screen output.

     The ddoo and qqddoo macros have been modified to look for command files in a
     directory given by the global variable DDOO__DDIIRR if they can't be found in the
     current directory.

     A new macro ssccaann__ttaaiill, defined by default as __ttaaiill, is called at the end of
     each scan.  This construction is similar to the ssccaann__hheeaadd and ssccaann__lloooopp
     macros already in place and is related to the sseettpplloott macro described
     above.

     New macros for the folks at X-20 NSLS related to setting the X-ray beam
     energy are included in the standard distribution.  These macros are sseett__EE,
     ggeett__EE, mmoovvee__EE and EEssccaann.

     The ccoonnffiigg macro now does a wwaaiittaallll and a ssyynncc before invoking the eeddccoonnff
     program.

     The CAMAC driver for the VENIX system on the AT computers has been changed
     to solve a problem with losing LAM interrupts that come in during servicing
     of a prior LAM interrupt.  The bug would manifest itself with ssppeecc being
     hung and DSP 6001 LAM lights being lit.  (Affected sites should be sure to
     install the new driver.)  (The problem does not occur on PDP systems.)

     For folks running ssppeecc using VENIX on AT clones, ssppeecc is now compiled using
     the large-model compiler.  This gives a larger memory arena than otherwise
     available.  The added memory comes at a slight loss of execution speed,
     though.  (The regular-model version is still available.)

     ssppeecc now allows you to use more than one kind of motor controller at a
     time.  (This feature entailed revising much motor-related code - please
     inform CSS if you notice any new bug manifestations.)

     The eeddccoonnff program (invoked by the ccoonnffiigg macro) has undergone some
     changes.  A third screen is used to configure the device names.  The order
     of the screens is changed so that the motor screen appears first.  A new
     parameter for each motor indicates the type of controller to be used for
     that motor.

     A presence check is now performed on all types of motor controllers, not
     just on the E500.  The check is performed with the rreeccoonnffiigg command now,
     rather than with the ssyynncc command.  When a controller fails the presence
     test, the associated motors are marked as uunnuussaabbllee.

     The ""cclleeaarriinngg rreemmaaiinniinngg sstteeppss"" message that occurred on ^^CC aborts of E500
     motors has been eliminated from normal operation.  The message will appear
     when hardware debugging is turned on, though.

     A bug with using the mmccoouunntt(()) function (counting to monitor) with the
     RTC-018 controller has been fixed.  Previously the monitor counts would be
     off by a factor of 64.

     The first draft of general serial device routines, sseerr__ggeett(()) and sseerr__ppuutt(())
     is now available.  See the sseerriiaall help file for more information.

     A bug where ssppeecc tended to dump core after you typed three ^^CC's to stop
     motors and got the message

         GGiivviinngg uupp oonn wwaaiittiinngg..

         IIff mmoottoorr ccoonnttrrooll iiss hhuunngg,, ttyyppee ``ssyynncc''..

     is fixed.

     A bug where ssppeecc would screw up if you had more than nine arguments in a
     macro has been fixed.

     A bug where macro definitions very close to the maximum length caused ssppeecc
     to screw up badly has been fixed.

     To aid in debugging and testing new versions of ssppeecc, a new command line
     argument, --DD _s_p_e_c_d_i_r is available.  It selects the name of the auxiliary
     file directory to be used instead of the compiled in directory, normally
     //uussrr//lliibb//ssppeecc..dd.  It is also possible to change the compiled in directory
     name when remaking ssppeecc on site.  See the comments at the top of the file
     uu__hhooookk..cc for an explanation of how.

     There is an aawwkk script, aauuxx//sshhooww..aawwkk in the distribution directory that can
     be used with CC--PPLLOOTT to produce summary plots of scans, twelve per page.
     The file contains comments explaining its usage.

     The scripts to install kernel drivers, iinnssttaallll__ddsspp and iinnssttaallll__338866, now
     take several command-line options.  See the RREEAADDMMEE file in the ccaammaacc
     subdirectory of the distribution for details.

changes                      spec 2.10 Release Notes                     changes

NAME
     changes - highlights of modifications for ssppeecc release 2.10

DESCRIPTION

     These notes summarize the modifications made for ssppeecc release 2.10, as
     finalized on October 21, 1988.

CHANGES

     Typing ssccaann__oonn continues a scan that was aborted.  Presently, mmeesshh scans
     cannot be restarted.  Also restarted delta scans (lluupp ddssccaann and dd22ssccaann)
     will not return the scanned motors to the center position after the
     restarted portion of the scan completes.

     Four-circle users may now assign cut points for angles set by the geometry
     calculation code.  The macro ccuuttss does the assignment.  Presently, cut
     points are used with tthh, pphhii, cchhii and oommeeggaa.  The user specifies the lesser
     cut point in degrees (integers only), and the angles will be set between
     that point and that point plus 360 degrees.  The aazziimmuutthh has a pseudo-cut
     point.  If its value is less than zero, the calculated azimuth will be
     between -180 and 0, otherwise the azimuth will be between 0 and +180.

     This release supports the old VENIX operating system on PDP 11/73
     computers.  See the ppddpp help file.

changes                      spec 2.9 Release Notes                      changes

NAME
     changes - highlights of modifications for ssppeecc release 2.9

DESCRIPTION

     These notes summarize the modifications made for ssppeecc release 2.9, as
     finalized on October 10, 1988.

CHANGES

     Invoking ssppeecc with --yy will force the motor registers to be changed to agree
     with the settings file when the program starts up.  If you are confident
     the settings file is okay, and know the motor registers have been wiped
     out, say by shutting off crate power, then this option ought to be just the
     thing.

     The message noting the discrepancy between motor-controller registers and
     program memory now shows the values of each in user units (angles) in
     addition to steps.

     Hitting a hard motor limit will cause the program to reset to command
     level, whether in a scan or in a command file.  Previously, although motor
     motion was aborted on a hard limit, command execution continued.

     The pprrddeeff command now shows backslashes associated with escaped delimiter
     characters within a macro definition, as in:

        ddeeff ssiillllyy ''pprriinntt ""WWhhoo\\''ss oonn ffiirrsstt??""''

     Previously, these backslashes were not shown.

     All instances of the command mmoovvee__aallll in the standard macros have been
     replaced by the macro mmoovvee__eemm.  The default definition of mmoovvee__eemm is simply
     mmoovvee__aallll.  The purpose of mmoovvee__eemm is to make it easy for the user to
     include limit checks of moves that involve more than one motor by
     redefining mmoovvee__eemm.

     A new macro mmeesshh that performs a mesh scan of any two motors is included.

     The wwmm and uuwwmm macros now check that their arguments are valid motor names.

     A new built-in command llooccaall (with the same syntax as the gglloobbaall command)
     can be used to reuse a preexisting variable name and give the new instance
     of that name scope only within and below the curly-bracketed block in which
     it is defined.  A known bug with the current implementation is that you
     cannot use the gglloobbaall keyword at the same level or lower to uunnllooccaalliizzee use
     of a previously local-declared variable name.

     The motor screen for the eeddccoonnff configuration and settings editor now wraps
     around when changing motor columns instead of sticking at motor 0 or at the
     last motor.

     The CAMAC drivers can be optionally compiled either to allow only the super
     user to issue a ZZ or to allow any user to issue a ZZ.  Previously, it was
     only super-user only.

     This release supports the 386/ix operating system on 80386-based machines.
     See the 338866 help file.

changes                      spec 2.8 Release Notes                      changes

NAME
     changes - highlights of modifications for ssppeecc release 2.8

DESCRIPTION

     These notes summarize the modifications made for ssppeecc release 2.8, as
     finalized on August 6, 1988.

CHANGES

     The four-circle motors are now consistently referred to in the order tttthh tthh
     cchhii pphhii throughout ssppeecc.  (Previously, the order of cchhii and pphhii was
     reversed.)  The macros with changed usage are ppll, uuppll and ccii.  All the
     macros that produce output (wwhh, the scans, etc.)  use the new ordering
     convention.

     The global variable referring to the data file has been changed from
     FFIILLEENNAAMMEE to the more revealing DDAATTAAFFIILLEE.

     The order of arguments in the built-in functions ddiiaall(()), uusseerr(()), cchhgg__ddiiaall(())
     and cchhgg__ooffffsseett(()) has been changed to make the motor number the first
     argument in each case.  This change makes the argument ordering of these
     four functions consistent with the functions ggeett__lliimm(()) and sseett__lliimm(()).

     A new function named mmoottoorr__mmnnee((ii)) returns the mnemonic assigned to motor
     number ii in the ccoonnffiigg file.  The internal __cchheecckk00 macro, called by all
     standard macros that allow a motor number or mnemonic as an argument, now
     checks its argument against all valid mnemonics, rather than just that for
     motor 0, as it had previously.

     Most scans macros now include prescan motor-limit checks.

     Previously, certain of the ccaallcc(()) calls to the geometry code (ccaallccAA and
     ccaallccAABB, in particular) filled the AA[[]] array with the current motor
     positions.  That no longer happens.

     The four-circle geometry code has been made more robust (we like to think).

changes                      spec 2.7 Release Notes                      changes

NAME
     changes - highlights of modifications for ssppeecc release 2.7

DESCRIPTION

     These notes summarize the modifications made for ssppeecc release 2.7, as
     finalized on July 8, 1988.

CHANGES

     GPIB support for the Tecmar board in the AT is now included.  The user must
     have read and write permission for //ddeevv//iioommeemm.  The board must be installed
     at base address 300.  If the ccoonnffiigg file assigns a slot to the Kinetic
     Systems 3388 GPIB CAMAC module, the Tecmar board will be unavailable.

     A presence test is performed when the E500 is first opened and when the
     user types ssyynncc or rreeccoonnffiigg.  (rreeccoonnffiigg is called by the ccoonnffiigg macro.)  If
     the presence test fails, all associated motors are marked uunnuussaabbllee.  Once
     marked unusable, the program must be restarted to make them usable.  Trying
     to move an unusable motor produces an error message.

     The E500 ""rreemmaaiinniinngg sstteeppss"", usually resulting from aborting motion, are
     noted and cleared in the LAM routine.  Thus ""cclleeaarriinngg rreemmaaiinniinngg sstteeppss""
     messages seldom occur when initiating a move.

     When there is a discrepancy between pprriivviilleeggeedd motor settings and the
     controller registers, the registers are now changed, rather than the
     settings.

     When there is a discrepancy between wwrriittaabbllee motors and controller
     settings, the user must type either yy or nn.  No default is allowed.  (YY or
     11 and NN or nn are also acceptable input.)

     The ggeettaanngglleess and ggeettddiiaallss commands now read and return the current
     contents of the controller registers, not the program's idea of the motor
     positions.  (However, at present, the program's idea of the motor position
     is not changed by these two commands-that still occurs the same way as in
     previous versions.)

     SSIIMMUULLAATTEE is no longer a built-in variable.  Instead, a new function,
     sseett__ssiimm(()) is used to turn simulation mode on and off, where sseett__ssiimm((00))
     turns the mode off and sseett__ssiimm((11)) turns the mode on.  Both wait for moving
     and counting to finish before changing the mode, and both return the
     previous mode.  sseett__ssiimm((--11)) returns the current value of simulation mode
     without changing it.  Whenever simulation mode is turned off, the motor
     settings file is reread to restore the motor positions.

     Negative arguments to sslleeeepp(()) are allowed.  They represent clock ticks,
     where a clock tick is 1/60th of a second, e.g., sslleeeepp((--1100)) pauses for
     approximately a sixth of a second.

     mmoovvee has been renamed mmoovvee__aallll to make it harder for a user to start motors
     moving by accident.

     eeddccoonnff has been revised, due to popular demand.  Changes include the
     following: When invoked with the --ss option, eeddccoonnff is put into simulation
     mode where nothing can be changed and files can't be written.  Also, if the
     user doesn't have write permission to the ccoonnffiigg file, no configuration
     parameters can be changed, and only the settings and/or limits of the
     configured wwrriittaabbllee motors can be changed.  System error messages are now
     shown giving the reason for failures when opening, closing, reading and
     writing the files.  Also, the motor settings can now be put outside the
     limits, although a warning message will be printed when the user writes out
     the files.  The dial setting is now maintained when changing the
     number-of-steps parameter.  Finally, there is always at least one motor.

     The tweak macro ttww has been changed to only output to the printer at the
     beginning and end of the tweaking process.

     The sseett__ddiiaall macro no longer changes the limits.  However the macro refuses
     to set the dial outside of the current limits.

     The format of motor positions written to the data file by the scan macros
     has been compressed.  The motor names are no longer printed.  The motor
     positions are printed eight per line with the format

         ##PP00 ((eeiigghhtt mmoottoorrss))

         ##PP11 ((aannootthheerr eeiigghhtt mmoottoorrss))

     etc.

     The ccoonnffiigg macro invokes eeddccoonnff with the --ss flag if ssppeecc is in simulation
     mode.

     New macros display motor positions while motors are moving.  Their names
     are uuwwmm, uummvv, uummvvrr, uuaann, uuppll, uubbrr and uummkk.  Except for the update feature,
     they are identical to wwmm, mmvv, mmvvrr, aann, ppll, bbrr and mmkk.  The global variable
     UUPPDDAATTEE contains the sleep time between screen updates and can be changed by
     the user.

     The Makefile for installing ssppeecc has a new variable PPEERRMMSS that contains the
     permissions to assign to the ccoonnffiigg file.  The default is to make the
     config file writable by everyone.  (Typing mmaakkee iinnssttaallll__xx2200 will install
     the BNL X20 ssppeecc automatically giving the ccoonnffiigg file restricted access.)

     A bug whereby CAMAC interrupts that arrived during a sslleeeepp(()) sometimes
     caused the sslleeeepp(()) to not wake up is fixed.  A bug whereby assigning string
     values to the motor position array, AA[[]], used to produce surprising results
     is fixed.

changes                      spec 2.6 Release Notes                      changes

NAME
     changes - highlights of modifications for ssppeecc release 2.6

DESCRIPTION

     These notes summarize the modifications made for ssppeecc release 2.6, as
     finalized on June 6, 1988.

CHANGES

     The UUsseerr MMaannuuaall, RReeffeerreennccee MMaannuuaall and AAddmmiinniissttrraattoorr''ss GGuuiiddee are now
     relatively complete.  The UUsseerr MMaannuuaall contains an introductory tutorial
     chapter on basic diffractometer operation.

     The scan macros are substantially rewritten.  Refer to the RReeffeerreennccee MMaannuuaall
     for a discussion of their present form.

     The temperature control macros are substantially rewritten.  Refer to the
     RReeffeerreennccee MMaannuuaall.  In addition, thermistor conversions are now handled
     entirely within the macros.

     The plot-results output is now generated in a macro named pplloott__rreess, that
     can be invoked separately and can be easily modified by the user.

     The motor name uunnuusseedd is special.  Motors with that name won't appear on
     any of the standard-macro generated output.

     Bugs in the code for two CAMAC modules, the RTC018 clock and Joerger SMC
     motor controller, have been fixed.

     Bugs in the code for the four-circle ffrroozzeenn modes have been fixed.

     The geometry-specific standard macro file is now kept in ssppeecc..dd// rather
     than ssppeecc..dd//ccoonnff//.  The four-circle file is called
     //uussrr//lliibb//ssppeecc..dd//ffoouurr..mmaacc.

     The modulus operator (%%) now correctly converts its operands to integers
     before operating.

     New options for ppll__aannaall(()) return the minimum and maximum values of xx.

     The names ggppsseett, ssaavveeuussrr and ssaavveeggeeoo replace __ggppsseett, __ssaavveeuussrr and __ssaavveeggeeoo.

changes                      spec 2.5 Release Notes                      changes

NAME
     changes - highlights of modifications for ssppeecc release 2.5

DESCRIPTION

     These notes summarize the modifications made for ssppeecc release 2.5, as
     finalized on May 11, 1988.

CHANGES

     Each motor now has three levels of security: 1) no protection, 2) limits
     cannot be changed and 3) motor cannot be moved.

     When using edconf to alter the configuration file, limits no longer track
     changes to the accumulator, however they still follow changes to the dial
     setting.

     The name of the standard macro file has been changed from
     //uussrr//lliibb//ssppeecc..dd//ssppeecc..mmaacc to //uussrr//lliibb//ssppeecc..dd//ssttaannddaarrdd..mmaacc.

     The DSP CAMAC driver has been fixed to enable slot 16 to work.  In
     addition, each time a process opens the driver when no other process has it
     open, a CAMAC ZZ (initialization command) is issued.

     A new macro wwmm, ""wwhheerree mmoottoorr"", prints positions and limits for up to six
     motors.

     A new macro vvii invokes the editor called vvii.

     A new macro mmaaiill invokes the mailer called mmaaiillxx.

     A new macro bbuugg lets the user enter a message that is then mailed to the
     administrator, ssppeecc__aaddmm.

     A new macro sspplloott plots the current data on the video screen.

     The geometry status macros wwhh, ccaa, ccii, etc., will now only print the
     positions of the four-circle motors.

     MMOOTTOORRSS is now a built-in symbol, automatically set to the number of
     configured motors when the ccoonnffiigg file is read.

     On first reading of the standard macros, if the four-circle motors are not
     configured in the standard positions (0-3), the motor indirection array
     (__AA[[]]) is automatically initialized.

     The four-circle diffractometer macro set and C code has been improved,
     including better diagnostics when trying to go to unreachable positions and
     bug fixes.  The RReeffeerreennccee MMaannuuaall now contains a complete description of the
     four-circle interface.  Among the new four-circle macros to set geometry
     parameters (each will prompt if invoked without arguments) are sseettmmooddee to
     set the mode, sseettsseeccttoorr to set the sector, sseettllaatt to set the crystal
     lattice parameters and sseettaazz to set the azimuthal reference vector.

     The state file is no longer saved if the user exits using ^^ZZ.

     The plotting interface has been revised.  Consult the RReeffeerreennccee MMaannuuaall for
     details.

     The wwaaiitt(()) function can now be invoked to return a value indicating if any
     asynchronous activity is going on.

     New built-in functions eexxpp1100((xx)) and ppooww((xx,, yy)) are available.  The former
     returns 10 to the xx, the latter, xx to the yy.

