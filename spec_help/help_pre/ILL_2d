ILL_2D                              hardware                              ILL_2D

NAME
     ILL 2D - ILL two-dimensional detector

DESCRIPTION

     ssppeecc supports two-dimensional position-sensitive detectors used at the ADAM
     and the EVA instruments at the Institut Laue Langevin (ILL) in Grenoble,
     France.  The support is by way of built-in C code in ssppeecc that communicates
     with CSS-supplied LLiinnuuxx kernel drivers.  The drivers catch interrupts
     generated by trigger signals from the detector electronics, which also
     supply event addresses on the digital input lines.  The driver decodes the
     event address and increments a corresponding element of an array that
     accumulates the data.  There are drivers for both an ISA card (Measurement
     Computing CIO-PDMA16 and compatible) and a PCI card (Measurement Computing
     PCI-DIO24 and compatible - added in ssppeecc release 5.05.01-6).

     The hardware is selected in the ccoonnffiigg file with the line:

         PPCC__IILLLL22DD == ddeevviiccee__nnaammee  ddiimmeennssiioonn  @@iimmgg__sseell

     where ddeevviiccee__nnaammee is the device node of the driver, as in //ddeevv//ppiioo,
     ddiimmeennssiioonn is the dimension of one side of the square array used to collect
     data and sseell is the image-device number used as the first argument in the
     iimmaaggee__ppaarr(()) and iimmaaggee__ggeett(()) functions below.  The ddiimmeennssiioonn argument is
     only supported by the PCI card.  The ISA card is fixed at a 256x256 array.
     For the PCI card, the dimension of the array can be any power of two from
     16 to 4,096.  The native data type for both cards is unsigned long.

     When running the configuration editor, switch to  the MCA- and CCD-like
     device configuration screen to select the "ILL 2D Detector" as a CCD-like
     device.

     The CSS-supplied kernel-level driver expects the external detector hardware
     to assert an IRQ request on pin 1 of the external connector when data is
     available.  For the PCI card, the interrupt-enable signal on pin 2 must be
     pulled high.  For the ISA card, the driver will acknowledge with a signal
     on pin 26.  For the PCI card, there is no acknowledgment signal.

     On each interrupt, data is read from the card's input registers.  For the
     ISA card, the column (x) and row (y) are taken from the A and B ports,
     respectively, yielding an address into the 256x256 data array:

        xx == AA77 AA66 AA55 AA44 AA33 AA22 AA11 AA00  ((LLSSBB))
        yy == BB77 BB66 BB55 BB44 BB33 BB22 BB22 BB00  ((LLSSBB))

     For the PCI card, the C port adds additional bits as follows:

        xx == CC33 CC22 CC11 CC00 AA77 AA66 AA55 AA44 AA33 AA22 AA11 AA00  ((LLSSBB))
        yy == CC77 CC66 CC55 CC44 BB77 BB66 BB55 BB44 BB33 BB22 BB22 BB00  ((LLSSBB))

     When the driver is configured (via software) for less than twelve bits per
     channel, the appropriate number of least significant bits (LSB) are
     ignored.

     When an event is recognized, the array element at that address is
     incremented to indicate an event.  The driver also maintains a counter of
     total events and total time of acquisition.  There is also a feature for
     counting events and time over an interval.

     To install the drivers, change to the ddrriivveerrss subdirectory of the ssppeecc
     distribution.  For the ISA-card driver, type

         ..//iinnssttaallll__ppiioo --bb 00xx330000 --ii 1100

     where the base address is chosen to match the digital I/O board's jumpers
     and the IRQ is chosen not to conflict with any other devices.  Type ccaatt
     //pprroocc//iiooppoorrttss and ccaatt //pprroocc//iinntteerrrruuppttss to see what resources are currently
     in use.  For the PCI-card driver, simply type

         ..//iinnssttaallll__ppiioo2244

FUNCTIONS

     The iimmaaggee__ggeett(()) functions retrieves the data from the driver.  The
     iimmaaggee__ppaarr(()) function controls the detector interface behavior as follows.
     The sseell parameter is the image-device number from the ccoonnffiigg file.

     iimmaaggee__ggeett((sseell,, aarrrr)) - Reads data into the array aarrrr.

     iimmaaggee__ppaarr((sseell,, ""cclleeaarr"")) - Clears the driver data.

     iimmaaggee__ppaarr((sseell,, ""rruunn"")) - Starts data collection.  Memory is not cleared.

     iimmaaggee__ppaarr((sseell,, ""hhaalltt"")) - Halts data collection.

     iimmaaggee__ppaarr((sseell,, ""ssuumm"")) - Returns the total number of counts detected since
          last clear.

     iimmaaggee__ppaarr((sseell,, ""eellaappsseedd__ttiimmee"")) - Returns the elapsed time of the run in
          seconds.

     iimmaaggee__ppaarr((sseell,, ""rraattee"")) - Returns the count rate in counts per second since
          the last call of iimmaaggee__ppaarr(()) with the ""rraattee"" argument.

     iimmaaggee__ppaarr((sseell,, ""iinntteerrvvaall__ssuumm"")) - returns the total number of counts since
          the previous ""rraattee"" call.

     iimmaaggee__ppaarr((sseell,, ""iinntteerrvvaall__ttiimmee"")) - Returns the elapsed time since the
          previous ""rraattee"" call.

     The value returned by ""rraattee"" is, in fact, the ratio of the values returned
     by ""iinntteerrvvaall__ssuumm"" and ""iinntteerrvvaall__ttiimmee"".

     The ""ssuumm"", ""eellaappsseedd__ttiimmee"", ""iinntteerrvvaall__ssuumm"" and ""iinntteerrvvaall__ttiimmee"" parameters
     are read from the driver no more frequently than every 100 msec.  That is,
     while acquisition is active, ssppeecc checks to see if it has read the
     parameters within the last 100 msec.  If it has, it returns the last read
     values.  Otherwise it reads all the values and saves them to be returned on
     subsequent calls within the 100 msec window.

EXAMPLE

     The following macros show how to obtain and display the count rate:

        ## ddiissppllaayy ccuurrrreenntt ccoouunntt rraattee
        ddeeff rraattee ''{{
            llooccaall rr,, tt,, ss

            rr == iimmaaggee__ppaarr((00,, ""rraattee""))        ## iinnssttaannttaanneeoouuss rraattee
            tt == iimmaaggee__ppaarr((00,, ""eellaappsseedd__ttiimmee""))
            ss == iimmaaggee__ppaarr((00,, ""ssuumm""))
            pprriinnttff((""%%66dd iinn %%ss aatt %%..22ff\\nn"",, ss,, hhmmss((tt)),, rr))
        }}''
        ## ccoonnvveerrtt sseeccoonnddss ttoo hhoouurrss::mmiinnuutteess::sseeccoonnddss
        ddeeff hhmmss((tt)) ''{{
            iiff ((tt >> 00)) {{
                llooccaall hh,, mm,, ss,, dd,, rr

                iiff ((hh == iinntt((tt//33660000))))
                    rr == sspprriinnttff((""%%dd::"",, hh))
                iiff ((((mm == iinntt((tt//6600)) -- hh**6600)) |||| rr))
                    rr == rr sspprriinnttff((""%%0022dd::"",, mm))
                ss == iinntt((tt)) -- hh ** 33660000 -- mm ** 6600
                rr == rr sspprriinnttff((""%%0022dd"",, ss))
                iiff ((dd == tt -- iinntt((tt))))
                        rr == rr sspprriinnttff((""..%%33dd"",, iinntt((dd**11000000))))
                rreettuurrnn((rr))
            }}
            rreettuurrnn((""00""))
        }}''

