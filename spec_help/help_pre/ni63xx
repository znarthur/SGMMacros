ni63xx                              hardware                              ni63xx

NAME
     ni63xx - National Instruments 63xx PCIe counter/timer

DESCRIPTION

     The National Instruments X series data acquisition boards have four 32-bit
     counter channels and 8 or 32 digital I/O (DIO) channels (depending on
     model).  Different models include a varying number of analog-to-digital
     converters (ADC) and digital-to-analog converters (DAC).  However, the ADC
     and DAC functionality is not yet supported by ssppeecc.

     Recognized models are PCIe-6320, PCIe-6321, PCIe-6323, PCIe-6341,
     PCIe-6343, PCIe-6351, PCIe-6353, PCIe-6361 and PCIe-6363, along with
     PXIe-6323, PXIe-6341, PXIe-6343, PXIe-6356, PXIe-6358, PXIe-6361,
     PXIe-6366, PXIe-6368, PXIe-6376 and PXIe-6378.

     All models support a 100 MHz count rate.  In addition, counter inputs may
     be prescaled by a factor of two or eight extending the usable maximum count
     rates to 200 MHz or 800 MHz, and adding one or three more bits to the
     effective counter size.

     When counting to time, for shorter count times (less than 42.95 seconds),
     ssppeecc uses the 100 MHz built-in clock.  For longer count times, ssppeecc uses
     the 100 KHz clock, allowing for a maximum count time of nearly 12 hours.

     ssppeecc will keep track of overflows to the channel counting time (when not
     counting to a time preset), but does not currently correct for counter
     overflows in the other channels.

     ssppeecc also provides commands for selecting the hardware's digital debouncing
     filter for external inputs and for accessing the DIO pins available on
     these cards.  See the FFUUNNCCTTIIOONNSS section below for details.

SOFTWARE CONFIGURATION

     Use ssppeecc's configuration editor (eeddccoonnff, normally invoked by the ccoonnffiigg
     macro) to select the timer and to configure the scaler channels.  On the
     DDevices screen, enter the the number of counters on the board, which should
     be four.

        SSCCAALLEERRSS  DDEEVV  AADDDDRR  <<>>MMOODDEE  NNUUMM                          <<>>TTYYPPEE
            YYEESS        00::00            44    NNII PPCCII 6633xxxx aass CCoouunntteerr//TTiimmeerr
            YYEESS        00::00            44         NNII PPCCII 6633xxxx aass CCoouunntteerrss

     The ADDR field can be optionally used to configure the PCI bus:slot numbers
     if more than one of these cards is installed in the same computer.  Leaving
     the default value of 0:0 means the card can be in any slot.  Note, the
     values must be entered as decimal numbers in ssppeecc's configuration editor,
     even though the LLiinnuuxx //ssbbiinn//llssppccii utility will list the values in
     hexadecimal.  For cards with ADDR set to the default 0:0, ssppeecc will assign
     unit numbers in the order in which the cards are detected.

     The parameters ""aaccttiivvee__llooww"" and ""iioo__ccoonnffiigg"" can be set as optional
     controller parameters by typing the pp command.  Enter the parameter name
     and value on the optional parameter screen.  Possible values are described
     in the FUNCTIONS section below.  When set only as a controller parameter,
     the parameter value cannot be changed from the ssppeecc command line.

     On the SScaler screen, choose NNII6633xxxx as the device type.  The unit numbers
     are assigned consecutively to the NI PCI counter/timers according to the
     order they are listed on the DDevices screen, starting with unit zero:

        NNUUMMBBEERR      NNAAMMEE  MMNNEEMMOONNIICC  <<>>DDEEVVIICCEE  UUNNIITT  CCHHAANN   <<>>UUSSEE AASS  SSCCAALLEE
             00   SSeeccoonnddss       sseecc    NNII6633xxxx     00     00   ttiimmeebbaassee      11
             11   MMoonniittoorr       mmoonn    NNII6633xxxx     00     11    mmoonniittoorr      11
             22  DDeetteeccttoorr       ddeett    NNII6633xxxx     00     22    ccoouunntteerr      11
             33 CCoouunntteerr 22        cc22    NNII6633xxxx     00     33    ccoouunntteerr      11
             33 CCoouunntteerr 33        cc33    NNII6633xxxx     11     00    ccoouunntteerr      11
             33 CCoouunntteerr 44        cc44    NNII6633xxxx     11     11    ccoouunntteerr      11

     Any channel can be used as the time base.  Also, any channel can be used as
     the monitor-preset channel.  In addition, the monitor channel assignment
     can be changed from the ssppeecc command line with ccoouunntteerr__ppaarr(()), as described
     in the FFUUNNCCTTIIOONNSS section below.

     The scale factor is ignored for the time-base channel, since the time base
     is set and accounted for internally in the C code.

     Values for the optional parameters ""ffiilltteerr"" and ""pprreessccaallee"" can be set on
     the optional counter parameter screen accessed by typing the pp command.
     Enter the parameter name and a value.  Possible values are described in the
     FUNCTIONS section below.

     Also, the ""aaccttiivvee__llooww"" and ""iioo__ccoonnffiigg"" controller parameters, which are not
     associated with a particular channel, can each be set as an optional scaler
     parameter for any scaler associated with the controller.  When set as a
     scaler parameter, the value can be modified using ccoouunntteerr__ppaarr(()) from the
     ssppeecc command line.  Configuring as a scaler parameter overrides the
     controller parameter setting and behavior.

THEORY OF OPERATION

     One of the key requirements for counter/timers in ssppeecc is the capability to
     have a master channel that will gate the slave counter channels by way of a
     hardware signal.  A second requirement is that at least two channels (one
     for time and one for monitor) can be used as the master channel.  Even
     better is hardware that allows any channel to be used as the master
     channel.  The NI 63xx boards meet these requirements.

     The 63xx card architecture allows any channel to be configured to use any
     other channel's associated gate input pin as its own gate.  ssppeecc requires
     each possible master counter's output to be connected to its associated
     gate via a jumper.  That counter's output will then serve as gate for all
     the counters.  See the HHaarrddwwaarree CCoonnffiigguurraattiioonn section below.

     Normally all outputs are disabled and set to a high impedance state.  When
     a particular counter is the master, ssppeecc configures just that channel to
     have its output activated during counting to serve as gate for all
     channels.  When the master counter counts down from its preset and reaches
     zero, the last count changes the state of the output, which disables the
     slave counters.  This achieves a reliable hardware gating.

     If the card is set up as only counters, ssppeecc configures the card so that
     all channels will gate off the gate pin associated with the lowest numbered
     channel included in the ccoonnffiigg file.  The external gate from the master
     timer device can be connected to that pin.

     If the 63xx is to be used as master to gate other cards, one must connect
     the various designated output pins of the possible master counter channels
     together and use that signal.  ssppeecc will only activate one output pin at a
     time.  All the other pins will be in the default power-on high-impedance
     state, so there is no danger of overloading the outputs as long as ssppeecc is
     used to control the card.

     By default, ssppeecc programs each channel for an active-high gate.  That is,
     during counting the output signal from the master channel will be nominally
     at +5V.  If it would make gating other devices more convenient, the
     ccoouunntteerr__ppaarr(()) command can be used to configure the gate signal as active
     low (see below).

     Although hardware gating is preferred for counters, ssppeecc does in any case
     send appropriate commands to arm and disarm the counters in the absence of
     hardware gating.  The arm command occurs before the master timer is
     started.  The disarm command occurs after the master timer has stopped.

HARDWARE CONFIGURATION

     For each counter channel that will be used as a master timing channel
     (either with the internal time base or with an external monitor-count
     preset), you need to connect the associated output pin to the associated
     gate pin.  It doesn't hurt to make all the connections, even if you don't
     anticipate the channel being used for a monitor preset channel.  ssppeecc uses
     the conventional pin assignments for the counter input, output and gate
     connections.  These pins are the PFI lines numbered 0, 1, 3, 4, 5, 6, 8, 9,
     12, 13, 14, 15.  (That is, all but 2, 7 and 10.)  All models should have
     the following connections:

         Out(0) pin  2 to Gate(0) pin  3
         Out(1) pin 40 to Gate(1) pin 41
         Out(2) pin  1 to Gate(2) pin 10
         Out(3) pin  5 to Gate(3) pin 39

     For boards with two connectors, the pin numbers refer to connector 0.
     Note, a master timing channel will not work properly until its
     corresponding output-to-gate jumper is installed.

     Input signals connect to the following pins.  One channel will probably be
     used for the time base, as selected in the ccoonnffiigg file.  There's no need to
     connect an input signal to that channel, since it will be programmed to use
     the internal clock.

         Source(0) pin 37
         Source(1) pin 42
         Source(2) pin 11
         Source(3) pin  6

     Choose any of the many ground pins (4, 7, 9, 12, 13, 15, 18, 35, 36, 44,
     50, 53) as ground.

FUNCTIONS

     The following ccoouunntteerr__ppaarr(()) options are available.  The first three
     commands are associated with particular counter channels:

     ccoouunntteerr__ppaarr((mmnnee,, ""mmoonniittoorr"")) - Sets the channel assigned to mnemonic mmnnee to
          be the monitor preset channel.  The monitor channel gets reset when
          the ccoonnffiigg file is read on start up or on rreeccoonnffiigg.

     ccoouunntteerr__ppaarr((mmnnee,, ""pprreessccaallee"" [[,, hhooww]])) - Without the optional argument,
          returns 2 if the channel for mmnnee has been configured with the
          divide-by-two prescale and returns 8 if the divide-by-eight prescale
          has been selected.  If called with hhooww set to 2, turns on the
          divide-by-two prescale.  If set to 8, turns on the divide-by-eight
          prescale.  If set to zero, turns off prescaling.  The ""pprreessccaallee""
          parameter can be set as an optional scaler parameter using the
          hardware configuration editor.  If the parameter is not set in the
          ccoonnffiigg file, rereading the ccoonnffiigg file resets the mode to prescale
          off.

     ccoouunntteerr__ppaarr((mmnnee,, ""ffiilltteerr"" [[,, vvaall]])) - The boards have three possible input
          filters:  small, medium and large.  Filters are as follows:

              Value      Rejects Pulses   Delays Pulse   Adds Jitter
              ""ssmmaallll""    < 100 ns         100 ns         25 ns
              ""mmeeddiiuumm""   < 6.4 us         6.4 us         25 ns
              ""llaarrggee""    < 2.54 ms        2.54 ms        10.025 us

          The ""ffiilltteerr"" parameter can be set as an optional scaler parameter
          using the hardware configuration editor.  If the parameter is not set
          in the ccoonnffiigg file, rereading the ccoonnffiigg file resets the mode to
          filter off.

     The following options are associated with the operation of the card, not
     with a particular channel.  The mmnnee argument is necessary for the syntax of
     the command and should be the mnemonic or counter number of any of the
     configured channels associated with the card.  The DIO bits are 0 to 7 or 0
     to 31, depending on what is available on the particular card.

     ccoouunntteerr__ppaarr((mmnnee,, ""aaccttiivvee__llooww"" [[,, hhooww]])) - Without the optional argument,
          returns nonzero if the counting card associated with channel mmnnee has
          been configured for active-low gates.  If called with hhooww nonzero,
          turns on the active-low mode for gating.  Otherwise, sets the default
          active-high gate mode.  The mode only needs to be set for one channel
          to affect all channels on the card.  The ""aaccttiivvee__llooww"" parameter can be
          set as an optional controller parameter from the DDevices screen of the
          hardware configuration editor or as an optional scaler parameter from
          the SScaler screen.  When set as a controller parameter, its value
          cannot be changed using ccoouunntteerr__ppaarr(()).  If the parameter is not set in
          the ccoonnffiigg file, rereading the ccoonnffiigg file resets the mode to active
          low off.

     ccoouunntteerr__ppaarr((mmnnee,, ""iioo__ccoonnffiigg"" [[,, vvaall]])) - Bits set in vvaall will be configured
          as outputs on the digital I/O lines.  On power up, all lines are
          configured as inputs.  If the optional argument is missing, ssppeecc will
          return the current value as set by the user.  (The value can't be read
          from the card itself.)  The ""iioo__ccoonnffiigg"" parameter can be set as an
          optional controller parameter from the DDevices screen of the hardware
          configuration editor or as an optional scaler parameter from the
          SScaler screen.  When set as a controller parameter, its value cannot
          be changed using ccoouunntteerr__ppaarr(()).  The configured value for "io_config"
          is saved across readings of the ccoonnffiigg file.

     ccoouunntteerr__ppaarr((mmnnee,, ""sseett__bbiitt"",, vvaall)) - Set output lines corresponding to bit
          number vvaall to high, where bits and lines are numbered from 0 to 7 or
          31 (depending on the number of DIO lines).  Set bits are saved across
          readings of the ccoonnffiigg file.  For example,

             ccoouunntteerr__ppaarr((sseecc,, ""sseett__bbiitt"",, 55))

          would set bit 5 to a high state, if bit 5 has been configured for
          output.

     ccoouunntteerr__ppaarr((mmnnee,, ""ccllrr__bbiitt"",, vvaall)) - Set output line corresponding to bit
          number vvaall to low, where bits and lines are numbered from 0 to 7 or 31
          (depending on the number of DIO lines).

     ccoouunntteerr__ppaarr((mmnnee,, ""ppuutt__bbiittss"",, vvaall)) - Sets output lines corresponding to the
          bits set in vvaall to high and bits not set in vvaall to low.  Set bits are
          saved across readings of the ccoonnffiigg file.  For example,

             ccoouunntteerr__ppaarr((sseecc,, ""ppuutt__bbiittss"",, 00xx1133))

          would set bits 0, 1 and 4 to a high state, if the bits were configured
          for output.

     ccoouunntteerr__ppaarr((mmnnee,, ""ggeett__bbiitt"",, vvaall)) - Returns 0 or 1 based on whether the
          input line corresponding to bit number vvaall is high or low, where lines
          and bits are numbered from 0 to 7 or 31 (depending on the number of
          DIO lines).

     ccoouunntteerr__ppaarr((mmnnee,, ""ggeett__bbiittss"")) - Returns an 8-bit or 32-bit value (depending
          on the number of DIO lines) that reflects the setting of the input
          lines.

