dac                                 hardware                                 dac

NAME
     DAC - Digital-To-Analog (DAC) Motors

DESCRIPTION

     ssppeecc has built-in C code to treat a number of digital-to-analog converter
     (DAC) devices as motors.  The standard commands for moving motors and
     reading motor positions will set and get corresponding values on the DAC
     registers.  The "move" of a DAC motor is instantaneous - the value
     corresponding to the target position is written at once to the DAC
     register.

     The DAC hardware supported includes ISA boards with either byte or word
     access, PCI boards with word access, VME modules with an A16 addressing
     mode and USB devices.  (The configuration described here is not used for
     the CAMAC DSP E250, KS 3112/6 and KS 3195 DAC modules, which can also be
     used as DAC motors.)

     Digital I/O, which is an independent hardware feature often included with
     the DAC devices, is supported using mmoottoorr__ppaarr(()) commands as described
     below.

DEVICE CONFIGURATION

     Each DAC module should be configured on the Devices screen of the
     configuration editor.  Currently supported DAC controller types are:

         DAC as motor (ISA - byte access)
         DAC as motor (ISA - word access)
         DAC as motor (VME A16 addressing)
         DAC as motor (PCI)
         DAC as motor (USB)

     For the byte-access mode for ISA cards, ssppeecc first writes the high-order
     byte to one plus the register address, then writes the low-order byte to
     the register address.

     The specific PCI DAC cards currently supported are the Measurement
     Computing models PCI-DDA02/12, PCI-DDA04/12, PCI-DDA08/12, PCI-DDA02/16,
     PCI-DDA04/16, PCI-DDA08/16, PCI-DAC6702 and PCI-DAC6703.

     On the USB bus, the Measurement Computing USB-3100 series models are
     supported.  These devices all use 16-bit DACs.

     The Acromag model 921x VME modules are specifically detected.  For those
     modules, ssppeecc adds 0x80 to the base address and left shifts 12-bit values
     as required by these modules.  Other VME modules that support DAC registers
     using A16 addressing may also work with the existing support.

     Recognition for other PCI boards, USB devices and VME modules will be added
     in response to user requests.

MOTOR CONFIGURATION

     The controller type for all the above DAC motors should be selected as DDAACC
     on the Motors screen of the configuration editor.  Unit numbers (for
     unit/channel configuration) are assigned starting with unit 0 for the first
     DAC motor controller selected on the Devices screen.  Channel numbers also
     start at zero.

     The second alternate motor parameter screen is important for certain DAC
     configurations.  Type little mm twice to get to that screen.  To select
     particular features for the DAC motor, enter the appropriate strings from
     the list below as "Generic Parameters".  (To enter a string, type a single
     quote ''.  To delete an entry, type ^^DD.)

         ttwweellvvee         - twelve-bit DAC
         ssiixxtteeeenn        - sixteen-bit DAC
         bbiinnaarryy         - binary output
         ttwwooss           - two's complement output
         bbiippoollaarr__22..55    - output from -2.5V to +2.5V
         bbiippoollaarr__55      - output from -5V to +5V
         bbiippoollaarr__1100     - output from -10V to +10V
         uunniippoollaarr__22..55   - output from 0 to +2.5V
         uunniippoollaarr__55     - output from 0 to +5V
         uunniippoollaarr__1100    - output from 0 to +10V

     For the mutually exclusive options, the last one in the list of generic
     parameters will take precedence.  The default data configuration is 16-bit
     binary.  The selection of unipolar versus bipolar and range is only used to
     configure PCI and USB device registers, when such hardware configuration
     options are available.  Selections not supported by the hardware will be
     ignored.

     The first four parameters should not be used with PCI or USB devices.  ssppeecc
     can determine which model is being used by the device IDs and knows what
     output format is associated with a particular model.

     Values in the following table for the steps-per-degree and user-offset
     parameters will put the user units in Volts (the range notation is as
     above):

        RRaannggee         SStteeppss//UUnniitt  SStteeppss//UUnniitt  OOffffsseett
                       ((1122 bbiittss))   ((1166 bbiittss))
        bbiippoollaarr__22..55       881199..1155    1133110077..1155    --22..55
        bbiippoollaarr__55         440099..5555     66555533..5555    --55
        bbiippoollaarr__1100        220044..7755     33227766..7755   --1100
        uunniippoollaarr__22..55     11663388..33     2266221144..33      00
        uunniippoollaarr__55        881199..11     1133110077..11      00
        uunniippoollaarr__1100       440099..55      66555533..55      00

     For example, for a 16-bit DAC with a range of -10 to +10 Volts, to have the
     user units be Volts, set the steps-per-unit parameter to 3276.75 and the
     user offset to -10.

     As of ssppeecc release 5.09.02-2, the following DAC motor controller
     configurations are obsolete.  One of the above interface types needs to be
     chosen instead.  The mode (12- or 16-bit and binary or two's complement
     output) is selected using the generic parameters described above.

         DAC 12-Bit D/A (ISA - binary output)
         DAC 16-Bit D/A (ISA - binary output)
         DAC 12-Bit D/A (ISA - two's complement)
         DAC 16-Bit D/A (ISA - two's complement)

     Likewise, the motor channel controller types DDAACC__BB1122, DDAACC__BB1166, DDAACC__TT1122 and
     DDAACC__TT1166 are obsolete and need to be replaced with DDAACC.

FUNCTIONS

     ssppeecc includes the following functions to access the digital I/O
     capabilities available with some DAC devices.  These functions are
     currently available for the Measurement Computing PCI and USB devices.

     The following options are associated with the operation of a particular
     unit, not with a particular channel.  The mmnnee argument is necessary for the
     syntax of the command and should be the mnemonic or motor number of any of
     the configured channels associated with the particular card or device.

     mmoottoorr__ppaarr((mmnnee,, ""iioo__ccoonnffiigg"" [[,, vvaall]])) - Configures input/output direction on
          the digital I/O lines.  The meaning of vvaall varies with model.  For the
          Measurement Computing USB-3100 series and PCI-DAC670x series, bits set
          in vvaall will be configured as outputs on the digital I/O lines.  On
          power up, all lines on these devices default to inputs.  Also, note,
          the configuration cannot be read from the device.  On start up or
          after a rreeccoonnffiigg be sure to reestablish the configuration before
          accessing the ports.  When the command is issued without an argument,
          ssppeecc will return the current value as set by the user.

          For the Measurement Computing PCI-DDA series cards with 48 digital I/O
          lines, the input/output control is split into four groups of eight and
          four groups of four.  All lines in each group are either input or
          output.  Configuration is accomplished by assigning vvaall the sum of the
          values in the first column in the table below.  Bits set in vvaall will
          set the associated group of lines as outputs.

              vvaall    Output Lines
              0x01   16 - 19
              0x02   8 - 15
              0x04   20 - 23
              0x08   0 - 7
              0x10   40 - 43
              0x20   32 - 39
              0x40   44 - 47
              0x80   24 - 31

          The configuration is readable, and ssppeecc will read the configuration
          for these devices on start up and after a rreeccoonnffiigg.  When the command
          is issued without an argument, ssppeecc will return the current value.

     mmoottoorr__ppaarr((mmnnee,, ""sseett__bbiitt"",, vvaall)) - Set output line corresponding to bit
          number vvaall to high, where bits and lines are numbered starting from 0.

     mmoottoorr__ppaarr((mmnnee,, ""ccllrr__bbiitt"",, vvaall)) - Set output line corresponding to bit
          number vvaall to low, where bits and lines are numbered starting from 0.

     mmoottoorr__ppaarr((mmnnee,, ""ppuutt__bbyyttee"",, vvaall)) - Sets output lines corresponding to the
          bits set in vvaall to high and bits not set in vvaall to low.  For the
          Measurement Computing PCI-DDA series, affects lines 0 to 7.

     mmoottoorr__ppaarr((mmnnee,, ""ppuutt__bbyyttee##"",, vvaall)) - As above, but allows access to bytes 0
          to 5 of the Measurement Computing PCI-DDA series, which has 48 lines
          of digital I/O.  The argument ## is the byte number.

     mmoottoorr__ppaarr((mmnnee,, ""ggeett__bbiitt"",, vvaall)) - Returns 1 or 0 based on whether the input
          line corresponding to bit number vvaall is high or low, where lines and
          bits are numbered starting from 0.

     mmoottoorr__ppaarr((mmnnee,, ""ggeett__bbyyttee"")) - Returns an 8-bit value that reflects the
          setting of the input lines.  A set bit correspond to a high-level on
          the input.  For the Measurement Computing PCI-DDA series, returns the
          state of lines 0 to 7.

     mmoottoorr__ppaarr((mmnnee,, ""ggeett__bbyyttee##"")) - As above, but allows access to bytes 0 to 5
          of the Measurement Computing PCI-DDA series, which has 48 lines of
          digital I/O.  The argument ## is the byte number.

