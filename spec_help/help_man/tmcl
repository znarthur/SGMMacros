.TH "tmcl" "hardware" "12/04/14" "tmcl.rst 6.2  12/04/14 CSS"
.ds HF R
.na
.hy 0
.SH NAME
TMCL \- Trinamic Motion Control Language (TMCL) motor controllers
.\" spec reStructuredText documentation
.
\fP
.PP
.\" @(#)tmcl.rst 6.2  12/04/14 CSS
.
.\" Copyright (c) 2014 Certified Scientific Software
.
.\" 
.
.\" versioninfo: "tmcl" "hardware" "12/04/14" "tmcl.rst 6.2  12/04/14 CSS"
.
.SH "DESCRIPTION"
.rs
.sp
The Trinamic Motion Control Language (TMCL) motor controllers come in
many models, as described at the \fI\%Trinamic website\fP.
The controllers are supported
by \fBspec\fP over serial (RS\-232C), USB and CAN\-bus interfaces.
(The USB interface appears as a serial device to \fBspec\fP.)
.sp
The current \fBspec\fP release has been tested with models TMCM\-1140 and
TMCM\-3110.  The code may need tuning for some other models in the series.
Contact CSS for details.
.SH "CONFIGURATION"
.rs
.sp
Configure the motor controllers on the
\fBD\fPevices screen of the configuration editor as follows, choosing
the CAN bus or serial/USB entry, as appropriate:
.RS 3m
.sp
.nf
.ft CB
Motor and Counter Device Configuration (Not CAMAC)

MOTORS     DEVICE   ADDR <>MODE NUM                      <>TYPE
   YES /dev/tmcl0     <>   9600  10  Trinamic TMCL (Serial|USB)
   YES                 0         16     Trinamic TMCL (CAN bus)
.ft P
.fi
.RE
.sp
The TMCL serial interface is RS\-485, so requires use of an
RS\-232 to RS\-458 converter to connect to the usual serial ports
available on computers.
.sp
The TMCL USB interface identifies itself to the computer as a modem\-type
device.
On \fBLinux\fP, the kernel driver will create special device
nodes named \fB/dev/ttyACM0\fP, \fB/dev/ttyACM1\fP, etc.
The \fBspec\fP \fBudev\fP rules
(see \fB/etc/udev/rules.d/10\-spec_usb.rules\fP) will automatically create
links with corresponding names
\fB/dev/tmcl0\fP, \fB/dev/tmcl1\fP, etc.
Set the baud rate in the MODE column.
The hardware default is 9600.
.sp
If using the CAN\-bus interface, configure the CAN\-bus controller
in the field\-bus section
of the
\fBI\fPnterfaces screen of the configuration editor.
\fBspec\fP allows multiple
field\-bus controllers to be configured with each assigned an index number
starting from zero.
The ADDR field for the TMCL device holds the index number
of the field\-bus controller to be used.
One may need to Use the USB interface temporarily
to set the CAN bus parameters on the TMCL controller to other than
the default (1M bit rate, ID 1).
.sp
On the \fBM\fPotor screen of the configuration editor,
choose \fBTMCL\fP as the controller type.  The TMCL
motor channels require \fBunit/module/channel\fP configuration for each motor
channel.
The \fBunit\fP numbers refer to the entries on the \fBD\fPevices screen
for the controller configuration and start at zero for each type of controller.
That is, the first TMCL controller is unit 0, even if other controller types
appear before it in the listing.
The \fBmodule\fP number is the configured module address.
The \fBchannel\fP numbers run from 0 to one minus the number of motor channels.
Modules are available with 1, 3 and 6 axes.
.sp
The TMCL firmware includes over a hundred parameters.  Some of them are
standard parameters set by \fBspec\fP, but others are associated with
special functions of the controller.  The parameters can be set
using \fBmotor_par()\fP as described below.  The parameters can
also be configured as non\-standard optional parameters using the
configuration editor.
.sp
Parameters that can be stored in EEPROM will be saved to EEPROM
when set using \fBmotor_par()\fP or when configured as nonstandard
optional parameters in the \fBconfig\fP file.
To prevent excessive writing to EEPROM, \fBspec\fP will always preread
the value from EEPROM and only store values that are to be changed.
EEPROM parameters are indicated in the output of the \fB"dump"\fP and \fB"gdump"\fP
commands below with an \fBE\fP in the Access column.
.SH "FUNCTIONS"
.rs
.RS 0m
.HP 5m
."
\fBmotor_par(mne, "reset")\fP
\- 
Restores all settings stored in the EEPROM to their factory defaults.
After using this command, execute a \fBreconfig\fP or restart \fBspec\fP to
synchronize \fBspec\fP\(aqs settings with that of the TMCL.
.HP 5m
."
\fBmotor_par(mne, "gdump")\fP
\- 
Displays the current values of the global parameters for the controller
associated with motor \fBmne\fP.
.HP 5m
."
\fBmotor_par(mne, "dump")\fP
\- 
Displays the current values of the axis parameters for motor \fBmne\fP.
.HP 5m
."
\fBmotor_par(mne, "par#" [, val])\fP
\- 
Sets or returns the value of the axis parameter number
specified by \fB#\fP.
.HP 5m
."
\fBmotor_par(mne, "gpar#" [, val])\fP
\- 
Sets or returns the value of the global parameter number
specified by \fB#\fP.
.HP 5m
."
\fBmotor_par(mne, "PeakCurrent" [, val])\fP
\- 
Sets or returns the absolute maximum current value.
.HP 5m
."
\fBmotor_par(mne, "PowerDownCurrent" [, val])\fP
\- 
Sets or returns the standby current value.
.HP 5m
."
\fBmotor_par(mne, "SE_current_min" [, val])\fP
\- 
Sets or returns the smartEnergy minimum current value.
.HP 5m
."
\fBmotor_par(mne, "SE_current_down" [, val])\fP
\- 
Sets or returns the smartEnergy current down step value.
.HP 5m
."
\fBmotor_par(mne, "SE_hysteresis" [, val])\fP
\- 
Sets or returns the smartEnergy hysteresis value.
.HP 5m
."
\fBmotor_par(mne, "SE_current_up" [, val])\fP
\- 
Sets or returns the smartEnergy current up step value.
.HP 5m
."
\fBmotor_par(mne, "stop_on_stall" [, val])\fP
\- 
Sets or returns the stop\-on\-stall value.
.HP 5m
."
\fBmotor_par(mne, "SE_threshold_speed" [, val])\fP
\- 
Sets or returns the smartEnergy threshold speed.
.HP 5m
."
\fBmotor_par(mne, "SE_current_slow" [, val])\fP
\- 
Sets or returns the smartEnergy slow run current value.
.HP 5m
."
\fBmotor_par(mne, "AccelerationCurrent" [, val])\fP
\- 
Sets or returns the boost current value.
.HP 5m
."
\fBmotor_par(mne, "PowerDownDelay" [, val])\fP
\- 
Sets or returns the power\-down delay time.
.HP 5m
."
\fBmotor_par(mne, "set_pullup", 0|1)\fP
\- 
Switches the pull\-up resistors for all inputs off (0) or on (1).
.HP 5m
."
\fBmotor_par(mne, "set_bit", val)\fP
\- 
Set output port number \fBval\fP to high.
.HP 5m
."
\fBmotor_par(mne, "clr_bit", val)\fP
\- 
Set output port number \fBval\fP to low.
.HP 5m
."
\fBmotor_par(mne, "put_bits"|"set_bits"|"put_byte", val)\fP
\- 
Set output ports that correspond to bits set in
\fBval\fP and clears output ports that correspond to bits
not set in \fBval\fP.
.HP 5m
."
\fBmotor_par(mne, "get_bit", val)\fP
\- 
Returns 0 or 1 based on whether the input port corresponding to bit number
\fBval\fP is high or low.
.HP 5m
."
\fBmotor_par(mne, "get_bits"|"get_byte")\fP
\- 
Returns an 8\-bit value that reflects the setting of
the input ports.
.RE
.SH "CHECKING FOR RESET"
.rs
.sp
It is possible to have \fBspec\fP continuously check whether power
has been cycled to the TMCL by reading back a volatile user register that has
been loaded with a signature value during hardware configuration.
To enable such an automatic check,
set the custom controller parameter \fB"check_interval"\fP in the
hardware \fBconfig\fP file.  If this parameter has a value greater than zero,
\fBspec\fP will check for reset no more frequently than that number of seconds.
If a reset is noted, the controller position will be reset to the last
good position in software.
The check will be performed before moving, reading positions, on the
\fBsync\fP command, and before changing parameters with
\fBmot_par()\fP, but no more often than the specified interval.
When the controller is idle, there is no checking done.
.sp
To set the parameter, go the controller configuration line on the
\fBD\fPevices screen of the configuration editor and type
\fBp\fP to enter the parameter:
.RS 3m
.sp
.nf
.ft CB
Custom Parameters for "Trinamic TMCL (Serial|USB)"

NAME                      VALUE
check_interval            2
.ft P
.fi
.RE
.sp
The above example configures the checking
at no more often than every two seconds.
In the current implementation, the parameter
needs to be separately configured for
each controller for which checks are to be enabled.

