.TH "changes" "spec 6.01 Release Notes" "05/21/14" "chg6_01.rst 6.20  05/21/14 CSS"
.ds HF R
.na
.hy 0
.SH NAME
changes \- highlights of modifications for \fBspec\fP release 6.01
.\" spec reStructuredText documentation
.
\fP
.PP
.\" @(#)chg6_01.rst      6.20  05/21/14  CSS
.
.\" Copyright (c) 2013,2014
.
.\" by Certified Scientific Software
.
.\" 
.
.\" versioninfo: "changes" "**spec** 6.01 Release Notes" "05/21/14" "chg6_01.rst 6.20  05/21/14 CSS"
.
.SH "Notes For Beta Release"
.rs
.sp
Thanks for taking a look at the \fBspec\fP 6.01 beta release.
In additional to the usual assortment of bug fixes and new hardware support,
this \fBspec\fP release contains some noteworthy new features.
Please explore them and report back to CSS any comments, questions,
concerns or suggestions.
.sp
First on the list of new features
is the new interactive plotting utility called \fBsplot\fP.
\fBsplot\fP not only does real\-time plots of scan data, but also can read and display
scans from \fBspec\fP data files.
In addition, \fBsplot\fP has controls to
send commands to \fBspec\fP to position motors
and initiate scans.
Note, though, \fBspec\fP must be run in server mode (use the \fB\-S\fP flag when starting)
in order to send commands
to position motors or do scans from \fBsplot\fP.
.sp
Another added feature is a new built\-in \fBspec_menu()\fP function which provides
interactive menu configuration capabilities.
The standard \fBsetplot\fP, \fBplotselect\fP
and \fBsetshow\fP macros have been replaced with versions that use \fBspec_menu()\fP.
A new \fBmstartup\fP macro replaces much of the configuration
provided by the old \fBstartup\fP macro.
Additional menu\-ized configuration macros will be forthcoming.
.sp
A new set of continuous scan macros, \fBcscan\fP, \fBc2scan\fP, etc.,
performs rapid scans where the counters are
read continuously, while the motors move steadily from the scan starting to ending positions.
.sp
The \fBsplot\fP program is written in Python and requires the PyQt4 and PyQwt5 packages.
A script called \fBinstall_splot_needs\fP is included in the \fBspec\fP distribution, which
will attempt to install the required packages and their dependencies.
One can also install the needed packages using whatever tools the particular \fBLinux\fP
distribution includes.
To use the supplied script, go to the \fBspec\fP distribution directory and type:
.RS 3m
.sp
.nf
.ft CB
sudo ./install_splot_needs [\-y]
.ft P
.fi
.RE
.sp
The \fB\-y\fP flag is optional.
If included, the package installation programs will
assume a yes in response to queries to confirm additional package installation.
The above Python packages do have dependencies, so the package maintenance
programs (\fByum\fP or \fBapt\-get\fP, depending on \fBLinux\fP distribution) will likely download
a dozen or so additional packages.
.sp
Be sure to either start fresh, as in \fBspec \-f\fP, or run the \fBnewmac\fP macro to read
in the updated macros.  Run \fBsetplot\fP to choose whether to use the new \fBsplot\fP
utility, the traditional \fBX11\fP plotting utility, neither or both.
.sp
Please read through the update notes below for a full list of updates.
We at CSS look forward to your feedback.
Thanks!
.SH "May 2, 2014 \- RELEASE 6.01.12 Beta"
.rs
.SH "Include \fBinstall_splot_needs\fP Script In Distribution"
.sp
The \fBinstall_splot_needs\fP script is now included in the distribution.
.SH "Updated \fBsetplot\fP Macro"
.sp
A number of \fBsplot\fP\-related options, such as symbol size and
whether to display a grid have been added to the \fBsetplot\fP macro.
.SH "Fixes For \fBsplot_cntl()\fP Function"
.sp
The \fBsplot_cntl()\fP function has been updated to require semicolons
to separate multiple commands in order to be able to parse the
options associated with the \fB"plot"\fP command.
.SH "Faster \fBsplot\fP Start Up"
.sp
The server connection to the \fBsplot\fP program is now faster on
start up.
.SH "Updated Newport XPS Support"
.sp
The Newport XPS motor controller code will
now show warning messages if a move stops because of
a following error or any of the other events that cause the controller
to put the axis in a disabled state.
Also, the commands to set the motor speed and acceleration are
now done more efficiently.
.SH "April 14, 2014 \- RELEASE 6.01.11 Beta"
.rs
.SH "Fixes For \fBcmesh\fP Macro"
.sp
The string assigned to the \fBHEADING\fP symbol
for the \fBcmesh\fP macro is now correct.
.SH "Fixes and Performance Improvements For the \fBsplot\fP Utility"
.sp
This release contains
fixes and improvements for the \fBsplot\fP utility.
.SH "April 6, 2014 \- RELEASE 6.01.10 Beta"
.rs
.SH "Fix For Drifting Pseudomotors"
.sp
An old problem associated with the internal rounding of motor positions
calculated for pseudomotors from real motors or for real motors from pseudomotors,
such as with a kappa head on a \fBfourc\fP, \fBfivec\fP or \fBpsic\fP diffractometer,
has been addressed.
The rounding could lead to position drift during repetitive movements
in certain configurations.
The \fBget_commanded\fP macro, introduced in the first 6.01 Beta release to
work around the problem, has
been eliminated, as it is no longer needed.
.SH "Updates For \fBspec_menu()\fP"
.sp
The \fB^L\fP redraw command will now redraw the menu using the
current window size if the window size has been changed.
An issue with compressing numerical list items when the window is
too narrow to display the full text has been fixed.
.SH "Fix For \fBnewfile\fP Macro When Opening Existing File"
.sp
An unnecessary warning message about the last scan number in existing data
files with more than nine scans has been fixed.  This bug was introduced with
the reorganization of the \fBnewfile\fP macros in the initial 6.01 Beta release.
.SH "\(dqSignedInteger\(dq Recognized As an ESRF Data Format Data Type"
.sp
Some programs that use the ESRF data format (EDF) use
"SignedInteger" rather than the "SignedLong" to characterize the 32\-bit integer data type.
The \fBfmt_esrf.c\fP file included in the \fBspec\fP distribution that implements
the EDF format for the
\fBfmt_read()\fP and \fBfmt_write()\fP functions now recognizes "SignedInteger"
as a data type.
.SH "Fix For \fBtango_put()\fP"
.sp
An old programming error in the implementation of the \fBtango_put()\fP function
that has only recently manifested on 64\-bit \fBLinux\fP builds has been fixed.
Before the fix, a \fBtango_put()\fP call of a scalar attribute could pass an incorrect
value.
.SH "Support For National Instruments X Series Counter/Timers"
.sp
The National Instruments 6300 X series PCIe and PXIe 6300
boards are now supported
as counter/timers.  The digital I/O capabilities of the boards can also
be used.  The analog\-to\-digital and digital\-to\-analog capabilities are
not currently supported.  See the \fI\%ni63xx\fP help file for details.
.SH "Updates For C400"
.sp
The support for the FMB\-Oxford C400 counter/timer has been updated.
See the new \fI\%c400\fP help file.
.SH "Fixes and Performance Improvements For the \fBsplot\fP Utility"
.sp
This release again contains
various fixes and improvements for the \fBsplot\fP utility.
.SH "March 24, 2014 \- RELEASE 6.01.10 Beta"
.rs
.SH "Refinements and Enhancements To \fBspec_menu()\fP Function"
.sp
The \fBspec_menu()\fP function will now automatically scroll
the menu choices if there are more items than fit in the available space.
Also, item descriptions and values are now compressed or scrolled
to fit a narrow display area.
In addition, a new \fB"toggle"\fP key is available that is
similar to \fB"bit"\fP but is not limited to 52 items.
See the \fI\%spec_menu\fP help file for details.
.sp
The \fBplotselect\fP macro (also used by \fBcounters\fP  has
been updated to use \fB"toggle"\fP instead of \fB"bit"\fP
in the \fBspec_menu()\fP calls to remove the limit on
the number of counters.
.SH "Fix For Counter Mnemonic Check In Configuration Editor"
.sp
A old bug in the configuration editor, where a check for
illegal use of spaces in the counter mnemonics was applied to
strings in row 2 of the scaler screen and not the mnemonics in
column 2, has been fixed.
.SH "March 12, 2014 \- RELEASE 6.01.09 Beta"
.rs
.SH "Fix For \fBarray_copy()\fP"
.sp
A bug, where an "Out of temporary cells" message would
appear after a bit less than 20 calls of the new \fBarray_copy()\fP
function (but only when the first argument was a subarray), has been fixed.
.SH "Fixes and Performance Improvements For the \fBsplot\fP Utility"
.sp
This release contains
various fixes and improvements for the \fBsplot\fP utility.
.SH "March 5, 2014 \- RELEASE 6.01.08 Beta"
.rs
.SH "Fixes For Server/Client Issues"
.sp
Several old issues with \fBspec\fP server/client mode have
been addressed.
A bug where a client may not find a previously open server specified
by host and port number when the client is
already attached to multiple servers has been fixed.
A deadlock hang in server mode that could occur
if a keyboard \fB^C\fP came
while socket connections were being opened from both the main thread and the
server read thread has been eliminated.
.SH "Updates For Continuous Scan Macros"
.sp
Several improvements have been made to the screen display and
plotting during for continuous scan \fBcscan\fP and \fBcmesh\fP macros.
.SH "Updates For \fBsplot\fP Utility"
.sp
Various fixes and improvements for the \fBsplot\fP utility are included.
.SH "February 26, 2014 \- RELEASE 6.01.07 Beta"
.rs
.SH "Fix For \fBspec_menu()\fP Cursor Positioning"
.sp
An issue introduced with the switch to the \fBncurses\fP library that
resulted in the cursor being incorrectly positioned
in the first column for some menu configurations has
been fixed.
.SH "Continuous Scan Macros Now Include a \fBcmesh\fP Macro"
.sp
The continuous\-scan macros have been updated to include a
\fBcmesh\fP scan.
The \fBcmesh\fP scan does a series of single motor on\-the\-fly
scans while an additional motor is stepped through a specified range.
The scan direction is reversed after each on\-the\-fly scan to minimize
overhead time.
.sp
In addition, the \fBcscan\fP count time has been decreased from 3600 seconds
to 999 seconds to accommodate counter/timers with lower maximum count
times.
.SH "Fix For \fBresize_scan_data()\fP"
.sp
A syntax error in the updated definition for the \fBresize_scan_data()\fP macro
(associated with the standard plotting macros)
has been fixed.
The error would only have been seen for scans with more than 4096 points.
.SH "Fix For \fBpl_MIN\fP, \fBpl_MAX\fP, \fBpl_SUM\fP and \fBpl_SUMSQ\fP Definitions"
.sp
The definitions for \fBpl_MIN\fP, \fBpl_MAX\fP, \fBpl_SUM\fP and \fBpl_SUMSQ\fP
have been belatedly updated to match the changes in the
rest of the plotting macros.
.SH "The \fBfmt_read()\fP and \fBfmt_write()\fP Functions Now Work With Subarrays"
.sp
The \fBfmt_read()\fP and \fBfmt_write()\fP commands, used to read and write
binary data in standard and user\-created formats, will now work using
subarray syntax.
Previously, the commands could only work with full data arrays.
.SH "Preliminary Support For C400 Counter/Timer"
.sp
This \fBspec\fP release contains very preliminary support for the C400
counter/timer made by Pyramid Technical Consultants and sold by
FMB\-Oxford.
The \fBspec\fP support is over the serial interface only.
.SH "Preliminary Support For Trinamic TMCL Motor Controllers"
.sp
This \fBspec\fP release contains very preliminary support for the TMCL
line of motor controllers from Trinamic.
Both serial and CAN interfaces are supported.
.SH "February 22, 2014 \- RELEASE 6.01.06 Beta"
.rs
.SH "Fix For Rare Crash In Server Mode"
.sp
When running server mode, there is now
a mutual\-exclusion lock around the code that \fBspec\fP
uses to maintain the list of socket connections.
Previously, data corruption and a crash could sometimes occur
if clients were making and breaking connections to a \fBspec\fP
server that was also making socket connections from the main command loop.
This flaw has been present since the introduction of \fBspec\fP\(aqs
server mode.
.SH "Reversion Of Fix For the \fB@\fP Indirection Operator"
.sp
A fix to address an issue with the \fB@\fP indirection operator and
two\-dimensional associative array elements introduced with the first
6.01 release has been removed, as it caused more problems than it fixed.
.SH "February 14, 2014 \- RELEASE 6.01.05 Beta"
.rs
.SH "Hardware Support For the New Focus 8742 Motor Controller"
.sp
This release includes initial support for the New Focus (Newport)
model 8742 Picmotor Controller/Driver.
The current support is limited to the Ethernet interface.
The USB interface and RS\-458 network support will be added when
needed.
.SH "Epoch Now Saved To Data File With Added Precision"
.sp
The default \fB_loop\fP macro, called at each point of the
standard scans, will now save the epoch value for each scan point
to millisecond resolution.
Previously, the value was saved as an integer.
The value is the difference between
the current time and value of the \fBEPOCH\fP variable.
The value for \fBEPOCH\fP is set to the current time when a new
data file is created and is saved in the data file header.
.SH "Duplicate Port Numbers In \fBsock_par(\(dqshow\(dq)\fP Eliminated"
.sp
The strings printed with \fBsock_par("show")\fP and returned
by \fBsock_par("info")\fP no longer list the same port number
twice after the host.
.SH "January 27, 2014 \- RELEASE 6.01.04 Beta"
.rs
.SH "Fix For Smaract Motor Controller"
.sp
This release has a fix to accommodate the
Smaract MCS motor firmware update which had broken \fBspec\fP\(aqs
presence test for the controller.
.SH "January 25, 2014 \- RELEASE 6.01.03 Beta"
.rs
.SH "Fix For \fBspec_menu()\fP Function"
.sp
This release fixes an issue with the display of values when
using the \fB"min"\fP and \fB"max"\fP menu items in the
\fBspec_menu()\fP function.
.SH "Update For \fBcounters\fP Macro"
.sp
Counter names, in addition to counter numbers and mnemonics,
are now included in the list of counters displayed with the \fBcounters\fP and
\fBshow_counters()\fP macros.
.SH "January 23, 2014 \- RELEASE 6.01.02 Beta"
.rs
.SH "\fBspec_menu()\fP Now Uses the \fBncurses\fP Library"
.sp
The \fBspec_menu()\fP function now uses the \fBncurses\fP library
to draw to the screen, which is much more efficient than
the hand\-coding in the previous version.
.SH "Name\-Space Issues with Moving and Counting Macros Addressed"
.sp
The local variable names used within the \fB_mmov\fP macro (used by
\fBmv\fP, \fBumv\fP, \fBmvr\fP, \fBumvr\fP, \fBmvd\fP and \fBumvd\fP) now all
start with an underscore to lessen the chance of a name conflict
with local definitions in \fBuser_getangles\fP,
\fBuser_premove\fP, \fBuser_postmove\fP, etc.
.sp
In addition, \fBget_angles\fP in the \fBwm\fP and \fB_update()\fP
macros has been replaced with a new macro function called \fBget_angles_func()\fP.
The new macro function
serves as a wrapper to \fBget_angles\fP, insulating local variables that
appear in \fBuser_getangles\fP from symbols used in the calling macros.
A \fBget_counts_func()\fP provides a similar wrapper to \fBget_counts\fP and is
used in the updating counting macro \fBuct\fP.
.SH "Move Macros Now Allow Variables For Motor Mnemonics"
.sp
The \fB_mmov\fP internal macro used by the standard motor\-move macros
(\fBmv\fP, \fBumv\fP, \fBmvr\fP, \fBumvr\fP, \fBmvd\fP and \fBumvd\fP) will now
work if the motor number or mnemonic argument
is a variable.  For example:
.RS 3m
.sp
.nf
.ft CB
for (i = 0; i < 5; i++) mv i 10
.ft P
.fi
.RE
.sp
will move motors 0 through 4.  Similarly:
.RS 3m
.sp
.nf
.ft CB
{ par="phi"; umv par 4; par=th; umv par 1 }
.ft P
.fi
.RE
.sp
will work.  In the first case, the symbol \fBpar\fP is assigned a
string version of the motor
mnemonic.  In the second case, \fBpar\fP is assigned the number value of the mnemonic.
.SH "\fBsplot\fP Updated"
.sp
The version of the \fBsplot\fP utility in this \fBspec\fP release includes fixes and performance
enhancements.
.SH "Fix For Display of Disabled Counters In \fBuct\fP"
.sp
The \fBuct\fP macro has been fixed to properly format the display
when disabled counters are included.
.SH "December 18, 2013 \- RELEASE 6.01 Beta"
.rs
.SH "New \fBsplot\fP Utility"
.sp
A new stand\-alone plotting utility called \fBsplot\fP
is introduced with this \fBspec\fP release.
The \fBsplot\fP program is intended to replace the standard
\fBx11filt\fP window and provide additional functions.
The \fBsplot\fP program uses shared\-memory data arrays
and/or \fBspec\fP server/client protocols to communicate
with the \fBspec\fP process.
.sp
The \fBsplot\fP code is written in Python and the source is
included in the \fBspec\fP distribution.
The current version of \fBsplot\fP requires the \fBPyQwt\fP package.
.sp
Note, the \fBx11filt\fP plotting is still available and can
be used simultaneously with \fBsplot\fP.
Use the \fBsetplot\fP
macro to configure plotting.
.SH "New \fBspec_menu()\fP Function"
.sp
A new function named \fBspec_menu()\fP is available for
creating interactive menus.
See the \fI\%spec_menu\fP help file.
.SH "New \fBsplot_cntl()\fP Built\-In Function"
.sp
To support the tight integration of the new \fBsplot\fP utility with \fBspec\fP,
a new \fBsplot_cntl()\fP function is provided to send and receive \fBsplot\fP messages.
See the \fI\%splot_cntl\fP help file for details.
.SH "\fBarray_plot()\fP Will Now Plot One\-Dimensional Arrays"
.sp
The \fBarray_plot()\fP function has been updated to plot
one\-dimensional data arrays, such as might be read from an MCA device.
For such plots, the \fBx\fP\-axis is set to the point number.
.SH "Updated and Improved Plotting Macros"
.sp
The standard plotting macros have been updated and revised to fix some old
problems and to accommodate the new \fBsplot\fP utility, which is an
alternative to the standard \fBspec\fP \fBx11filt\fP plots.
.sp
The \fBSCAN_D\fP data array now defaults to a shared\-memory object
to accommodate the \fBsplot\fP program.
In addition, \fBSCAN_D\fP now includes data for all the configured
counters at each data point along with \fBHKL\fP values for motor
scans that include geometry motors.
.sp
New \fBscan_info_update()\fP and \fBscan_meta_update()\fP macros have
been worked into the standard macros to fill the shared memory
\fBinfo\fP and \fBmeta\fP region with details of the spec configuration and
scan status for the benefit of \fBsplot\fP.
.sp
Many of the internal macros have been reworked.
If a site\(aqs local macros
use internal macros from the \fBmacros/plotarray.mac\fP file, those local
macros should be checked and possibly revised to maintain compatibility.
.SH "Revised \fBsetplot\fP, \fBplotselect\fP and \fBsetshow\fP Macros Use New \fBspec_menu()\fP"
.sp
The \fBsetplot\fP macro to configure the scan plots,
the \fBplotselect\fP macro to select which counters to plot
and the \fBsetshow\fP
macro to configure motor and counter screen displays now
use the new \fBspec_menu()\fP function.
.SH "New \fBmstartup\fP Macro"
.sp
A new \fBmstartup\fP macro (for menu startup) uses the new
\fBspec_menu()\fP function and
replaces much of the
functionality of the standard \fBstartup\fP macro.
.SH "New Continuous Scan Macros"
.sp
New \fBcscan\fP, \fBc2scan\fP, \fBc3scan\fP and \fBc4scan\fP standard
macros for on\-the\-fly scans are included with this \fBspec\fP release.
With these scans, while the motors move from the start to end positions, the
counters and motor positions are read continuously.
The scan arguments include the start and finish positions for each
motor and the total time for the scan.
The speed of each motor
will be set to approximate that scan time.
An additional
optional argument specifies a sleep interval between each counter
reading.
See the
comments in the \fBcscan.mac\fP source file for details.
.SH "Unlimited Number Of Output Files"
.sp
Previous releases of \fBspec\fP limited the number of open files
(using the \fBopen()\fP, \fBon()\fP or \fBfprintf()\fP functions) to 25.
With this \fBspec\fP release, there is no built\-in limit.
The number
of files that can be opened is only constrained by the
system limits.
.sp
Note, it is not a good idea to run up against the system limit.
A number of commands in \fBspec\fP will cease to work if no more
file descriptors are available from the system.
Make sure that
macros that open files have provision to close the files when
they are no longer needed.
Note also, the \fBspec_par()\fP
\fB"auto_file_close"\fP option can be set to have \fBspec\fP
automatically close files that haven\(aqt been accessed in the specified
time.
See the \fI\%spec_par\fP help file for details.
.SH "New Built\-In \fBOUTFILES\fP Associative Array"
.sp
\fBspec\fP will now maintain an associative array named \fBOUTFILES\fP
that will hold information about all the currently open output files.
\fBOUTFILES\fP is a two\-dimensional array.
The first index is the
name by which the file was opened using \fBopen()\fP, \fBon()\fP or \fBfprintf()\fP.
For the second index \fB"name"\fP, the value is the same as the first
index.
For the second index is \fB"path"\fP, the value is the full path name.
For example:
.RS 3m
.sp
.nf
.ft CB
1048.FOURC> for (i in OUTFILES[]["name"])
1049.more>    printf("%10s %s\en", OUTFILES[i]["name"], OUTFILES[i]["path"])
      dlog /private/tmp/dlog
     data1 /private/tmp/data1
       tty /dev/tty
 /dev/null /dev/null
.ft P
.fi
.RE
.sp
or
.RS 3m
.sp
.nf
.ft CB
1053.FOURC> p OUTFILES[DATAFILE]["path"]
/private/tmp/data1
.ft P
.fi
.RE
.sp
Note, the special built\-in name \fB"pipe"\fP is not
included in \fBOUTFILES\fP.
The special built\-in name \fB"/dev/null"\fP includes
the full path in both \fB"name"\fP and \fB"path"\fP to work with
the standard macros that always refer to that special file by the full path name.
.SH "Support For 64\-Bit Integer Data Arrays"
.sp
New keywords \fBlong64\fP and \fBulong64\fP are available to create 64\-bit signed
and unsigned integer data arrays, respectively.
The 64\-bit arrays can be used in all contexts that accept array data types.
Note, though, \fBspec\fP will only work with
52 bits of precision in some contexts, since the internal code uses double\-precision
floating point format for many operations associated with \fBspec\fP user\-level
symbols.
(Double floats use 52 bits for the significand
and the remaining 12 bits for sign and exponent).
The \fBspec_shm.h\fP and \fBspec_server.h\fP files
included in the \fBspec\fP distribution have been updated to include definitions
for 64\-bit data\-array data types.
.SH "New Variable Argument Feature For Macro Functions"
.sp
New local variables now exist within macro functions.
The variables are named \fBargc\fP, \fBarg0\fP and possibly
\fBarg1\fP, \fBarg2\fP, etc., and represent
parameters used in the invocation of the macro
function that were not declared in the definition of the macro function.
The variable \fBargc\fP is a count of the additional parameters.
The variable \fBarg0\fP is a string with the name of the macro function.
The additional variables \fBarg1\fP, \fBarg2\fP, etc., contain
the values of the additional arguments and will have the same
data type \-\- number, string, associative array or data array \-\- as
the parameter in the call to the macro function.
.sp
Note, \fBargc\fP and the \fBarg#\fP parameters only apply to arguments
after the declared arguments.
For example, consider this macro function:
.RS 3m
.sp
.nf
.ft CB
def test(par1, par2) \(aq{ ... }
.ft P
.fi
.RE
.sp
When called as
.RS 3m
.sp
.nf
.ft CB
test(1, 2, 3, 4)
.ft P
.fi
.RE
.sp
the value of \fBargc\fP will be 2, \fBarg1\fP will be 3 and \fBarg2\fP will be 4.
.sp
If a parameter or local variable of the same name is used
in the definition of the macro function,
that instance
will override these automatically created \fBargc\fP/\fBarg#\fP variables.
.SH "New Filename Completion For \fBdo\fP and \fBqdo\fP Macro Commands"
.sp
Although \fBdo\fP and \fBqdo\fP are defined as standard user\-level macros,
filename completion code has been added to automatically include
directory paths contained in the global variable \fBDO_DIR\fP.
Macro support for path lists in \fBDO_DIR\fP was added to the standard macros in
\fBspec\fP release 6.00.05.
Filename completion is available when \fBspec\fP is linked with the \fBlibedit\fP or
\fBreadline\fP libraries.
.SH "New \fBinput()\fP Option To Read Arrow Keys and Forward Delete"
.sp
The \fBcbreak\fP mode for \fBinput()\fP now has an option
to return special codes when arrow keys or the forward\-delete key are pressed.
Type \fBh input\fP at the \fBspec\fP prompt
or see the \fI\%funcs\fP help file for details.
.SH "New \fBIS_SERVER\fP Built\-In Variable"
.sp
A new built\-in variable named \fBIS_SERVER\fP will be nonzero
if \fBspec\fP is running in server mode (invoked with the \fB\-S\fP option).
When in server mode, \fBIS_SERVER\fP will be set to the port number
on which the \fBspec\fP server is listening.
.SH "New \fBHOSTNAME\fP Built\-In Variable"
.sp
A new built\-in variable named \fBHOSTNAME\fP will be set to the
hostname of the computer running \fBspec\fP.
.SH "New Flexibility For Identifying \fBspec\fP Server"
.sp
The configuration of \fBspec\fP server motors and counters and
the built\-in functions for communicating with a \fBspec\fP server
all require an
argument of the form \fBhost:port\fP or \fBhost:spec\fP to
identify the host and the port on which the server is listening.
With this new release, if the \fBhost\fP part of the string is
missing, \fBspec\fP will use \fB"localhost"\fP.
In addition, it is now allowed to mix references to the same server
by port number and by \fBspec\fP process name.
See the \fI\%server\fP help file for details.
.SH "Improvements For \fBremote_stat()\fP"
.sp
\fBspec\fP will now include a check
for pending connections to \fBspec\fP servers
during a call of \fBremote_stat()\fP, making it possible
for a loop that tests the return value of \fBremote_stat()\fP
to determine when a server connection comes up.
.sp
Also, \fBremote_stat()\fP will no longer return
\fB"lost"\fP for a previously open connection after a new call of
\fBremote_par(..., "connect")\fP for the same host is made.
.SH "Length Of Allowed Input Line Increased"
.sp
The maximum length of input records has been increased from 512 to
4096 bytes.
.SH "Fix For Detection of Invalid Octal Values In Strings"
.sp
An old issue where strings starting with the characters
\fB"08"\fP or \fB"09"\fP would evaluate to zero in certain contexts,
in particular in conditional statements, has been fixed.
The problem was that the C code improperly identified the
strings as octal constants due to the leading zero, but
a scan for an octal number would return a zero value since
8 and 9 are not valid octal digits.
.SH "Fix For \fBdate()\fP Glitch"
.sp
A bug in the \fBdate()\fP implementation where
two successive values for the time of day displayed
using the format \fBdate("%s.%.6")\fP could result in anomalous values
such as:
.RS 3m
.sp
.nf
.ft CB
1382650482.99999905 1382650482.00001097,
.ft P
.fi
.RE
.sp
where the second invocation shows an earlier time than the first,
has been fixed.
Note, a more
straightforward way to obtain the same information is using
the \fBtime()\fP function, which never had such an issue.
.SH "Fix For \fBdecode()\fP Of Two\-Dimensional Associative Arrays"
.sp
The built\-in \fBdecode()\fP function will now properly decode
two\-dimensional associative arrays.
See the \fI\%encode\fP
help file for details on \fBencode()\fP and \fBdecode()\fP.
.SH "Fix For \fBx11filt\fP Retained\-Pixmap Mode Text Garbling"
.sp
The \fBx11filt\fP plotting utility can use either backing store
or a retained\-pixmap to maintain content that is drawn when
the plot window itself is not visible.
Backing store is
a server feature.
The retained pixmap is implemented
within the \fBx11filt\fP code.
The default mode for \fBx11filt\fP is to use backing store, but
on some platforms the default X server configuration has
backing store disabled.
In that case, \fBx11filt\fP uses the
retained pixmap.
An old (twenty\-one year) bug associated with writing labels
to the \fBx11filt\fP retained\-pixmap buffer that resulted in
garbled labels when a window becomes visible that had been updated while hidden
has been fixed.
.SH "New \fBCP_FILTER_CMD\fP Option For \fBcplot_plot\fP Macro"
.sp
The standard \fBcplot_plot\fP macro now recognizes a \fBCP_FILTER_CMD\fP global
variable.
If it exists, the \fBcplot_plot\fP macro will evaluate
its string value to create a dynamic \fBCP_FILTER\fP command.
For example, the following will produce \fBpdf\fP files using the
\fBC\-PLOT\fP \fBpdf\fP filter containing the current scan number as
part of the \fBpdf\fP filename:
.RS 3m
.sp
.nf
.ft CB
CP_FILTER_CMD = \(aqsprintf("pdf scan_%04d.pdf", SCAN_N)\(aq
.ft P
.fi
.RE
.sp
See the macro source file \fBmacros/cplot.mac\fP in the \fBspec\fP distribution
for implementation details.
.SH "New \fBCOUNT_FMT_MAXCH\fP Option For Updated Counting"
.sp
The number of counters displayed while doing an updated count with
the \fBuct\fP macro can be limited to the number of counters in the
new global variable \fBCOUNT_FMT_MAXCH\fP.
If the value is zero, all the counters will be displayed.
The \fBsetshow\fP macro will prompt for a value.
.SH "\fBnewfile\fP Macro Updated and Reorganized"
.sp
The standard \fBnewfile\fP macro has been split into pieces.
A new \fBnewfile_head()\fP macro function creates the file header.
A new \fBnewfile_f()\fP macro function handles most of the task of
creating the new data file.
The \fBchk_file\fP shell utility
test on whether an existing file begins with the standard
header has been replaced with calls of built\-in \fBspec\fP functions
that perform the same test.
The \fBnewfile\fP macro itself
handles parsing arguments and calls \fBnewfile_f()\fP.
The
\fBnewfile_f()\fP macro is also called from the new \fBmstartup\fP
menu startup macro.
See the macro source file \fBmacros/file.mac\fP in the \fBspec\fP distribution
for implementation details.
.SH "Fix For Drifting Positions In Motor Scans In Some Pseudo Motor Configurations"
.sp
A new \fBget_commanded\fP macro, which is defined as \fBread_motors(0x10)\fP
(that puts each motor\(aqs last commanded position into the \fBA[]\fP array)
has been added to
\fB_ascan\fP and \fBmesh\fP macros before motor positions are calculated for
each new scan point.
This addition to the macros addresses a problem with real motor drift
while scanning related pseudo motors in certain configurations.
.SH "New Serial Baud Rate and Other Fixes"
.sp
\fBspec\fP now recognizes a baud rate or 600000 for serial
devices.
In addition, some issues with the code to set
certain non\-standard baud rates
(7200, 14400 and 28800) on \fBLinux\fP have been addressed.
.SH "Updated Behavior For Several Motor Controllers"
.sp
An update to the motor control error handling will now
abort the move if there is an error
during the \fB"prestart_one"\fP and \fB"prestart_all"\fP
phase of sending the commands.
Only a handful of motor controllers are affected by this change,
namely
the Oriel 18092,
Advanced Control System MCU, Missouri Research Reactor motors, MicroMo MVP\-2001,
New Focus Picomotor 875x, Newport XPS, SPring\-8 Equipment Manager motors, along
with the macro hardware motor support.
In practice, one is not likely to see any difference in behavior with the real
motor controllers.
However, the updated behavior may be useful
with the macro hardware motor
support.
.SH "TANGO Support For 64\-Bit Integer Data Types"
.sp
\fBspec\fP now supports the DEVVAR_LONG64ARRAY and DEVVAR_ULONG64ARRAY as input
and output types for \fBtango_io()\fP, as input types for \fBtango_get()\fP and
as output types for \fBtango_put()\fP.
.SH "Support For SmarAct SCU Motor Controllers"
.sp
\fBspec\fP now supports the SmarAct SCU model motor controller in addition to
the MCS model already supported.
See the \fI\%smaract\fP help file for details.
.SH "Updates For the Newport XPS Motor Controllers"
.sp
Previously, \fBspec\fP would automatically send the home\-search
command to a Newport XPS motor group if the XPS
reported that motors in the group were in the not\-referenced state.
When an XPS motor is in the not\-referenced state, nothing can be done
with the motor until the home\-search command has been sent.
This \fBspec\fP release changes the default behavior so that the
home\-search command is not sent automatically.
Instead,
a message is printed during hardware configuration or
when a move is attempted telling the user that the \fBhome\fP
command must be run.
.sp
The previous default behavior of automatic home\-search can
be restored on a controller\-wide basis by adding the
non\-standard optional controller parameter \fB"auto_home"\fP
to the hardware configuration file.
A value of 1 for the
parameter will allow \fBspec\fP to send the home\-search
command during hardware configuration.
A value of 2 will
allow \fBspec\fP to send the home\-search command any time
it is needed.
.SH "Improved Abort Handling for ACS MCB\-4B Motor Controller"
.sp
A problem with the ACS MCB\-4B motor controller, where
communication errors occurred after sending a motor\-stop
command associated with a \fB^C\fP user abort, has been
addressed.
\fBspec\fP now gives the controller motors time to decelerate
before sending a command after sending the stop command,
as the controller firmware appears to require such a delay.

