.TH "kl2000" "hardware" "08/01/12" "kl2000.rst 6.1  08/01/12 CSS"
.ds HF R
.na
.hy 0
.SH NAME
kl2000 \- Newport MM2000/MM3000 motor controller
.\" spec reStructuredText documentation
.
\fP
.PP
.\" @(#)kl2000.rst       6.1  08/01/12  CSS
.
.\" Copyright (c) 1992,1993,1995,1996,2000,2001,2012
.
.\" by Certified Scientific Software
.
.\" 
.
.\" versioninfo: "kl2000" "hardware" "08/01/12" "kl2000.rst 6.1  08/01/12 CSS"
.
.SH "DESCRIPTION"
.rs
.sp
The Newport (formerly Klinger) MM2000 and MM3000 motor
controllers are supported by \fBspec\fP on both RS\-232C and GPIB interfaces.
The MM2000 is also supported on the ISA bus interface.
On the serial interface, \fBspec\fP supports the daisy chaining
available on the MM2000 and MM3000 controllers.
All these controllers can be used both with DC motors
(with encoders) and with the 1.5M\-type stepper motors.
.sp
The controller is selected in the \fBconfig\fP file as
.sp
.RS 4m
.nf
\fBRS_MM2000 = device_name baud_rate number_of_motors\fP
\fBRS2_MM2000 = device_name baud_rate number_of_motors\fP
\fBGP_MM2000 = gpib_address number_of_motors\fP
\fBPC_MM2000 = base_address number_of_motors\fP
.fi
.sp
.RE
.sp
depending on the interface being used.
The second example above selects the daisy\-chained RS\-232C configuration.
.sp
When running the configuration editor, switch to the device configuration
screen to select the appropriate interface.  On the motor screen, select the
\fBMM2000\fP or \fBMM2000_E\fP controller type for each motor to be controlled.
The latter choice indicates encoders are being used.
.sp
By default, motors are automatically
assigned to the controller channels in the same order
they appear on the motor screen.
If there is more than one controller, the channels are assigned
to the controllers in the order in which the controllers appear
on the motor device screen.
Also available is the new nonconsecutive channel assignment feature that has
been implemented for selected motor controllers.
Controller unit and motor channel numbers can
be selected and assigned on the second line
of the motor configuration screen in any order.
Not all channels need to be assigned.
.sp
When using the daisy chain feature, if automatic channel numbering is
selected in the configuration file,
the controller daisy\-chain addresses must be assigned consecutively starting
with address 0 using either the controller dip switch, the controller front
panel menu or by sending a command over the serial interface.
If the unit/channel configuration is used, the daisy\-chain addresses
will be derived from the channel number.
.SH "PARAMETERS"
.rs
.sp
\fBspec\fP allows a number of additional parameters to be set
in the configuration file and by the \fBmotor_par()\fP function
for these controllers.
Use the configuration editor to establish the long\-term values of
the parameters in the configuration file.  Use
\fBmotor_par()\fP to make changes to the parameters
that only are in effect during a particular \fBspec\fP session.
To set the parameters from the configuration editor, use the \fBm\fP
command from the main motor screen to access the optional\-parameter screens.
.sp
The following parameters are associated with DC motor operation.
The two\-letter command sent to the motor controller associated
with each parameter is given in parenthesis.
.RS 0m
.HP 5m
."
\fBmotor_par(motor, "dc_proportional_gain" [, value])\fP
\- 
If \fBvalue\fP is given, sets the proportional gain,
otherwise returns the current value. (\fB"KP"\fP)
.HP 5m
."
\fBmotor_par(motor, "dc_derivative_gain" [, value])\fP
\- 
If \fBvalue\fP is given, sets the derivative gain (or
damping constant), otherwise returns the current value. (\fB"KD"\fP)
.HP 5m
."
\fBmotor_par(motor, "dc_integral_gain" [, value])\fP
\- 
If \fBvalue\fP is given, sets the
integral gain, otherwise returns the current value.  (\fB"KI"\fP)
.HP 5m
."
\fBmotor_par(motor, "dc_integration_limit" [, value])\fP
\- 
If \fBvalue\fP is given, sets the
integrator limit, otherwise returns the current value.  (\fB"IL"\fP)
.HP 5m
."
\fBmotor_par(motor, "dc_sampling_interval" [, value])\fP
\- 
If \fBvalue\fP is given, sets the
derivative sampling interval, otherwise returns the current value.
(\fB"DS"\fP)
.HP 5m
."
\fBmotor_par(motor, "dc_following_error" [, value])\fP
\- 
If \fBvalue\fP is given, sets the
following\-error threshold, otherwise returns the current value.
(\fB"FE"\fP)
.RE
.sp
To set the gain for the \fBtth\fP motor, for example, use
.sp
.RS 4m
\fBmotor_par(tth, "dc_proportional_gain", 1000)\fP
.RE
.sp
The function
.sp
.RS 4m
\fBmotor_par(tth, "dc_proportional_gain")\fP
.RE
.sp
returns the current value of the \fB"dc_proportional_gain"\fP parameter.
.sp
Another \fBmotor_par()\fP parameter is:
.RS 0m
.HP 5m
."
\fBmotor_par(motor, "slop" [, value])\fP
\- 
If \fBvalue\fP is given, sets a threshold value in steps,
below which \fBspec\fP suppresses position discrepancy messages
when \fBspec\fP and the motor controller disagree about motor position,
otherwise returns the current value.
.RE
.RE
.SH "COMMAND PASS THROUGH"
.rs
.sp
Command pass through is available using the following:
.RS 0m
.HP 5m
."
\fBmotor_par(motor, "send", cmd)\fP
\- 
Sends the string \fBcmd\fP to the MM2000 channel associated with \fBmotor\fP.
For example, set \fBcmd\fP to \fB"SB1,3,8"\fP to set output bits 1, 3 and 8.
.HP 5m
."
\fBmotor_par(motor, "read", cmd)\fP
\- 
Sends the string \fBcmd\fP to the MM2000 channel associated with
\fBmotor\fP, as above, and returns a string containing the response.
.RE
.SH "JOYSTICK"
.rs
.sp
To enable joystick control for a particular motor, use the command
.sp
.RS 4m
\fBmotor_par(motor, "joy_on", channel)\fP
.RE
.sp
where \fBmotor\fP is the motor number and \fBchannel\fP
is the channel number, as explained
in the Klinger manual for the \fBJY\fP command.
To disable joystick control, use the command
.sp
.RS 4m
\fBmotor_par(motor, "joy_off")\fP
.RE
.sp
Not only does the \fB"joy_on"\fP command send the proper joystick
enable codes to the MM2000/MM3000, but it also changes
behavior within \fBspec\fP.
In particular, position discrepancies between \fBspec\fP and the controller are
automatically corrected in favor of the controller for all commands, except
for the \fBsync\fP and \fBreconfig\fP commands.
(A message is printed, though, when the position correction is made.)
In addition, when joystick control is enabled,
the motor controller is queried
to read the current position for the motor on all
\fBgetangles\fP commands, not just when the motor is active,
as is the joystick\-disabled case.
.sp
Suggested macros for controlling the joystick are:
.RS 3m
.sp
.nf
.ft CB
def joy_on \(aq
    if ($# != 2) {
            print "Usage:  joy_on motor channel"
            exit
    }
    _check0 "$1"
    motor_par($1,"joy_on",$2)
\(aq

def joy_off \(aq
    if ($# != 1) {
            print "Usage:  joy_off motor"
            exit
    }
    _check0 "$1"
    motor_par($1,"joy_off")
\(aq
.ft P
.fi
.RE
.sp
To make things even easier, you could define macros such as
.RS 3m
.sp
.nf
.ft CB
def on_joy \(aq
    joy_on tth 1
    joy_on th  2
    joy_on chi 3
    joy_off phi 4
\(aq
.ft P
.fi
.RE
.sp
and
.RS 3m
.sp
.nf
.ft CB
def off_joy \(aq
    joy_off tth
    joy_off th
    joy_off chi
    joy_off phi
\(aq
.ft P
.fi
.RE
.SH "LIMITATIONS"
.rs
.sp
The MM2000/MM3000 motor controller only allows
its internal position registers to be set to zero.
Thus the \fBchg_dial()\fP function (used by the \fBset_dial\fP macro)
will not accept nonzero position arguments.  Similarly, if there is a
motor position discrepancy between \fBspec\fP and the controller, if you choose
to change the controller register position to agree with \fBspec\fP
and if the \fBspec\fP dial position is not zero,
the \fBspec\fP dial position will instead be changed to agree with the
controller, and the the \fBspec\fP
\fBoffset\fP parameter will be changed
to keep the same \fBspec\fP user\-units position.
.SH "VERSION"
.rs
.sp
The above description describes the MM3000 firmware version 2.3.

