.TH "changes" "\fBspec\fP 2.14 Release Notes" "08/01/12" "chg2_14.rst 6.1  08/01/12 CSS"
.ds HF R
.na
.hy 0
.SH NAME
changes \- highlights of modifications for \fBspec\fP release 2.14
.\" spec reStructuredText documentation
.
\fP
.PP
.\" @(#)chg2_14.rst      6.1  08/01/12  CSS
.
.\" Copyright (c) 1990,1991,1992,1995 Certified Scientific Software
.
.\" 
.
.\" versioninfo: "changes" "**spec** 2.14 Release Notes" "08/01/12" "chg2_14.rst 6.1  08/01/12 CSS"
.
.SH "DESCRIPTION"
.rs
.sp
These notes summarize many of the modifications made for \fBspec\fP release 2.14,
as of January 8, 1991.
.SH "INCOMPATIBILITIES"
.rs
.sp
Release 2.14 includes a number of changes that make certain
prior usages obsolete.
You must modify any home\-grown macros to take into account the
following changes:
.IP 1. 3
The customized scan output hooks involving the macros
\fBPlabel\fP,
\fBPout\fP,
\fBFlabel\fP
and
\fBFout\fP
have had the position of the space character changed from
before each string in the label to after each string.
You must edit your macros if you assign values to any of
the above or if you have written new scans based on
the standard scan macros.
.IP 2. 3
The argument of the
\fBwait()\fP
function, as programmed,
did not match the documentation.
The documentation stated that bit
1 represented motor status and bit 2 represented counter status.
As programmed, these bit assignments were reversed.
The program has been changed to match the documentation.
You must edit your macros if you call the function
\fBwait()\fP
directly.
.IP 3. 3
The
\fBconfig\fP
file now contains information describing each scaler\(aqs label,
mnemonic, function and hardware type.
The scaler\-name array
\fBS_NA[]\fP
no longer exists.
New string functions,
\fBcnt_name(i)\fP
and
\fBcnt_mne(i)\fP,
return the name and mnemonic of scaler
\fBi\fP.
You must edit your macros if you make any reference to the symbol
\fBS_NA[]\fP.
.IP 4. 3
The value returned by the
\fBgetcounts\fP
command in
\fBS[sec]\fP
is now in seconds, rather than milliseconds.
You must edit your macros if you divide
\fBS[0]\fP
by 1000 anywhere.
.IP 5. 3
The
\fByesno\fP
macro has been replaced by a
\fByesno()\fP
function.
You must edit your macros if you invoke
\fByesno\fP
anywhere.
.SH "USER INTERFACE"
.rs
.sp
The
\fBhistory\fP
command now takes a numerical argument that limits the number
of the previous commands displayed.
In addition, if the the argument is negative, the recalled commands
are displayed in reverse order.
The number of input lines saved for history recall has been increased
from 50 to 100.
.sp
High resolution scan plots are how available with VGA, EGA and Hercules
graphics adapters on System V/386 and
VENIX 286 platforms; with the X Window System Version 11 on
PS/2 AIX, Ultrix and SunOS; and with SunView on SunOS.
You should set a
\fBGTERM\fP
environment variable to
\fBvga\fP,
\fBega\fP,
\fBcga\fP,
\fBherc\fP,
\fBx11\fP
or
\fBsun\fP
before invoking \fBspec\fP
to select the appropriate graphics parameters.
The
\fBsetplot\fP
macro lets you select whether or not to use high resolution
plotting and
if so, how to depict the data (lines, points, dots).
.sp
Text\-mode plotting has been moved from macros to built\-in C code.
The plots are drawn
much faster and are now available with any terminal described
by the system terminal database.
The names of the macros used to do the
screen plots and the real time plots
(\fBsplot\fP
and
\fBrplot\fP)
have not changed, although terminal dependent macros such as
\fBansi_rplot\fP
and
\fBvt52_plot\fP
have been eliminated.
.sp
The built\-in symbols
\fBROWS\fP
and
\fBCOLS\fP
contain the screen size used for drawing the plots (and
displaying help files).
These are initially taken from the environment variables
\fBLINES\fP
and
\fBCOLUMNS\fP,
or if unset, from the
system terminal database entry described by your
\fBTERM\fP
environment variable.
You may reassign values to the variables if you
change your screen size (for example on an workstation
using windows).
.sp
\fBspec\fP now
prevents multiple instances of the program being run
using the same state files.
.sp
When \fBspec\fP is run from pseudo ttys (for example, on an X Windows workstation
or over the network), the state file is associated with the name
\fBttyp#\fP,
rather than the actual name of the pseudo tty.
.sp
You can now create a state not associated with any tty, by
starting \fBspec\fP with the
.BI \-T " name"
command line option.
.sp
A new variable,
\fBCWD\fP,
keeps track of the current working directory of the running program.
The
\fBpwd\fP
macro has been changed accordingly to simply print the value of
\fBCWD\fP,
rather than spawn a subshell to execute the command.
.sp
The help utility has been entirely rewritten.
Help files are formatted on the fly to fit the size of the screen or
workstation window.
In addition, standout mode is used to highlight text that would be
printed in an alternate font.
.sp
The number of nested command files allowed has been increased from five
to eight.
.SH "MACROS"
.rs
.sp
If a macro named
\fBbegin_mac\fP
is defined, it will be run after the startup command files are
read but before input is read from the keyboard.
.sp
The motor scans
\fBascan\fP,
\fBa2scan\fP
and
\fBa3scan\fP
have been been rewritten in terms of a general macro
called
\fB_ascan\fP
that scans an arbitrary number of motors.
An
\fBa4scan\fP
that calls
\fB_ascan\fP
is now also provided, as is a
\fBd4scan\fP.
These scans introduce a number of new global variables
(\fB_nm\fP, \fB_m[]\fP, \fB_f[]\fP, \fB_s[]\fP, \fB_d[]\fP)
that you should avoid using in your own macros.
.sp
A new standard macro called
\fBchk_beam\fP
has been inserted into the macros that do normal, updated and
powder\-mode
counting during scans.
In general, these macros are now written along the lines of:
.RS 3m
.sp
.nf
.ft CB
for (;;) {
    count_func(count_time)
    waitcount
    getcounts
    chk_beam
}
.ft P
.fi
.RE
.sp
where
\fBcount_func()\fP
is
\fBtcount()\fP,
\fBmcount()\fP,
etc.
By default,
\fBchk_beam\fP
is defined as
\fBbreak\fP,
meaning the infinite loop is immediately exited after counting.
However, you can define
\fBchk_beam\fP
to not break out of the loop
unless the monitor counts, for example, are above some
threshold.
Such a feature can be useful at a synchrotron where beam dumps or
fills that occur during unattended data taking could result in many
useless scans.
See the
\fBcount.mac\fP
macro source file for an example of a complete
\fBchk_beam\fP
macro.
.sp
A new option to the
\fBsetscans\fP
macro asks you to enter a value for a sleep (or settle) time
to delay before counting at each point in a scan.
The value is stored in the global variable
\fB_sleep\fP
(which you can also change simply by assigning it a value).
The scans all
execute a
\fBsleep(_sleep)\fP
call before counting.
Set
\fB_sleep\fP
to zero for no delay.
.sp
The macro that continues aborted scans,
\fBscan_on\fP,
now accepts an argument to adjust the current point
number in the scan (except for mesh scans).
For example,
\fBscan_on \-1\fP
redoes the previous point, while
\fBscan_on 3\fP
skips the next three points.
Giving a very large number will force the end\-of\-scan plots, etc.,
without taking any more data points.
.sp
A new set of macros lets you define a set of scans do be done together.
The scans must all be of the same type and must be in terms of a
single scan variable.
You may however define regions, point densities and count times
differently for each scan.
The
\fBsetreg\fP
macro (for
\fBset regions\fP)
asks you to configure each scan.
The
\fBdoreg\fP
macro executes the group of scans.
A number of global variables beginning with the characters
\fB_reg_\fP
have been introduced to keep track of the region scan configuration.
.sp
The
\fBct\fP
macro, if aborted with a
\fB^C\fP,
will now execute a
\fBcleanup\fP
macro
that reads the scalers and shows the counts that were accumulated
before the
\fB^C\fP.
.sp
The names
\fBdet\fP
and
\fBmon\fP
are no longer built into the macros, since scaler mnemonics may now be
set to arbitrary values in the
\fBconfig\fP
file.
.sp
The
\fBshow_cnts\fP
and
\fBuct\fP
macros have been rewritten to show the accumulated counts in all
the configured scalers.
.sp
The
\fB_head\fP
and
\fB_loop\fP
macros have been modified to include counts from
all configured scaler channels
in the data file.
Previously, only the detector and either monitor or seconds
scaler contents were saved for each point.
.sp
The
\fBMON_RATE\fP
global variable has been eliminated from the standard macros
due to lack of interest.
.sp
Many of the standard macros involving motor positions have had
hooks inserted to support a feature involving customizable position
\fBunits\fP.
This feature is not currently available to most users of \fBspec\fP, and
the changes will not affect the functionality of any of the macros.
However, the names
\fB_units\fP,
\fB_setfmts\fP,
\fB_suffix\fP,
\fBP\fP,
\fBU\fP,
\fBUL\fP,
\fBUNITS\fP,
\fBPFMT\fP
and
\fBVFMT\fP
are used by this feature and are henceforth reserved for use by the
standard macros.
.SH "FUNCTIONS"
.rs
.sp
The function
\fBmotor_par()\fP
can now return several parameters from the
\fBconfig\fP
file.
Also, the motor velocity and the number of steps to use for backlash
can be set from user level.
See the
\fBmotors\fP
help file for details.
.sp
A new function,
\fBca_fna()\fP,
allows arbitrary CAMAC access.
See the
\fBfuncs\fP
help file for details.
At present, it is up to the user to avoid addressing slots
that are being used for motor control or counting.
.sp
A new function
\fBgpib_poll()\fP,
returns the serial poll status of a device on the GPIB bus.
This function is currently only available with National Instruments
GPIB controllers.
See the
\fBgpib\fP
help file for details.
.sp
New functions,
\fBcnt_name(i)\fP
and
\fBcnt_mne(i)\fP,
return the name and mnemonic of scalers as set in
the
\fBconfig\fP
file.
.sp
A new function,
\fBplot_cntl(mode)\fP,
is used to control the built\-in plotting features.
The argument
\fBmode\fP
is a string of comma\- or space\-delimited options.
See the
\fBfuncs\fP
help file for details.
.sp
A new function
\fBtty_cntl(mode)\fP
is used to send terminal\-specific special sequences to the screen.
The argument
\fBmode\fP
is a string.
Recognized strings are
\fB"ce"\fP
(clear to end of line),
\fB"cl"\fP
(clear screen and home cursor),
\fB"cd"\fP
(clear to end of display),
\fB"so"\fP
(begin standout mode),
\fB"se"\fP
(end standout mode)
and
\fB"ho"\fP
(home cursor).
.sp
A new function
\fBtty_move(x, y [, s])\fP
positions the cursor at column
\fBx\fP
and row
\fBy\fP
of the screen, and prints the optional string
\fBs\fP
at that position.
The upper\-left corner of the screen is column 0 and row 0.
If
\fBx\fP
or
\fBy\fP
are negative, the position is taken from the left or bottom of the screen.
Output written by this function goes only to the
\fBtty\fP
device, regardless of what devices have been turned on with the
\fBon()\fP
function.
.sp
A new function
\fBplot_move(x, y[, s])\fP
works just as
\fBtty_move()\fP,
above,
when high\-resolution graphics mode is off.
When high\-resolution graphics mode is on,
\fBplot_move()\fP
draws to the graphics screen.
.sp
A new function
\fBplot_range(xmin, xmax, ymin, ymax)\fP
sets the ranges of the internally generated plots.
If any of the arguments is the string
\fB"auto"\fP
the value is determined by the appropriate value from the current points.
.sp
A new function
\fBplot_pts(xcol, start, npts)\fP
plots the current data from the built\-in plot array either on the screen
if graphics mode is off, or on the high\-resolution graphics screen or window
if graphics mode is on.
The plot
starts with point number
\fBstart\fP
and uses
\fBnpts\fP
points.
The
\fBxcol\fP
parameter will be used in the future, when the number of values stored for
each point is increased, to designate which value to use for
\fBx.\fP
.sp
A new function
\fByesno([ s, ] x)\fP
prompts the user with the optional string
\fBs\fP,
for a yes or no response.
The function returns 1 if the user answers with a string beginning with
\fBY\fP,
\fBy\fP
or
\fB1\fP.
The function returns
\-1 if the user answers with a string beginning with something else.
The value of
\fBx\fP
is returned if the user simply enters a return.
Usage might be,
.sp
.RS 4m
\fBflag = yesno("Show updated moving", flag)\fP
.RE
.sp
which produces (if
\fBflag\fP
is nonzero),
.sp
.RS 4m
\fBShow updated moving (YES)?\fP
.RE
.SH "GEOMETRY CODE"
.rs
.sp
The geometry code and macros for the various
\fBsurf\fP
diffractometer
configurations, as used at NSLS X20 and X22, CEA in France and at Exxon
have
been rearranged to ease maintenance and installation of each version.
.sp
The NSLS X20 monochromator macros and geometry code have been
isolated from the four\-circle code, so that references
to the monochromator will only be made if the monochromator option
is selected at installation time.
.sp
The four\-circle code now allows sector 1 to be used in modes 4, 5 and 6.
.sp
The four\-circle code now prints an error message
when a user tries to calculate reciprocal lattice positions
with both
\fBchi\fP
and
\fBphi\fP
at zero in
\fBzone\fP
mode, as the current method of doing the calculations cannot handle that case.
.sp
The three\-circle mode with
\fBphi\fP=0
has been generalized to a
\fBphi\fP\-fixed
mode.
Also, the frozen modes now include
\fBphi\fP
fixed.
.sp
A new scan macro,
\fBaziscan\fP,
is available in
four\-circle mode to scan the azimuthal angle in
\fBazimuthal\fP
mode.
.sp
Bugs in the
\fBzaxis\fP
geometry code calculations have been fixed.
.SH "HARDWARE"
.rs
.sp
The internal code implementing hardware support in \fBspec\fP has been
substantially revised to simplify adding support for new types of
hardware.
The revisions for the most part should be transparent to the user.
If a particular hardware device fails to perform as it did in previous
versions, notify CSS at once, (unless the difference is an improvement).
.sp
Support for the Kinetic Systems 3912 CAMAC crate controller
is now provided on DEC Q\-Bus based systems.
.sp
Support for the Kinetic Systems 3988 GPIB CAMAC crate
controller is now included.
This module can only be used if a National Instruments
GPIB controller is also installed.
The board can be used in either interrupt\-driven or polled mode.
Interrupt driven mode is preferred, but if interrupts are lost in
the GPIB driver, polled mode can be selected.
.sp
Support for the Ortec 974/994/995 counters and counter/timers
is now provided over both GPIB and RS\-232C interfaces.
.sp
Support for the Klinger MC4 motor controller
is now provided over both GPIB and RS\-232C interfaces.
.sp
Support for the Advanced Control Systems MCU\-2 motor controller
is now provided over an RS\-232C interface.
.sp
Persistent timing problems with the Kinetic Systems 3388
GPIB CAMAC module seem to be fixed now.
.sp
\fBspec\fP now recognizes the Joerger SMC 2601 otor controller,
which allows
for programmable velocity and acceleration.
.sp
The code for the TS201 CAMAC timer/counter model now uses timer 2 to gate
counter 2, making it no longer necessary to use an external cable
to gate counter 2.
.sp
The
\fB"new and improved"\fP
E500 modules that use the F(10) A(0) command to clear the module
LAM are now supported.
.sp
The E500 LAM service routine has been modified to use fewer FNA
commands and to recheck for additional LAMs from the E500 before
returning.
The latter change improves performance when several motors in the
same E500 complete their motions at nearly the same time.
.sp
The code that reads the LeCroy 2301 MCA unit has been changed to
read the device faster.
(On a 25 MHz 386 using the DSP 6001, the change
is from 0.36 seconds previously to 0.16 seconds now for reading 1024
channels.)
.sp
Many options for use of the National Instruments GPIB
controllers formerly set by each site using the
\fBibconf\fP
program are now set by \fBspec\fP at run time.
Specifically, \fBspec\fP sets the timeout period to 3 seconds,
the EOS byte to a newline
(\fB\(aq\en\(aq\fP),
reads to be terminated on EOS using
an eight\-bit compare,
REN to be asserted and the board to be the system controller.
The board\(aqs primary address is set to 0 and the
signal to be sent on service request (if using the board with
a GPIB\-to\-CAMAC controller) is set appropriately.
You may still use
\fBibconf\fP
to set whether EOI will be asserted with EOS and/or with the
last byte of a write.
.sp
The length of a string that can be read using
\fBgpib_get()\fP
has been increased from 64
to 255 bytes.
.sp
The GPIB functions
\fBgpib_get()\fP
and
\fBgpib_put()\fP
no longer generate an
\fBinterface clear\fP
(IFC)
message on the bus, unless a previous transaction had
resulted in an error.
The old code that sent an IFC before each transaction
not only slowed down I/O, but also
caused some devices to time out.
In addition, a brief delay is inserted after an IFC is sent
to accommodate slow devices.
(These devices
did not follow GPIB standards and used the IFC message
to reset internal functions rather than just interface
functions.
The device were often not yet ready to respond to the next
interface message after the IFC period was over.)
.sp
If the National Instruments GPIB code has errors on two transactions
in a row, the GPIB device is reset by closing and reopening the
\fB/dev/gpib0\fP
(or whatever is configured)
special file.
If this feature causes more problems then it solves, inform CSS
immediately so we may begin work on alternatives.
.sp
Use of the
\fBser_get()\fP
function to read RS\-232C devices has been changed to increase
its flexibility.
See the
\fBserial\fP
help file for details.
.sp
\fBspec\fP used to silently enforce a rule that only one
GPIB controller, MCA or timer
was allowed at a time.
A message is now printed if the
\fBconfig\fP
file requests more than one
GPIB controller,
CAMAC controller,
timer
or MCA.
The first device of each type encountered in the
\fBconfig\fP
file is the one that will be used.
.sp
Now that scaler numbers are assigned in the
\fBconfig\fP
file, it is possible to configure more than one
type of scaler device at a time.
Each scaler should use hardware gating from the master timer.
Software gating does take place, although there
can be substantial latency between receipt of the time\-complete
signal from the master timer and disabling of the scalers.
Note also that for a number of combined timer/counter units,
the scaler assignment for the seconds and monitor channel
are hard coded into \fBspec\fP.
.sp
For versions of \fBspec\fP on most platforms, memory is allocated for
the maximum number of motors (and scalers) at program startup,
so that it is no longer necessary to restart the program to increase
the number of motors (or scalers) after editing the
\fBconfig\fP
file.
.SH "UTILITIES"
.rs
.sp
A stand\-alone version of the \fBC\-PLOT\fP
\fBscans.4\fP
user function, called
\fBscans\fP,
is now provided for extracting a data set from a \fBspec\fP data file.
See the
\fBREADME\fP
file in the
\fBaux\fP
subdirectory of the distribution.
.SH "ADMINISTRATION"
.rs
.sp
Version 2.14 has a new installation procedure, that is based on
the new
\fBInstall\fP
script in the distribution directory.
A
\fBREADME\fP
file explains the use of the script.
.sp
The CAMAC drivers on all systems should be replaced with
the new versions in the
\fBdrivers\fP
subdirectory of the distribution.
Versions of \fBspec\fP prior to version 2.14 should work with the
new drivers, but \fBspec\fP 2.14 will not work with old versions
of the drivers.
Changes to the drivers are as follows:
The new drivers can be configured at run time for the signal to
send to the user process when a LAM is generated.
The Q and X response of
each dataway transaction is now communicated by the driver
to the user process in a way that does not depend on which CAMAC
controller is installed.
.sp
The
\fBcamac.h\fP
include file has been revised to accommodate CAMAC
drivers on BSD 4.3 and ULTRIX operating systems and
to include added functionality.
The copy of
\fBcamac.h\fP
in the directory
\fB/usr/include\fP
will be updated automatically if you install the new CAMAC driver.
.sp
On System V/386 systems, a new
\fBnap\fP
driver is included that performs fractional second sleeps.
Run the shell script
\fBinstall_nap\fP
in the
\fBdrivers\fP
subdirectory as super user to perform the installation.
.sp
The GPIB driver for the National Instruments PCII board for the
VENIX 286 system must be replaced with
the new version of the driver in this release.
Run the script
\fBinstall_gpib\fP
in the
\fBdrivers\fP
subdirectory as super user to perform the installation.
.sp
Another command file can be automatically read on startup.
This file is named
\fBsite.mac\fP
and resides in the auxiliary file directory
(\fBSPEC\fP)
as, for example,
\fB/usr/lib/spec.d/site.mac\fP.
If this file exists, it
will be read every time a user starts the program, not just
when starting fresh.
The
\fBsite.mac\fP
file is also read when the
\fBnewmac\fP
macro is run.
.sp
More work has been done on the
\fBedconf\fP
program.
In particular, if you exit before saving any changes, you will
be asked to confirm whether you really want to quit.
Also, there is now a fourth screen used to configure scaler
assignments.
The number of configurable scalers on the devices screen has been
increased to three.
The CAMAC slot assignments in the
\fBconfig\fP
file now begin with
\fBCA_\fP
rather than
\fBC_\fP,
as in the old versions.
The old format is still recognized on reading, but the new form
will be written out.
Arrow key sequences are now read from the terminal capability
data base, and so
\fBedconf\fP
can be used with arrow keys on non\-vt100\-compatible terminals.
In addition the
\fBvi\fP
\fBhjkl\fP
motion keys are now recognized.
.sp
The hardware support in \fBspec\fP has been completely modularized.
The
\fBu_hdw.c\fP
file contains a simplified hook mechanism to select the installed
hardware.
All other references to a particular hardware device are now
contained in a single source file, allowing sites to
add support for new devices, without requiring access to the
complete source code.
(At present the
\fBedconf\fP
program cannot be changed at site to add new hardware types.)
.sp
When \fBspec\fP starts out it executes a call to
\fBnice(\-20)\fP.
This call raises the priority of the process, but only when being run
by root or if the
process is owned by root and has set\-user\-id execute mode set.
After raising the priority, \fBspec\fP resets the effective user and group
ids to that of the real user, so there is no danger of the user
spawning subshells or creating files as root.
If \fBspec\fP is not set\-user\-id root, it will behave as before.
.sp
If the
\fBsettings\fP
file can\(aqt be opened for writing when \fBspec\fP starts up, or if there
are read or write errors accessing that file, \fBspec\fP switches to simulate
mode and suggests the user get assistance.
.SH "MISCELLANEOUS"
.rs
.sp
\fBspec\fP is now available for the IBM PS/2 running the AIX 1.2
operating system.
CAMAC support is currently only through a Kinetic Systems 3988
GPIB\-to\-CAMAC crate controller.
.sp
\fBspec\fP is now available for DEC MicroVax computers running
ULTRIX or UCB operating systems.
CAMAC drivers are available for either the Kinetic Systems
3912 or DSP DCC\-11 crate controllers.
.sp
\fBspec\fP is now available for SCO Xenix 286 2.2.3 and SCO Xenix
2.3.2 operating systems.
(Use on a 286 platform is discouraged, though.)
.sp
The motor number indirection array
\fBmA[]\fP
is now reinitialized when the
\fBconfig\fP
macro is invoked, using the
\fB_assign\fP
macro that is defined in each geometry\(aqs standard macro file.
Thus, if motor numbers are reassigned while editing the
\fBconfig\fP
file, the macros that list motors in specific order
(\fBwa\fP, \fBwh\fP, ...)
will still list the motors in the same order after
\fB_assign\fP
is run.
.sp
The
\fBprint\fP
command with no arguments will now print a newline.
In previous versions, such usage was reported as a syntax error.
.sp
The number of command files that may be queued for reading has
been increased from five to eight.
.SH "BUG FIXES"
.rs
.sp
A design flaw, introduced in version 2.11,
and having to do with reads of the motor controller registers,
has been corrected.
The problem was that
\fBspec\fP could lose track of motor positions
if the motor controller registers were changed using a remote
control pod, or if they were cleared due to loss of power,
while \fBspec\fP was running.
If any of the
commands that read the controller registers
(\fBgetangles\fP)
or changed the
\fBsettings\fP
file
(\fBchg_dial()\fP, \fBchg_offset()\fP),
were executed
before executing a
\fBsync\fP
command,
the motor positions would likely have gotten scrambled.
.sp
A bug, whereby the results calculated using the background subtraction
feature were incorrect, has been fixed.
.sp
All motor mnemonics are now freed when executing the
\fBreconfig\fP
command and then reestablished on rereading of the
\fBconfig\fP
file.
Previously, a motor mnemonic, not used in the geometry code,
that was removed from the
\fBconfig\fP
file would remain as an immutable symbol until you ran \fBspec\fP
with the
\fB\-f\fP
flag for a fresh start.
.sp
A bug where
motor control would hang when trying to start a motor on a
Joerger SMC motor controller that had both limits open
has been fixed.
.sp
A bug with the TS201 timer/counter where LAMs would
sometimes be lost during updated counting has been fixed.
.sp
A bug with the TS201 timer/counter where readings of certain
count times (30 seconds, for example)
would indicate the wrong period (although the
period over which the module counted was correct) has been fixed.
.sp
A bug where values assigned to variables declared
\fBlocal\fP
within a statement block sometimes
affected variables of the same name outside the statement
block has been fixed.
.sp
A potential bug where defining a macro recursively would cause
a program crash has been fixed by limiting the amount of input
push back to 64 Kbytes.
(This limit is arbitrary and can be increased by CSS if found to be
too low.)
.sp
A bug where
\fBlog\fP
file names containing a slash were not treated as
\fBlog\fP
files has been fixed.
.sp
An old bug, where reference to the string constant
and then a number constant of the same value, particularly with
a value of zero, would cause unexpected results, has been fixed.
In previous versions, the code:
.RS 3m
.sp
.nf
.ft CB
{
  a = "0"
  b = 0
  if (b) print "This should not happen"
}
.ft P
.fi
.RE
.sp
would result in the message being printed.

