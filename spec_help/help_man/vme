.TH "vme" "hardware" "08/01/12" "vme.rst 6.1  08/01/12 CSS"
.ds HF R
.na
.hy 0
.SH NAME
vme \- VME interface
.\" spec reStructuredText documentation
.
\fP
.PP
.\" @(#)vme.rst  6.1  08/01/12  CSS
.
.\" Copyright (c) 1997,1998,2003,2006,2009,2012
.
.\" by Certified Scientific Software
.
.\" 
.
.\" versioninfo: "vme" "hardware" "08/01/12" "vme.rst 6.1  08/01/12 CSS"
.
.SH "SUPPORTED CONTROLLER CARDS"
.rs
.sp
\fBspec\fP supports the following VME controllers.
Note, SBS (formerly Bit 3) is now GE Fanuc.
.sp
.RS 4m
.RS 0m
.HP 5m
."
\fBSBS (Bit 3) Model 403 ISA\fP
\- 
Available on \fBLinux\fP and on HP\-700 platforms with E/ISA slots.
Only A16 access supported.  No kernel drivers involved.
.HP 5m
."
\fBSBS (Bit 3) Model 616/617/618/620 PCI with SBS Driver\fP
\- 
Available on \fBLinux\fP with the SBS model 1003 v1.0 driver,
on Solaris platforms with
the SBS model 945 driver and on HP platforms with the SBS model 934 driver.
If the SBS controller is to be the master on the VME crate, be sure
to set the system controller jumpers on the SBS VME module.
.HP 5m
."
\fBSBS (Bit 3) Model 616/617/618 PCI with no Driver\fP
\- 
\fBspec\fP provides built\-in user level support on
\fBLinux\fP platforms, which may be useful on platforms with kernel versions
not supported by the SBS driver.
This built\-in support doesn\(aqt include support for DMA transfers, though.
If the SBS controller is to be the master on the VME crate, be sure
to set the system controller jumpers on the SBS VME module.
.HP 5m
."
\fBSBS (Bit 3) Model 487\-1 E/ISA\fP
\- 
Requires SBS (Bit 3) Model 933 support software.  DMA transfers supported.
Note, you must use the HP
\fBeisa_config\fP utility to change the default board settings to include
"Memory Mapping Enabled" and "Privilege Checks Disabled".
.HP 5m
."
\fBSBS (Bit 3) Model 466\-1 SBus\fP
\- 
Requires SBS (Bit 3) Model 944 support software.
.HP 5m
."
\fBSBS (Bit 3) Model 467\-1 SBus\fP
\- 
Same as Model 466\-1 above, but DMA transfers supported.
.HP 5m
."
\fBStruck Model SIS1100/3100 PCI\fP
\- 
Available on \fBLinux\fP using either \fBspec\fP\(aqs built\-in
driverless support or using Struck\(aqs kernel driver.
The built\-in support doesn\(aqt include support for DMA transfers.
.HP 5m
."
\fBStruck Model SIS3150 USB\fP
\- 
Available on \fBLinux\fP and Mac OS X platforms
using \fBspec\fP\(aqs built\-in support.
.RE
.RE
.SH "BUILT\-IN FUNCTIONS"
.rs
.sp
The type of data access and/or VME address modifier
for the functions can be selected with the optional argument
\fBopts\fP as follows (if more than one option is needed,
make a comma\-separated
list in the single string argument):
.sp
.RS 4m
.RS 0m
.HP 5m
."
\fB"D8"\fP
\- 
byte access.
.HP 5m
."
\fB"D16"\fP
\- 
short\-word access.
.HP 5m
."
\fB"D32"\fP
\- 
long\-word access, but only available with \fBvme_get32()\fP
and \fBvme_put32()\fP.
.HP 5m
."
\fB"A16"\fP
\- 
use A16 (amod=0x2D) addressing.
.HP 5m
."
\fB"A24"\fP
\- 
use A24 (amod=0x3D) addressing, on adapters that support it.
.HP 5m
."
\fB"A32"\fP
\- 
use A32 (amod=0x0D) addressing, on adapters that support it.
.HP 5m
."
\fB"DPRT"\fP
\- 
use dual\-port memory access (amod=0x1D), on adapters that support it.
.HP 5m
."
\fB"amod=0xXX"\fP
\- 
specify the hexadecimal value for the address modifier.
.RE
.RE
.sp
The \fBvme_move()\fP function recognizes the following
additional strings in its fourth argument:
.sp
.RS 4m
.RS 0m
.HP 5m
."
\fB"no_dma"\fP
\- 
Don\(aqt use the DMA interface for this transfer, even if it is available.
.RE
.HP 5m
."
\fB"no_inc"\fP
\- 
Rather than increment the VME address for each item transferred,
write each item to the same VME address.
.RE
.RE
.sp
The default mode for the A16 access functions
\fBvme_get()\fP and \fBvme_put()\fP is D8.
The default mode for the A32 access functions
\fBvme_get32()\fP and \fBvme_put32()\fP is D32.
The defaults for all functions can be overridden
by options in the \fBopts\fP string.
.sp
Not all VME adapters supported by \fBspec\fP support A32 access.
.RS 0m
.HP 5m
."
\fBvme_get(addr [, opts])\fP
\- 
Returns the data at \fBaddr\fP in the 64K A16 address space.
.RE
.HP 5m
."
\fBvme_put(addr, data [, opts])\fP
\- 
Writes \fBdata\fP to \fBaddr\fP in the 64K A16 address space.
.HP 5m
."
\fBvme_get32(addr [, opts])\fP
\- 
Returns the data at \fBaddr\fP in the A32 address space.
.HP 5m
."
\fBvme_put32(addr, data [, opts])\fP
\- 
Writes \fBdata\fP to \fBaddr\fP in the A32 address space.
.HP 5m
."
\fBvme_move(from, to [, cnt [, opts]])\fP
\- 
Copies data between a \fBspec\fP data array and VME address space.
One of the \fBfrom\fP and
\fBto\fP arguments must be the name of a \fBspec\fP data array while
the other must be a VME address.  If the optional argument
\fBcnt\fP is present,
it designates how many data items (not bytes) to copy.
If missing or zero, the number of elements in the array is copied.
A32 addressing is used by default.
The default data size is determined by the data size of the array.
Both can be overridden by \fBopts\fP.
.RE
.SH "MULTIPLE VME CONTROLLERS"
.rs
.sp
\fBspec\fP allows up to four VME controllers to be configured
by the same instance of \fBspec\fP.
In the configuration editor, use the \fB^F\fP and
\fB^B\fP command on the VME controller line of the \fBI\fPnterfaces
screen to configure each controller.
To include a unit number in a VME address for a device,
enter the address using the notation
\fBunit:address\fP. An absent \fBunit:\fP prefix implies VME controller unit zero.
.sp
In the \fBconfig\fP file, the unit number associated
with a VME controller is specified with \fB@vme_0\fP, \fB@vme_1\fP, etc.
.sp
For the \fBvme_get()\fP, \fBvme_get32()\fP, \fBvme_put()\fP, \fBvme_put32()\fP and
\fBvme_move()\fP functions, the VME unit numbers are encoded using the same
\fB"unit:address"\fP syntax as above. For the function calls,
such an address argument must be passed as a string by using quotes to
make a constant string, or by passing a string\-valued variable.
.SH "SEE ALSO"
.rs
.sp
\fI\%www.gefanuc.com\fP
.sp
\fI\%www.struck.de\fP

